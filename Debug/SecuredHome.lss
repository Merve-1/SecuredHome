
SecuredHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000125a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00800060  0000125a  000012ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  008001e4  008001e4  00001472  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002697  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d68  00000000  00000000  00003d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001453  00000000  00000000  00004b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000470  00000000  00000000  00005f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e3  00000000  00000000  000063cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001313  00000000  00000000  00006daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000080c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a4 ee       	ldi	r26, 0xE4	; 228
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <main>
      8a:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SubBytes>:

void AES_init(const uint8_t *key) {
	KeyExpansion(key);
}

static void SubBytes(uint8_t *state) {
      92:	ac 01       	movw	r20, r24
	// SubBytes transformation using the S-box
	for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	30 e0       	ldi	r19, 0x00	; 0
      98:	0b c0       	rjmp	.+22     	; 0xb0 <SubBytes+0x1e>
		state[i] = sbox[state[i]];
      9a:	da 01       	movw	r26, r20
      9c:	a2 0f       	add	r26, r18
      9e:	b3 1f       	adc	r27, r19
      a0:	ec 91       	ld	r30, X
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	ef 57       	subi	r30, 0x7F	; 127
      a6:	ff 4f       	sbci	r31, 0xFF	; 255
      a8:	90 81       	ld	r25, Z
      aa:	9c 93       	st	X, r25
	KeyExpansion(key);
}

static void SubBytes(uint8_t *state) {
	// SubBytes transformation using the S-box
	for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
      ac:	2f 5f       	subi	r18, 0xFF	; 255
      ae:	3f 4f       	sbci	r19, 0xFF	; 255
      b0:	20 31       	cpi	r18, 0x10	; 16
      b2:	31 05       	cpc	r19, r1
      b4:	94 f3       	brlt	.-28     	; 0x9a <SubBytes+0x8>
		state[i] = sbox[state[i]];
	}
}
      b6:	08 95       	ret

000000b8 <ShiftRows>:

static void ShiftRows(uint8_t *state) {
      b8:	fc 01       	movw	r30, r24
	// ShiftRows transformation
	uint8_t temp;

	// Row 1 shift left by 1
	temp = state[1];
      ba:	81 81       	ldd	r24, Z+1	; 0x01
	state[1] = state[5];
      bc:	95 81       	ldd	r25, Z+5	; 0x05
      be:	91 83       	std	Z+1, r25	; 0x01
	state[5] = state[9];
      c0:	91 85       	ldd	r25, Z+9	; 0x09
      c2:	95 83       	std	Z+5, r25	; 0x05
	state[9] = state[13];
      c4:	95 85       	ldd	r25, Z+13	; 0x0d
      c6:	91 87       	std	Z+9, r25	; 0x09
	state[13] = temp;
      c8:	85 87       	std	Z+13, r24	; 0x0d

	// Row 2 shift left by 2
	temp = state[2];
      ca:	82 81       	ldd	r24, Z+2	; 0x02
	state[2] = state[10];
      cc:	92 85       	ldd	r25, Z+10	; 0x0a
      ce:	92 83       	std	Z+2, r25	; 0x02
	state[10] = temp;
      d0:	82 87       	std	Z+10, r24	; 0x0a
	temp = state[6];
      d2:	86 81       	ldd	r24, Z+6	; 0x06
	state[6] = state[14];
      d4:	96 85       	ldd	r25, Z+14	; 0x0e
      d6:	96 83       	std	Z+6, r25	; 0x06
	state[14] = temp;
      d8:	86 87       	std	Z+14, r24	; 0x0e

	// Row 3 shift left by 3
	temp = state[3];
      da:	83 81       	ldd	r24, Z+3	; 0x03
	state[3] = state[15];
      dc:	97 85       	ldd	r25, Z+15	; 0x0f
      de:	93 83       	std	Z+3, r25	; 0x03
	state[15] = state[11];
      e0:	93 85       	ldd	r25, Z+11	; 0x0b
      e2:	97 87       	std	Z+15, r25	; 0x0f
	state[11] = state[7];
      e4:	97 81       	ldd	r25, Z+7	; 0x07
      e6:	93 87       	std	Z+11, r25	; 0x0b
	state[7] = temp;
      e8:	87 83       	std	Z+7, r24	; 0x07
      ea:	08 95       	ret

000000ec <MixColumns>:
}

static void MixColumns(uint8_t *state) {
      ec:	cf 92       	push	r12
      ee:	df 92       	push	r13
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	bc 01       	movw	r22, r24
	// MixColumns transformation (dummy implementation)
	// Full implementation requires Galois field multiplication
	// Here is a simple placeholder that doesn't do actual MixColumns
	for (int i = 0; i < 4; ++i) {
      fc:	40 e0       	ldi	r20, 0x00	; 0
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	26 c0       	rjmp	.+76     	; 0x14e <MixColumns+0x62>
		uint8_t a = state[i * 4 + 0];
     102:	9a 01       	movw	r18, r20
     104:	22 0f       	add	r18, r18
     106:	33 1f       	adc	r19, r19
     108:	22 0f       	add	r18, r18
     10a:	33 1f       	adc	r19, r19
     10c:	8b 01       	movw	r16, r22
     10e:	02 0f       	add	r16, r18
     110:	13 1f       	adc	r17, r19
     112:	f8 01       	movw	r30, r16
     114:	f0 80       	ld	r15, Z
		uint8_t b = state[i * 4 + 1];
     116:	e9 01       	movw	r28, r18
     118:	21 96       	adiw	r28, 0x01	; 1
     11a:	c6 0f       	add	r28, r22
     11c:	d7 1f       	adc	r29, r23
     11e:	98 81       	ld	r25, Y
		uint8_t c = state[i * 4 + 2];
     120:	d9 01       	movw	r26, r18
     122:	12 96       	adiw	r26, 0x02	; 2
     124:	a6 0f       	add	r26, r22
     126:	b7 1f       	adc	r27, r23
     128:	8c 91       	ld	r24, X
		uint8_t d = state[i * 4 + 3];
     12a:	2d 5f       	subi	r18, 0xFD	; 253
     12c:	3f 4f       	sbci	r19, 0xFF	; 255
     12e:	6b 01       	movw	r12, r22
     130:	c2 0e       	add	r12, r18
     132:	d3 1e       	adc	r13, r19
     134:	f6 01       	movw	r30, r12
     136:	20 81       	ld	r18, Z
		state[i * 4 + 0] = a ^ b ^ c ^ d;
     138:	9f 25       	eor	r25, r15
     13a:	98 27       	eor	r25, r24
     13c:	92 27       	eor	r25, r18
     13e:	f8 01       	movw	r30, r16
     140:	90 83       	st	Z, r25
		state[i * 4 + 1] = a ^ b ^ c ^ d;
     142:	98 83       	st	Y, r25
		state[i * 4 + 2] = a ^ b ^ c ^ d;
     144:	9c 93       	st	X, r25
		state[i * 4 + 3] = a ^ b ^ c ^ d;
     146:	f6 01       	movw	r30, r12
     148:	90 83       	st	Z, r25

static void MixColumns(uint8_t *state) {
	// MixColumns transformation (dummy implementation)
	// Full implementation requires Galois field multiplication
	// Here is a simple placeholder that doesn't do actual MixColumns
	for (int i = 0; i < 4; ++i) {
     14a:	4f 5f       	subi	r20, 0xFF	; 255
     14c:	5f 4f       	sbci	r21, 0xFF	; 255
     14e:	44 30       	cpi	r20, 0x04	; 4
     150:	51 05       	cpc	r21, r1
     152:	bc f2       	brlt	.-82     	; 0x102 <MixColumns+0x16>
		state[i * 4 + 0] = a ^ b ^ c ^ d;
		state[i * 4 + 1] = a ^ b ^ c ^ d;
		state[i * 4 + 2] = a ^ b ^ c ^ d;
		state[i * 4 + 3] = a ^ b ^ c ^ d;
	}
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	ff 90       	pop	r15
     15e:	df 90       	pop	r13
     160:	cf 90       	pop	r12
     162:	08 95       	ret

00000164 <AddRoundKey>:

static void AddRoundKey(uint8_t *state, const uint8_t *round_key) {
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	ec 01       	movw	r28, r24
	// AddRoundKey transformation
	for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	0c c0       	rjmp	.+24     	; 0x188 <AddRoundKey+0x24>
		state[i] ^= round_key[i];
     170:	fe 01       	movw	r30, r28
     172:	e2 0f       	add	r30, r18
     174:	f3 1f       	adc	r31, r19
     176:	db 01       	movw	r26, r22
     178:	a2 0f       	add	r26, r18
     17a:	b3 1f       	adc	r27, r19
     17c:	9c 91       	ld	r25, X
     17e:	40 81       	ld	r20, Z
     180:	94 27       	eor	r25, r20
     182:	90 83       	st	Z, r25
	}
}

static void AddRoundKey(uint8_t *state, const uint8_t *round_key) {
	// AddRoundKey transformation
	for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
     184:	2f 5f       	subi	r18, 0xFF	; 255
     186:	3f 4f       	sbci	r19, 0xFF	; 255
     188:	20 31       	cpi	r18, 0x10	; 16
     18a:	31 05       	cpc	r19, r1
     18c:	8c f3       	brlt	.-30     	; 0x170 <AddRoundKey+0xc>
		state[i] ^= round_key[i];
	}
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <KeyExpansion>:
};

// AES round keys (dummy implementation)
static uint8_t round_keys[AES_BLOCK_SIZE * 11];

static void KeyExpansion(const uint8_t *key) {
     194:	fc 01       	movw	r30, r24
	// Dummy key expansion logic here
	// For simplicity, we will just copy the key to the first round key
	memcpy(round_keys, key, AES_BLOCK_SIZE);
     196:	90 e1       	ldi	r25, 0x10	; 16
     198:	a4 ee       	ldi	r26, 0xE4	; 228
     19a:	b1 e0       	ldi	r27, 0x01	; 1
     19c:	01 90       	ld	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	9a 95       	dec	r25
     1a2:	e1 f7       	brne	.-8      	; 0x19c <KeyExpansion+0x8>
     1a4:	08 95       	ret

000001a6 <AES_init>:
}

void AES_init(const uint8_t *key) {
	KeyExpansion(key);
     1a6:	0e 94 ca 00 	call	0x194	; 0x194 <KeyExpansion>
     1aa:	08 95       	ret

000001ac <AES_encrypt>:
	for (int i = 0; i < AES_BLOCK_SIZE; ++i) {
		state[i] ^= round_key[i];
	}
}

void AES_encrypt(const uint8_t *input, uint8_t *output) {
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	60 97       	sbiw	r28, 0x10	; 16
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
     1c8:	fc 01       	movw	r30, r24
     1ca:	7b 01       	movw	r14, r22
	uint8_t state[AES_BLOCK_SIZE];
	memcpy(state, input, AES_BLOCK_SIZE);
     1cc:	90 e1       	ldi	r25, 0x10	; 16
     1ce:	de 01       	movw	r26, r28
     1d0:	11 96       	adiw	r26, 0x01	; 1
     1d2:	01 90       	ld	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	9a 95       	dec	r25
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <AES_encrypt+0x26>

	AddRoundKey(state, round_keys);
     1da:	64 ee       	ldi	r22, 0xE4	; 228
     1dc:	71 e0       	ldi	r23, 0x01	; 1
     1de:	ce 01       	movw	r24, r28
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	0e 94 b2 00 	call	0x164	; 0x164 <AddRoundKey>

	for (int round = 1; round < 10; ++round) {
     1e6:	01 e0       	ldi	r16, 0x01	; 1
     1e8:	10 e0       	ldi	r17, 0x00	; 0
     1ea:	1b c0       	rjmp	.+54     	; 0x222 <AES_encrypt+0x76>
		SubBytes(state);
     1ec:	ce 01       	movw	r24, r28
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	0e 94 49 00 	call	0x92	; 0x92 <SubBytes>
		ShiftRows(state);
     1f4:	ce 01       	movw	r24, r28
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <ShiftRows>
		MixColumns(state);
     1fc:	ce 01       	movw	r24, r28
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	0e 94 76 00 	call	0xec	; 0xec <MixColumns>
		AddRoundKey(state, round_keys + round * AES_BLOCK_SIZE);
     204:	b8 01       	movw	r22, r16
     206:	62 95       	swap	r22
     208:	72 95       	swap	r23
     20a:	70 7f       	andi	r23, 0xF0	; 240
     20c:	76 27       	eor	r23, r22
     20e:	60 7f       	andi	r22, 0xF0	; 240
     210:	76 27       	eor	r23, r22
     212:	6c 51       	subi	r22, 0x1C	; 28
     214:	7e 4f       	sbci	r23, 0xFE	; 254
     216:	ce 01       	movw	r24, r28
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	0e 94 b2 00 	call	0x164	; 0x164 <AddRoundKey>
	uint8_t state[AES_BLOCK_SIZE];
	memcpy(state, input, AES_BLOCK_SIZE);

	AddRoundKey(state, round_keys);

	for (int round = 1; round < 10; ++round) {
     21e:	0f 5f       	subi	r16, 0xFF	; 255
     220:	1f 4f       	sbci	r17, 0xFF	; 255
     222:	0a 30       	cpi	r16, 0x0A	; 10
     224:	11 05       	cpc	r17, r1
     226:	14 f3       	brlt	.-60     	; 0x1ec <AES_encrypt+0x40>
		ShiftRows(state);
		MixColumns(state);
		AddRoundKey(state, round_keys + round * AES_BLOCK_SIZE);
	}

	SubBytes(state);
     228:	ce 01       	movw	r24, r28
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	0e 94 49 00 	call	0x92	; 0x92 <SubBytes>
	ShiftRows(state);
     230:	ce 01       	movw	r24, r28
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	0e 94 5c 00 	call	0xb8	; 0xb8 <ShiftRows>
	AddRoundKey(state, round_keys + 10 * AES_BLOCK_SIZE);
     238:	64 e8       	ldi	r22, 0x84	; 132
     23a:	72 e0       	ldi	r23, 0x02	; 2
     23c:	ce 01       	movw	r24, r28
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	0e 94 b2 00 	call	0x164	; 0x164 <AddRoundKey>

	memcpy(output, state, AES_BLOCK_SIZE);
     244:	80 e1       	ldi	r24, 0x10	; 16
     246:	fe 01       	movw	r30, r28
     248:	31 96       	adiw	r30, 0x01	; 1
     24a:	d7 01       	movw	r26, r14
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	8a 95       	dec	r24
     252:	e1 f7       	brne	.-8      	; 0x24c <AES_encrypt+0xa0>
}
     254:	60 96       	adiw	r28, 0x10	; 16
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	ff 90       	pop	r15
     26a:	ef 90       	pop	r14
     26c:	08 95       	ret

0000026e <DCMOTOR_voidInit>:
#include "DCMOTOR_config.h"


void DCMOTOR_voidInit(u8 copy_u8MotorId) {
	/* Initialize H-Bridge As Output Pins depending on motor id */
	switch(copy_u8MotorId) {
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	79 f4       	brne	.+30     	; 0x290 <DCMOTOR_voidInit+0x22>
		case DCMOTOR_A:
		DIO_voidSetPinDirection(DCMOTOR_A_IN1_PORT, DCMOTOR_A_IN1_PIN, DIO_PIN_OUTPUT);
     272:	41 e0       	ldi	r20, 0x01	; 1
     274:	63 e0       	ldi	r22, 0x03	; 3
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCMOTOR_A_IN2_PORT, DCMOTOR_A_IN2_PIN, DIO_PIN_OUTPUT);
     27c:	41 e0       	ldi	r20, 0x01	; 1
     27e:	62 e0       	ldi	r22, 0x02	; 2
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCMOTOR_A_ENABLE_PORT, DCMOTOR_A_ENABLE_PIN, DIO_PIN_OUTPUT);
     286:	41 e0       	ldi	r20, 0x01	; 1
     288:	66 e0       	ldi	r22, 0x06	; 6
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
     290:	08 95       	ret

00000292 <DCMOTOR_voidOn>:
		break;
	}
}

void DCMOTOR_voidOn(u8 copy_u8MotorId, u8 copy_u8MotorDirection) {
	switch(copy_u8MotorId) {
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	f9 f4       	brne	.+62     	; 0x2d4 <DCMOTOR_voidOn+0x42>
		case DCMOTOR_A:
		switch(copy_u8MotorDirection) {
     296:	61 30       	cpi	r22, 0x01	; 1
     298:	19 f0       	breq	.+6      	; 0x2a0 <DCMOTOR_voidOn+0xe>
     29a:	62 30       	cpi	r22, 0x02	; 2
     29c:	61 f0       	breq	.+24     	; 0x2b6 <DCMOTOR_voidOn+0x24>
     29e:	15 c0       	rjmp	.+42     	; 0x2ca <DCMOTOR_voidOn+0x38>
			case DCMOTOR_CLOCK_WISE:
			DIO_voidSetPinValue(DCMOTOR_A_IN1_PORT, DCMOTOR_A_IN1_PIN, DIO_PIN_HIGH);
     2a0:	41 e0       	ldi	r20, 0x01	; 1
     2a2:	63 e0       	ldi	r22, 0x03	; 3
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCMOTOR_A_IN2_PORT, DCMOTOR_A_IN2_PIN, DIO_PIN_LOW);
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	62 e0       	ldi	r22, 0x02	; 2
     2ae:	83 e0       	ldi	r24, 0x03	; 3
     2b0:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
			break;
     2b4:	0a c0       	rjmp	.+20     	; 0x2ca <DCMOTOR_voidOn+0x38>
			case DCMOTOR_COUNTER_CLOCK_WISE:
			DIO_voidSetPinValue(DCMOTOR_A_IN1_PORT, DCMOTOR_A_IN1_PIN, DIO_PIN_LOW);
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	63 e0       	ldi	r22, 0x03	; 3
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCMOTOR_A_IN2_PORT, DCMOTOR_A_IN2_PIN, DIO_PIN_HIGH);
     2c0:	41 e0       	ldi	r20, 0x01	; 1
     2c2:	62 e0       	ldi	r22, 0x02	; 2
     2c4:	83 e0       	ldi	r24, 0x03	; 3
     2c6:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
			break;
		}
		DIO_voidSetPinValue(DCMOTOR_A_ENABLE_PORT, DCMOTOR_A_ENABLE_PIN, DIO_PIN_HIGH);
     2ca:	41 e0       	ldi	r20, 0x01	; 1
     2cc:	66 e0       	ldi	r22, 0x06	; 6
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     2d4:	08 95       	ret

000002d6 <DCMOTOR_voidOff>:
		break;
	}
}

void DCMOTOR_voidOff(u8 copy_u8MotorId) {
	switch(copy_u8MotorId) {
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	29 f4       	brne	.+10     	; 0x2e4 <DCMOTOR_voidOff+0xe>
		case DCMOTOR_A:
		DIO_voidSetPinValue(DCMOTOR_A_ENABLE_PORT, DCMOTOR_A_ENABLE_PIN, DIO_PIN_LOW);
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	66 e0       	ldi	r22, 0x06	; 6
     2de:	83 e0       	ldi	r24, 0x03	; 3
     2e0:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     2e4:	08 95       	ret

000002e6 <KPD_voidInit>:


void KPD_voidInit(void){
	
	//Initialize KPD COLS pins As Output Pins
	DIO_voidSetPinDirection(KPD_COL0_PORT, KPD_COL0_PIN, DIO_PIN_OUTPUT);
     2e6:	41 e0       	ldi	r20, 0x01	; 1
     2e8:	64 e0       	ldi	r22, 0x04	; 4
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL1_PORT, KPD_COL1_PIN, DIO_PIN_OUTPUT);
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	65 e0       	ldi	r22, 0x05	; 5
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_OUTPUT);
     2fa:	41 e0       	ldi	r20, 0x01	; 1
     2fc:	66 e0       	ldi	r22, 0x06	; 6
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL3_PORT, KPD_COL3_PIN, DIO_PIN_OUTPUT);
     304:	41 e0       	ldi	r20, 0x01	; 1
     306:	67 e0       	ldi	r22, 0x07	; 7
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	
	
	//Initialize KPD ROWS pins As Input Pins
	DIO_voidSetPinDirection(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_PIN_INPUT);
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	63 e0       	ldi	r22, 0x03	; 3
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_PIN_INPUT);
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	64 e0       	ldi	r22, 0x04	; 4
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_PIN_INPUT);
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	65 e0       	ldi	r22, 0x05	; 5
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_PIN_INPUT);
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	66 e0       	ldi	r22, 0x06	; 6
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	
	//Active KDP ROWS Pins Internal Pull Up 
	DIO_voidActivePinInPullUpResistance(KPD_ROW0_PORT, KPD_ROW0_PIN);
     336:	63 e0       	ldi	r22, 0x03	; 3
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW1_PORT, KPD_ROW1_PIN);
     33e:	64 e0       	ldi	r22, 0x04	; 4
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW2_PORT, KPD_ROW2_PIN);
     346:	65 e0       	ldi	r22, 0x05	; 5
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW3_PORT, KPD_ROW3_PIN); 
     34e:	66 e0       	ldi	r22, 0x06	; 6
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_voidActivePinInPullUpResistance>
     356:	08 95       	ret

00000358 <KPD_voidGetValue>:


}
void KPD_voidGetValue(u8* copy_pu8ReturnedValue){
     358:	6f 92       	push	r6
     35a:	7f 92       	push	r7
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	a1 97       	sbiw	r28, 0x21	; 33
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
	if(copy_pu8ReturnedValue != NULL){
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	09 f4       	brne	.+2      	; 0x38a <KPD_voidGetValue+0x32>
     388:	80 c0       	rjmp	.+256    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     38a:	5c 01       	movw	r10, r24
		
		u8 local_u8ColsPorts[4] = {KPD_COL0_PORT,KPD_COL1_PORT,KPD_COL2_PORT,KPD_COL3_PORT};
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	8d 8f       	std	Y+29, r24	; 0x1d
     390:	8e 8f       	std	Y+30, r24	; 0x1e
     392:	8f 8f       	std	Y+31, r24	; 0x1f
     394:	88 a3       	std	Y+32, r24	; 0x20
		u8 local_u8ColsPins [4] = {KPD_COL0_PIN ,KPD_COL1_PIN ,KPD_COL2_PIN ,KPD_COL3_PIN };
     396:	34 e0       	ldi	r19, 0x04	; 4
     398:	39 8f       	std	Y+25, r19	; 0x19
     39a:	25 e0       	ldi	r18, 0x05	; 5
     39c:	2a 8f       	std	Y+26, r18	; 0x1a
     39e:	96 e0       	ldi	r25, 0x06	; 6
     3a0:	9b 8f       	std	Y+27, r25	; 0x1b
     3a2:	87 e0       	ldi	r24, 0x07	; 7
     3a4:	8c 8f       	std	Y+28, r24	; 0x1c
		u8 local_u8RowsPorts[4] = {KPD_ROW0_PORT,KPD_ROW1_PORT,KPD_ROW2_PORT,KPD_ROW3_PORT};
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	8d 8b       	std	Y+21, r24	; 0x15
     3aa:	8e 8b       	std	Y+22, r24	; 0x16
     3ac:	8f 8b       	std	Y+23, r24	; 0x17
     3ae:	88 8f       	std	Y+24, r24	; 0x18
		u8 local_u8RowsPins [4] = {KPD_ROW0_PIN ,KPD_ROW1_PIN ,KPD_ROW2_PIN ,KPD_ROW3_PIN };
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	89 8b       	std	Y+17, r24	; 0x11
     3b4:	3a 8b       	std	Y+18, r19	; 0x12
     3b6:	2b 8b       	std	Y+19, r18	; 0x13
     3b8:	9c 8b       	std	Y+20, r25	; 0x14
			
		u8 local_u8Keys[4][4] = KPD_KEYS;
     3ba:	80 e1       	ldi	r24, 0x10	; 16
     3bc:	e0 e6       	ldi	r30, 0x60	; 96
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	de 01       	movw	r26, r28
     3c2:	11 96       	adiw	r26, 0x01	; 1
     3c4:	01 90       	ld	r0, Z+
     3c6:	0d 92       	st	X+, r0
     3c8:	8a 95       	dec	r24
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <KPD_voidGetValue+0x6c>
		
		u8 local_u8ColsCounter, local_u8RowsCounter;
		u8 local_u8RowValue;
		*copy_pu8ReturnedValue = KPD_NOT_PRESSED;
     3cc:	8f ef       	ldi	r24, 0xFF	; 255
     3ce:	f5 01       	movw	r30, r10
     3d0:	80 83       	st	Z, r24
			
		for(local_u8ColsCounter= 0 ; local_u8ColsCounter<4; local_u8ColsCounter++){
     3d2:	81 2c       	mov	r8, r1
     3d4:	56 c0       	rjmp	.+172    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
			// Activate Each Columns
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_LOW);
     3d6:	c8 2c       	mov	r12, r8
     3d8:	d1 2c       	mov	r13, r1
     3da:	e9 e1       	ldi	r30, 0x19	; 25
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ec 0f       	add	r30, r28
     3e0:	fd 1f       	adc	r31, r29
     3e2:	ec 0d       	add	r30, r12
     3e4:	fd 1d       	adc	r31, r13
     3e6:	60 80       	ld	r6, Z
     3e8:	ed e1       	ldi	r30, 0x1D	; 29
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	ec 0f       	add	r30, r28
     3ee:	fd 1f       	adc	r31, r29
     3f0:	ec 0d       	add	r30, r12
     3f2:	fd 1d       	adc	r31, r13
     3f4:	70 80       	ld	r7, Z
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	66 2d       	mov	r22, r6
     3fa:	87 2d       	mov	r24, r7
     3fc:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
			
			//Read Each Row 
			for(local_u8RowsCounter=0;local_u8RowsCounter<4;local_u8RowsCounter++)
     400:	10 e0       	ldi	r17, 0x00	; 0
     402:	37 c0       	rjmp	.+110    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			{
				//Read Each Row
				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter],
     404:	e1 2e       	mov	r14, r17
     406:	f1 2c       	mov	r15, r1
     408:	e1 e1       	ldi	r30, 0x11	; 17
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ec 0f       	add	r30, r28
     40e:	fd 1f       	adc	r31, r29
     410:	ee 0d       	add	r30, r14
     412:	ff 1d       	adc	r31, r15
     414:	00 81       	ld	r16, Z
     416:	e5 e1       	ldi	r30, 0x15	; 21
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	ec 0f       	add	r30, r28
     41c:	fd 1f       	adc	r31, r29
     41e:	ee 0d       	add	r30, r14
     420:	ff 1d       	adc	r31, r15
     422:	90 80       	ld	r9, Z
     424:	ae 01       	movw	r20, r28
     426:	4f 5d       	subi	r20, 0xDF	; 223
     428:	5f 4f       	sbci	r21, 0xFF	; 255
     42a:	60 2f       	mov	r22, r16
     42c:	89 2d       	mov	r24, r9
     42e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DIO_voidGetPinValue>
				&local_u8RowValue);
				
				//Is pressed?
				if(0 == local_u8RowValue)
     432:	89 a1       	ldd	r24, Y+33	; 0x21
     434:	81 11       	cpse	r24, r1
     436:	1c c0       	rjmp	.+56     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     438:	07 c0       	rjmp	.+14     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
				{
					while(0 == local_u8RowValue)
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter],&local_u8RowValue);
     43a:	ae 01       	movw	r20, r28
     43c:	4f 5d       	subi	r20, 0xDF	; 223
     43e:	5f 4f       	sbci	r21, 0xFF	; 255
     440:	60 2f       	mov	r22, r16
     442:	89 2d       	mov	r24, r9
     444:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DIO_voidGetPinValue>
				&local_u8RowValue);
				
				//Is pressed?
				if(0 == local_u8RowValue)
				{
					while(0 == local_u8RowValue)
     448:	89 a1       	ldd	r24, Y+33	; 0x21
     44a:	88 23       	and	r24, r24
     44c:	b1 f3       	breq	.-20     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter],&local_u8RowValue);
					}
					*copy_pu8ReturnedValue = local_u8Keys[local_u8RowsCounter][local_u8ColsCounter];
     44e:	ee 0c       	add	r14, r14
     450:	ff 1c       	adc	r15, r15
     452:	ee 0c       	add	r14, r14
     454:	ff 1c       	adc	r15, r15
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	8c 0f       	add	r24, r28
     45c:	9d 1f       	adc	r25, r29
     45e:	e8 0e       	add	r14, r24
     460:	f9 1e       	adc	r15, r25
     462:	f7 01       	movw	r30, r14
     464:	ec 0d       	add	r30, r12
     466:	fd 1d       	adc	r31, r13
     468:	80 81       	ld	r24, Z
     46a:	f5 01       	movw	r30, r10
     46c:	80 83       	st	Z, r24
     46e:	0d c0       	rjmp	.+26     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		for(local_u8ColsCounter= 0 ; local_u8ColsCounter<4; local_u8ColsCounter++){
			// Activate Each Columns
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_LOW);
			
			//Read Each Row 
			for(local_u8RowsCounter=0;local_u8RowsCounter<4;local_u8RowsCounter++)
     470:	1f 5f       	subi	r17, 0xFF	; 255
     472:	14 30       	cpi	r17, 0x04	; 4
     474:	38 f2       	brcs	.-114    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
					return;
				}
			}

			// Deactivate current Columns
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_HIGH);
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	66 2d       	mov	r22, r6
     47a:	87 2d       	mov	r24, r7
     47c:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
		
		u8 local_u8ColsCounter, local_u8RowsCounter;
		u8 local_u8RowValue;
		*copy_pu8ReturnedValue = KPD_NOT_PRESSED;
			
		for(local_u8ColsCounter= 0 ; local_u8ColsCounter<4; local_u8ColsCounter++){
     480:	83 94       	inc	r8
     482:	f3 e0       	ldi	r31, 0x03	; 3
     484:	f8 15       	cp	r31, r8
     486:	08 f0       	brcs	.+2      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     488:	a6 cf       	rjmp	.-180    	; 0x3d6 <KPD_voidGetValue+0x7e>
		}
	}
	else{
		//return Error State
	}
     48a:	a1 96       	adiw	r28, 0x21	; 33
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	7f 90       	pop	r7
     4b0:	6f 90       	pop	r6
     4b2:	08 95       	ret

000004b4 <PRV_voidWriteHalfPort>:

//void LCD_voidShift(u8 copy_u8shifttingDirection);

//void LCD_voidGoToSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position);

static void PRV_voidWriteHalfPort(u8 copy_u8Value){
     4b4:	cf 93       	push	r28
     4b6:	c8 2f       	mov	r28, r24
	if (1 == GET_BIT(copy_u8Value,0)){
     4b8:	80 ff       	sbrs	r24, 0
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <PRV_voidWriteHalfPort+0x14>
		DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN, DIO_PIN_HIGH);
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	64 e0       	ldi	r22, 0x04	; 4
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     4c6:	05 c0       	rjmp	.+10     	; 0x4d2 <PRV_voidWriteHalfPort+0x1e>
	}
	else{
		DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN, DIO_PIN_LOW);
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	64 e0       	ldi	r22, 0x04	; 4
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	}
	if (1 == GET_BIT(copy_u8Value,1)){
     4d2:	c1 ff       	sbrs	r28, 1
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <PRV_voidWriteHalfPort+0x2e>
		DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN, DIO_PIN_HIGH);
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	65 e0       	ldi	r22, 0x05	; 5
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     4e0:	05 c0       	rjmp	.+10     	; 0x4ec <PRV_voidWriteHalfPort+0x38>
	}
	else{
		DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN, DIO_PIN_LOW);
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	65 e0       	ldi	r22, 0x05	; 5
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	}
	if (1 == GET_BIT(copy_u8Value,2)){
     4ec:	c2 ff       	sbrs	r28, 2
     4ee:	06 c0       	rjmp	.+12     	; 0x4fc <PRV_voidWriteHalfPort+0x48>
		DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN, DIO_PIN_HIGH);
     4f0:	41 e0       	ldi	r20, 0x01	; 1
     4f2:	66 e0       	ldi	r22, 0x06	; 6
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <PRV_voidWriteHalfPort+0x52>
	}
	else{
		DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN, DIO_PIN_LOW);
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	66 e0       	ldi	r22, 0x06	; 6
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	}
	if (1 == GET_BIT(copy_u8Value,3)){
     506:	c3 ff       	sbrs	r28, 3
     508:	06 c0       	rjmp	.+12     	; 0x516 <PRV_voidWriteHalfPort+0x62>
		DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN, DIO_PIN_HIGH);
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	67 e0       	ldi	r22, 0x07	; 7
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     514:	05 c0       	rjmp	.+10     	; 0x520 <PRV_voidWriteHalfPort+0x6c>
	}
	else{
		DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN, DIO_PIN_LOW);
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	67 e0       	ldi	r22, 0x07	; 7
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	}
}
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <LCD_voidSendCommand>:
	LCD_voidSendCommand(0b00000110);
	
	

}
void LCD_voidSendCommand(u8 copy_u8Cmnd){
     524:	cf 93       	push	r28
     526:	c8 2f       	mov	r28, r24
	// Set RS pin = 0 (data/command)
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN , DIO_PIN_LOW);
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	
	// Set RW pin = 0 (write)
	DIO_voidSetPinValue(LCD_RW_PORT, LCD_RW_PIN , DIO_PIN_LOW);
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	62 e0       	ldi	r22, 0x02	; 2
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	 
	//Write The Most 4 bits of data on Data Pins
	PRV_voidWriteHalfPort(copy_u8Cmnd>>4);
     53c:	8c 2f       	mov	r24, r28
     53e:	82 95       	swap	r24
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low 
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     546:	41 e0       	ldi	r20, 0x01	; 1
     548:	63 e0       	ldi	r22, 0x03	; 3
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     550:	8f e9       	ldi	r24, 0x9F	; 159
     552:	9f e0       	ldi	r25, 0x0F	; 15
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <LCD_voidSendCommand+0x30>
     558:	00 c0       	rjmp	.+0      	; 0x55a <LCD_voidSendCommand+0x36>
     55a:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	63 e0       	ldi	r22, 0x03	; 3
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	
	//Write The Least 4 bits of data on Data Pins 
	PRV_voidWriteHalfPort(copy_u8Cmnd);
     566:	8c 2f       	mov	r24, r28
     568:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	63 e0       	ldi	r22, 0x03	; 3
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     576:	8f e9       	ldi	r24, 0x9F	; 159
     578:	9f e0       	ldi	r25, 0x0F	; 15
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <LCD_voidSendCommand+0x56>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <LCD_voidSendCommand+0x5c>
     580:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	63 e0       	ldi	r22, 0x03	; 3
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	 
}
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h" 

void LCD_voidInit (void){
	//Initialize LCD Pins As Output Pins
	DIO_voidSetPinDirection(LCD_RS_PORT, LCD_RS_PIN,DIO_PIN_OUTPUT);
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT, LCD_RW_PIN,DIO_PIN_OUTPUT);
     59a:	41 e0       	ldi	r20, 0x01	; 1
     59c:	62 e0       	ldi	r22, 0x02	; 2
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT , LCD_E_PIN ,DIO_PIN_OUTPUT);
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	63 e0       	ldi	r22, 0x03	; 3
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D4_PORT, LCD_D4_PIN,DIO_PIN_OUTPUT);	
     5ae:	41 e0       	ldi	r20, 0x01	; 1
     5b0:	64 e0       	ldi	r22, 0x04	; 4
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D5_PORT, LCD_D5_PIN,DIO_PIN_OUTPUT);
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	65 e0       	ldi	r22, 0x05	; 5
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D6_PORT, LCD_D6_PIN,DIO_PIN_OUTPUT);
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	66 e0       	ldi	r22, 0x06	; 6
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D7_PORT, LCD_D7_PIN,DIO_PIN_OUTPUT);
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	67 e0       	ldi	r22, 0x07	; 7
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
     5d6:	2f e7       	ldi	r18, 0x7F	; 127
     5d8:	85 eb       	ldi	r24, 0xB5	; 181
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	21 50       	subi	r18, 0x01	; 1
     5de:	80 40       	sbci	r24, 0x00	; 0
     5e0:	90 40       	sbci	r25, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <LCD_voidInit+0x4c>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <LCD_voidInit+0x56>
     5e6:	00 00       	nop
	
	
	_delay_ms(35);
	// Function set command  
	// Set RS pin = 0 (command)
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN , DIO_PIN_LOW);
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	
	// Set RS pin = 0 (write)
	DIO_voidSetPinValue(LCD_RW_PORT, LCD_RW_PIN , DIO_PIN_LOW);
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	62 e0       	ldi	r22, 0x02	; 2
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	
	PRV_voidWriteHalfPort(0b0010);
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	63 e0       	ldi	r22, 0x03	; 3
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     60c:	8f e9       	ldi	r24, 0x9F	; 159
     60e:	9f e0       	ldi	r25, 0x0F	; 15
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <LCD_voidInit+0x80>
     614:	00 c0       	rjmp	.+0      	; 0x616 <LCD_voidInit+0x86>
     616:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	63 e0       	ldi	r22, 0x03	; 3
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	
	LCD_voidSendCommand(0b00101000);
     622:	88 e2       	ldi	r24, 0x28	; 40
     624:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     628:	90 ef       	ldi	r25, 0xF0	; 240
     62a:	9a 95       	dec	r25
     62c:	f1 f7       	brne	.-4      	; 0x62a <LCD_voidInit+0x9a>
	_delay_us(45);	
	
	//Display on off Control (DisplayOn, Cursor on, Blink on)
	LCD_voidSendCommand(0b00001111);
     62e:	8f e0       	ldi	r24, 0x0F	; 15
     630:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>
     634:	20 ef       	ldi	r18, 0xF0	; 240
     636:	2a 95       	dec	r18
     638:	f1 f7       	brne	.-4      	; 0x636 <LCD_voidInit+0xa6>
	_delay_us(45);
		
	//Display clear 
	LCD_voidSendCommand(0b00000001);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     640:	8f e3       	ldi	r24, 0x3F	; 63
     642:	9f e1       	ldi	r25, 0x1F	; 31
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <LCD_voidInit+0xb4>
     648:	00 c0       	rjmp	.+0      	; 0x64a <LCD_voidInit+0xba>
     64a:	00 00       	nop
	_delay_ms(2);
	
	//set Entry Mode (Increment on, Shift off)
	LCD_voidSendCommand(0b00000110);
     64c:	86 e0       	ldi	r24, 0x06	; 6
     64e:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>
     652:	08 95       	ret

00000654 <LCD_voidDisplayChar>:
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
	 
}

void LCD_voidDisplayChar(u8 copy_u8Data){
     654:	cf 93       	push	r28
     656:	c8 2f       	mov	r28, r24
	// Set RS pin = 0 (data/command)
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN , DIO_PIN_HIGH);
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	
	// Set RW pin = 0 (write)
	DIO_voidSetPinValue(LCD_RW_PORT, LCD_RW_PIN , DIO_PIN_LOW);
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	
	//Write The Most 4 bits of data on Data Pins
	PRV_voidWriteHalfPort(copy_u8Data>>4);
     66c:	8c 2f       	mov	r24, r28
     66e:	82 95       	swap	r24
     670:	8f 70       	andi	r24, 0x0F	; 15
     672:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	63 e0       	ldi	r22, 0x03	; 3
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     680:	8f e9       	ldi	r24, 0x9F	; 159
     682:	9f e0       	ldi	r25, 0x0F	; 15
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <LCD_voidDisplayChar+0x30>
     688:	00 c0       	rjmp	.+0      	; 0x68a <LCD_voidDisplayChar+0x36>
     68a:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	63 e0       	ldi	r22, 0x03	; 3
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
	
	//Write The Least 4 bits of data on Data Pins
	PRV_voidWriteHalfPort(copy_u8Data);
     696:	8c 2f       	mov	r24, r28
     698:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	63 e0       	ldi	r22, 0x03	; 3
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     6a6:	8f e9       	ldi	r24, 0x9F	; 159
     6a8:	9f e0       	ldi	r25, 0x0F	; 15
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <LCD_voidDisplayChar+0x56>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <LCD_voidDisplayChar+0x5c>
     6b0:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	63 e0       	ldi	r22, 0x03	; 3
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
}
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <LCD_voidDisplayString>:

void LCD_voidDisplayString(u8* copy_pu8String)
{
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
	if(copy_pu8String!=NULL)
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	29 f4       	brne	.+10     	; 0x6d4 <LCD_voidDisplayString+0x14>
     6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <LCD_voidDisplayString+0x24>
	{
		u8 local_u8Counter=0;
		while(copy_pu8String[local_u8Counter]!='\0')
		{
			LCD_voidDisplayChar(copy_pu8String[local_u8Counter]);
     6cc:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_voidDisplayChar>
			local_u8Counter++;
     6d0:	cf 5f       	subi	r28, 0xFF	; 255
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <LCD_voidDisplayString+0x18>
     6d4:	8c 01       	movw	r16, r24
     6d6:	c0 e0       	ldi	r28, 0x00	; 0
void LCD_voidDisplayString(u8* copy_pu8String)
{
	if(copy_pu8String!=NULL)
	{
		u8 local_u8Counter=0;
		while(copy_pu8String[local_u8Counter]!='\0')
     6d8:	f8 01       	movw	r30, r16
     6da:	ec 0f       	add	r30, r28
     6dc:	f1 1d       	adc	r31, r1
     6de:	80 81       	ld	r24, Z
     6e0:	81 11       	cpse	r24, r1
     6e2:	f4 cf       	rjmp	.-24     	; 0x6cc <LCD_voidDisplayString+0xc>
	}
	else
	{
		// return Error state
	}
}
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	08 95       	ret

000006ec <LED_voidInit>:



void LED_voidInit(u8 led_port, u8 led_pin) {
	// Set the direction of the LED pin as output
	DIO_voidSetPinDirection(led_port, led_pin, DIO_PIN_OUTPUT);
     6ec:	41 e0       	ldi	r20, 0x01	; 1
     6ee:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>
     6f2:	08 95       	ret

000006f4 <LED_voidTurnOn>:
}

void LED_voidTurnOn(u8 led_port, u8 led_pin) {
	// Set the value of the LED pin to high to turn it on
	DIO_voidSetPinValue(led_port, led_pin, DIO_PIN_HIGH);
     6f4:	41 e0       	ldi	r20, 0x01	; 1
     6f6:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     6fa:	08 95       	ret

000006fc <LED_voidTurnOff>:
}

void LED_voidTurnOff(u8 led_port, u8 led_pin) {
	// Set the value of the LED pin to low to turn it off
	DIO_voidSetPinValue(led_port, led_pin, DIO_PIN_LOW);
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPinValue>
     702:	08 95       	ret

00000704 <SRVM_voidInit>:


void SRVM_voidInit(void)
{
	// set OC1A as Output pin
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
     704:	41 e0       	ldi	r20, 0x01	; 1
     706:	65 e0       	ldi	r22, 0x05	; 5
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_voidSetPinDirection>

	/* PWM init ch1 at pwm mode 14 */
	PWM_voidInitChannel_1A();
     70e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <PWM_voidInitChannel_1A>
     712:	08 95       	ret

00000714 <SRVM_voidOn>:
}


void SRVM_voidOn(u8 copy_u8Angle)
{
	f32 local_f32Duty = (((copy_u8Angle + 90)/180.0)*5) + 5;
     714:	68 2f       	mov	r22, r24
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	66 5a       	subi	r22, 0xA6	; 166
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	07 2e       	mov	r0, r23
     71e:	00 0c       	add	r0, r0
     720:	88 0b       	sbc	r24, r24
     722:	99 0b       	sbc	r25, r25
     724:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__floatsisf>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	44 e3       	ldi	r20, 0x34	; 52
     72e:	53 e4       	ldi	r21, 0x43	; 67
     730:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__divsf3>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 ea       	ldi	r20, 0xA0	; 160
     73a:	50 e4       	ldi	r21, 0x40	; 64
     73c:	0e 94 80 08 	call	0x1100	; 0x1100 <__mulsf3>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 ea       	ldi	r20, 0xA0	; 160
     746:	50 e4       	ldi	r21, 0x40	; 64
     748:	0e 94 bc 06 	call	0xd78	; 0xd78 <__addsf3>

	/* Set pwm fre. = 50, duty cycle between 5 : 10 depend on desired angle[0 : 180] */
	PWM_voidGenerate_PWM_Channel_1A(local_f32Duty, SRVM_DESIRED_FREQUENCY);
     74c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fixunssfsi>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	68 e4       	ldi	r22, 0x48	; 72
     75a:	72 e4       	ldi	r23, 0x42	; 66
     75c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <PWM_voidGenerate_PWM_Channel_1A>
     760:	08 95       	ret

00000762 <SRVM_voidOff>:


void SRVM_voidOff(void)
{
	/* PWM ch1 stop */
	PWM_voidStopChannel_1A();
     762:	0e 94 ad 06 	call	0xd5a	; 0xd5a <PWM_voidStopChannel_1A>
     766:	08 95       	ret

00000768 <encryptPassword>:
#define PASSWORD_LENGTH 4 // Assuming the password length is 4 digits
#define MAX_TRIALS      3   // Maximum number of password entry trials
#define AES_BLOCK_SIZE  16  // AES block size


void encryptPassword(const char *password, uint8_t *encrypted_password, const uint8_t *aes_key) {
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	60 97       	sbiw	r28, 0x10	; 16
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	7b 01       	movw	r14, r22
	// Ensure the password is AES_BLOCK_SIZE long
	uint8_t buffer[AES_BLOCK_SIZE] = {0};
     786:	8e 01       	movw	r16, r28
     788:	0f 5f       	subi	r16, 0xFF	; 255
     78a:	1f 4f       	sbci	r17, 0xFF	; 255
     78c:	20 e1       	ldi	r18, 0x10	; 16
     78e:	f8 01       	movw	r30, r16
     790:	11 92       	st	Z+, r1
     792:	2a 95       	dec	r18
     794:	e9 f7       	brne	.-6      	; 0x790 <encryptPassword+0x28>
	strncpy((char *)buffer, password, PASSWORD_LENGTH);
     796:	44 e0       	ldi	r20, 0x04	; 4
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	bc 01       	movw	r22, r24
     79c:	c8 01       	movw	r24, r16
     79e:	0e 94 1c 09 	call	0x1238	; 0x1238 <strncpy>
	AES_encrypt(buffer, encrypted_password);
     7a2:	b7 01       	movw	r22, r14
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <AES_encrypt>
}
     7aa:	60 96       	adiw	r28, 0x10	; 16
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	08 95       	ret

000007c4 <main>:

int main(void) {
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	ea 97       	sbiw	r28, 0x3a	; 58
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
	char password[PASSWORD_LENGTH + 1]; // Array to store the password (+1 for null terminator)
	char input_password[PASSWORD_LENGTH + 1]; // Array to store the user input password
	uint8_t encrypted_password[AES_BLOCK_SIZE]; // Array to store the encrypted password
	const uint8_t aes_key[AES_BLOCK_SIZE] = "1234567890ABCDEF"; // Example AES key (16 bytes)
     7d8:	80 e1       	ldi	r24, 0x10	; 16
     7da:	e0 e7       	ldi	r30, 0x70	; 112
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	de 01       	movw	r26, r28
     7e0:	5b 96       	adiw	r26, 0x1b	; 27
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	8a 95       	dec	r24
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <main+0x1e>
	int i, trials = 0, trailNumber = 0;
	BOOL password_set = false;

	// Initialize peripherals
	LCD_voidInit(); // Initialize LCD
     7ea:	0e 94 c8 02 	call	0x590	; 0x590 <LCD_voidInit>
	KPD_voidInit(); // Initialize Keypad
     7ee:	0e 94 73 01 	call	0x2e6	; 0x2e6 <KPD_voidInit>
	DCMOTOR_voidInit(DCMOTOR_A); // Initialize DC motor
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 37 01 	call	0x26e	; 0x26e <DCMOTOR_voidInit>
	SRVM_voidInit(); // Initialize Servo motor
     7f8:	0e 94 82 03 	call	0x704	; 0x704 <SRVM_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN7); // Initialize LED
     7fc:	67 e0       	ldi	r22, 0x07	; 7
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	0e 94 76 03 	call	0x6ec	; 0x6ec <LED_voidInit>
	// Initialize AES with the key
	AES_init(aes_key);
     804:	ce 01       	movw	r24, r28
     806:	4b 96       	adiw	r24, 0x1b	; 27
     808:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <AES_init>

	// Check if the initializations are successful
	LCD_voidSendCommand(0x01); // Clear Display
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>
	LCD_voidDisplayString("Init Done");
     812:	81 e8       	ldi	r24, 0x81	; 129
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_voidDisplayString>
     81a:	2f ef       	ldi	r18, 0xFF	; 255
     81c:	87 ea       	ldi	r24, 0xA7	; 167
     81e:	91 e6       	ldi	r25, 0x61	; 97
     820:	21 50       	subi	r18, 0x01	; 1
     822:	80 40       	sbci	r24, 0x00	; 0
     824:	90 40       	sbci	r25, 0x00	; 0
     826:	e1 f7       	brne	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     828:	00 c0       	rjmp	.+0      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     82a:	00 00       	nop
	_delay_ms(2000);

	// Ask the user to set the password
	LCD_voidSendCommand(0x01); // Clear Display
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>
	LCD_voidDisplayString("Set password:");
     832:	8b e8       	ldi	r24, 0x8B	; 139
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_voidDisplayString>

	// Getting the password from the user
	for (i = 0; i < PASSWORD_LENGTH; ++i) {
     83a:	00 e0       	ldi	r16, 0x00	; 0
     83c:	10 e0       	ldi	r17, 0x00	; 0
     83e:	13 c0       	rjmp	.+38     	; 0x866 <__stack+0x7>
		char key;
		do {
			KPD_voidGetValue(&key);
     840:	ce 01       	movw	r24, r28
     842:	8b 96       	adiw	r24, 0x2b	; 43
     844:	0e 94 ac 01 	call	0x358	; 0x358 <KPD_voidGetValue>
		} while (key == KPD_NOT_PRESSED); // Wait until a key is pressed
     848:	8b a5       	ldd	r24, Y+43	; 0x2b
     84a:	8f 3f       	cpi	r24, 0xFF	; 255
     84c:	c9 f3       	breq	.-14     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		password[i] = key;
     84e:	e1 e0       	ldi	r30, 0x01	; 1
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	ec 0f       	add	r30, r28
     854:	fd 1f       	adc	r31, r29
     856:	e0 0f       	add	r30, r16
     858:	f1 1f       	adc	r31, r17
     85a:	80 83       	st	Z, r24
		LCD_voidDisplayChar('*'); // Display '*' instead of actual digits
     85c:	8a e2       	ldi	r24, 0x2A	; 42
     85e:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_voidDisplayChar>
	// Ask the user to set the password
	LCD_voidSendCommand(0x01); // Clear Display
	LCD_voidDisplayString("Set password:");

	// Getting the password from the user
	for (i = 0; i < PASSWORD_LENGTH; ++i) {
     862:	0f 5f       	subi	r16, 0xFF	; 255
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	04 30       	cpi	r16, 0x04	; 4
     868:	11 05       	cpc	r17, r1
     86a:	54 f3       	brlt	.-44     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
			KPD_voidGetValue(&key);
		} while (key == KPD_NOT_PRESSED); // Wait until a key is pressed
		password[i] = key;
		LCD_voidDisplayChar('*'); // Display '*' instead of actual digits
	}
	password[PASSWORD_LENGTH] = '\0'; // Null terminate the password
     86c:	1d 82       	std	Y+5, r1	; 0x05
	encryptPassword(password, encrypted_password, aes_key); // Encrypt the password
     86e:	ae 01       	movw	r20, r28
     870:	45 5e       	subi	r20, 0xE5	; 229
     872:	5f 4f       	sbci	r21, 0xFF	; 255
     874:	be 01       	movw	r22, r28
     876:	65 5f       	subi	r22, 0xF5	; 245
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	0e 94 b4 03 	call	0x768	; 0x768 <encryptPassword>
int main(void) {
	char password[PASSWORD_LENGTH + 1]; // Array to store the password (+1 for null terminator)
	char input_password[PASSWORD_LENGTH + 1]; // Array to store the user input password
	uint8_t encrypted_password[AES_BLOCK_SIZE]; // Array to store the encrypted password
	const uint8_t aes_key[AES_BLOCK_SIZE] = "1234567890ABCDEF"; // Example AES key (16 bytes)
	int i, trials = 0, trailNumber = 0;
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	c1 2c       	mov	r12, r1
     888:	d1 2c       	mov	r13, r1
	encryptPassword(password, encrypted_password, aes_key); // Encrypt the password
	password_set = true;

	while (1) {
		// Clear display
		LCD_voidSendCommand(0x01); // Clear Display
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>

		if (password_set) {
			// Ask the user to enter the password to unlock the door
			LCD_voidDisplayString("Enter password:");
     890:	89 e9       	ldi	r24, 0x99	; 153
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_voidDisplayString>

			// Getting the password from the user
			for (i = 0; i < PASSWORD_LENGTH; ++i) {
     898:	e1 2c       	mov	r14, r1
     89a:	f1 2c       	mov	r15, r1
     89c:	14 c0       	rjmp	.+40     	; 0x8c6 <__stack+0x67>
				char key;
				do {
					KPD_voidGetValue(&key);
     89e:	ce 01       	movw	r24, r28
     8a0:	8b 96       	adiw	r24, 0x2b	; 43
     8a2:	0e 94 ac 01 	call	0x358	; 0x358 <KPD_voidGetValue>
				} while (key == KPD_NOT_PRESSED); // Wait until a key is pressed
     8a6:	8b a5       	ldd	r24, Y+43	; 0x2b
     8a8:	8f 3f       	cpi	r24, 0xFF	; 255
     8aa:	c9 f3       	breq	.-14     	; 0x89e <__stack+0x3f>

				input_password[i] = key;
     8ac:	e6 e0       	ldi	r30, 0x06	; 6
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ec 0f       	add	r30, r28
     8b2:	fd 1f       	adc	r31, r29
     8b4:	ee 0d       	add	r30, r14
     8b6:	ff 1d       	adc	r31, r15
     8b8:	80 83       	st	Z, r24
				LCD_voidDisplayChar('*'); // Display '*' instead of actual digits
     8ba:	8a e2       	ldi	r24, 0x2A	; 42
     8bc:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_voidDisplayChar>
		if (password_set) {
			// Ask the user to enter the password to unlock the door
			LCD_voidDisplayString("Enter password:");

			// Getting the password from the user
			for (i = 0; i < PASSWORD_LENGTH; ++i) {
     8c0:	ef ef       	ldi	r30, 0xFF	; 255
     8c2:	ee 1a       	sub	r14, r30
     8c4:	fe 0a       	sbc	r15, r30
     8c6:	f4 e0       	ldi	r31, 0x04	; 4
     8c8:	ef 16       	cp	r14, r31
     8ca:	f1 04       	cpc	r15, r1
     8cc:	44 f3       	brlt	.-48     	; 0x89e <__stack+0x3f>
				} while (key == KPD_NOT_PRESSED); // Wait until a key is pressed

				input_password[i] = key;
				LCD_voidDisplayChar('*'); // Display '*' instead of actual digits
			}
			input_password[PASSWORD_LENGTH] = '\0'; // Null terminate the input password
     8ce:	1a 86       	std	Y+10, r1	; 0x0a

			// Encrypt the input password
			uint8_t encrypted_input_password[AES_BLOCK_SIZE] = {0};
     8d0:	7e 01       	movw	r14, r28
     8d2:	2b e2       	ldi	r18, 0x2B	; 43
     8d4:	e2 0e       	add	r14, r18
     8d6:	f1 1c       	adc	r15, r1
     8d8:	80 e1       	ldi	r24, 0x10	; 16
     8da:	f7 01       	movw	r30, r14
     8dc:	11 92       	st	Z+, r1
     8de:	8a 95       	dec	r24
     8e0:	e9 f7       	brne	.-6      	; 0x8dc <__stack+0x7d>
			encryptPassword(input_password, encrypted_input_password, aes_key);
     8e2:	ae 01       	movw	r20, r28
     8e4:	45 5e       	subi	r20, 0xE5	; 229
     8e6:	5f 4f       	sbci	r21, 0xFF	; 255
     8e8:	b7 01       	movw	r22, r14
     8ea:	ce 01       	movw	r24, r28
     8ec:	06 96       	adiw	r24, 0x06	; 6
     8ee:	0e 94 b4 03 	call	0x768	; 0x768 <encryptPassword>

			// Check if the encrypted input password matches the stored encrypted password
			if (memcmp(encrypted_password, encrypted_input_password, AES_BLOCK_SIZE) == 0) {
     8f2:	40 e1       	ldi	r20, 0x10	; 16
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	b7 01       	movw	r22, r14
     8f8:	ce 01       	movw	r24, r28
     8fa:	0b 96       	adiw	r24, 0x0b	; 11
     8fc:	0e 94 0f 09 	call	0x121e	; 0x121e <memcmp>
     900:	89 2b       	or	r24, r25
     902:	b9 f5       	brne	.+110    	; 0x972 <__stack+0x113>
				// Correct password entered, display "Door opened!" and exit the loop
				LCD_voidSendCommand(0x01); // Clear Display
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>
				LCD_voidDisplayString("Door opened!");
     90a:	89 ea       	ldi	r24, 0xA9	; 169
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_voidDisplayString>

				// Turn on the LED
				LED_voidTurnOn(DIO_PORTD, DIO_PIN7);
     912:	67 e0       	ldi	r22, 0x07	; 7
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LED_voidTurnOn>
     91a:	ff ef       	ldi	r31, 0xFF	; 255
     91c:	23 e2       	ldi	r18, 0x23	; 35
     91e:	84 ef       	ldi	r24, 0xF4	; 244
     920:	f1 50       	subi	r31, 0x01	; 1
     922:	20 40       	sbci	r18, 0x00	; 0
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	e1 f7       	brne	.-8      	; 0x920 <__stack+0xc1>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0xcb>
     92a:	00 00       	nop
				_delay_ms(5000);

				// Turn off the LED
				LED_voidTurnOff(DIO_PORTD, DIO_PIN7);
     92c:	67 e0       	ldi	r22, 0x07	; 7
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LED_voidTurnOff>

				// Turn on the motor
				DCMOTOR_voidOn(DCMOTOR_A, DCMOTOR_CLOCK_WISE);
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 49 01 	call	0x292	; 0x292 <DCMOTOR_voidOn>
     93c:	9f ef       	ldi	r25, 0xFF	; 255
     93e:	e3 e2       	ldi	r30, 0x23	; 35
     940:	f4 ef       	ldi	r31, 0xF4	; 244
     942:	91 50       	subi	r25, 0x01	; 1
     944:	e0 40       	sbci	r30, 0x00	; 0
     946:	f0 40       	sbci	r31, 0x00	; 0
     948:	e1 f7       	brne	.-8      	; 0x942 <__stack+0xe3>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <__stack+0xed>
     94c:	00 00       	nop
				_delay_ms(5000); // Keep the motor running for 5 seconds

				// Turn off the motor
				DCMOTOR_voidOff(DCMOTOR_A);
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DCMOTOR_voidOff>

				// Turn the servo motor to open the door
				SRVM_voidOn(90); // Adjust the angle as needed to represent door opening
     954:	8a e5       	ldi	r24, 0x5A	; 90
     956:	0e 94 8a 03 	call	0x714	; 0x714 <SRVM_voidOn>
     95a:	2f ef       	ldi	r18, 0xFF	; 255
     95c:	83 e2       	ldi	r24, 0x23	; 35
     95e:	94 ef       	ldi	r25, 0xF4	; 244
     960:	21 50       	subi	r18, 0x01	; 1
     962:	80 40       	sbci	r24, 0x00	; 0
     964:	90 40       	sbci	r25, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <__stack+0x101>
     968:	00 c0       	rjmp	.+0      	; 0x96a <__stack+0x10b>
     96a:	00 00       	nop
				_delay_ms(5000); // Keep the servo in the open position for 5 seconds
				SRVM_voidOff();
     96c:	0e 94 b1 03 	call	0x762	; 0x762 <SRVM_voidOff>

				break;
     970:	2d c0       	rjmp	.+90     	; 0x9cc <__stack+0x16d>
				} else {
				// Incorrect password entered
				trials++;
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	ce 1a       	sub	r12, r30
     976:	de 0a       	sbc	r13, r30

				if (trials >= MAX_TRIALS) {
     978:	f3 e0       	ldi	r31, 0x03	; 3
     97a:	cf 16       	cp	r12, r31
     97c:	d1 04       	cpc	r13, r1
     97e:	44 f0       	brlt	.+16     	; 0x990 <__stack+0x131>
					// Maximum trials reached, display "Locked!" and exit the loop
					LCD_voidSendCommand(0x01); // Clear Display
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>
					LCD_voidDisplayString("Locked!");
     986:	86 eb       	ldi	r24, 0xB6	; 182
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_voidDisplayString>
					break;
     98e:	1e c0       	rjmp	.+60     	; 0x9cc <__stack+0x16d>
					} else {
					// Display trial number passed and wait for a while before clearing the display
					LCD_voidSendCommand(0x01); // Clear Display
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	0e 94 92 02 	call	0x524	; 0x524 <LCD_voidSendCommand>
					trailNumber++;
     996:	0f 5f       	subi	r16, 0xFF	; 255
     998:	1f 4f       	sbci	r17, 0xFF	; 255
					if (trailNumber == 1) {
     99a:	01 30       	cpi	r16, 0x01	; 1
     99c:	11 05       	cpc	r17, r1
     99e:	29 f4       	brne	.+10     	; 0x9aa <__stack+0x14b>
						LCD_voidDisplayString("One trial passed");
     9a0:	8e eb       	ldi	r24, 0xBE	; 190
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_voidDisplayString>
     9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__stack+0x159>
						} else if (trailNumber == 2) {
     9aa:	02 30       	cpi	r16, 0x02	; 2
     9ac:	11 05       	cpc	r17, r1
     9ae:	21 f4       	brne	.+8      	; 0x9b8 <__stack+0x159>
						LCD_voidDisplayString("Second trial passed");
     9b0:	8f ec       	ldi	r24, 0xCF	; 207
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <LCD_voidDisplayString>
     9b8:	2f ef       	ldi	r18, 0xFF	; 255
     9ba:	87 ea       	ldi	r24, 0xA7	; 167
     9bc:	91 e6       	ldi	r25, 0x61	; 97
     9be:	21 50       	subi	r18, 0x01	; 1
     9c0:	80 40       	sbci	r24, 0x00	; 0
     9c2:	90 40       	sbci	r25, 0x00	; 0
     9c4:	e1 f7       	brne	.-8      	; 0x9be <__stack+0x15f>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <__stack+0x169>
     9c8:	00 00       	nop
     9ca:	5f cf       	rjmp	.-322    	; 0x88a <__stack+0x2b>
     9cc:	ff cf       	rjmp	.-2      	; 0x9cc <__stack+0x16d>

000009ce <DIO_voidSetPinDirection>:
				break;
				case DIO_PORTC:
					TOG_BIT(PORTC_REG, copy_u8PinId);
				break;
				case DIO_PORTD:
					TOG_BIT(PORTD_REG, copy_u8PinId);
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	19 f1       	breq	.+70     	; 0xa18 <DIO_voidSetPinDirection+0x4a>
     9d2:	30 f0       	brcs	.+12     	; 0x9e0 <DIO_voidSetPinDirection+0x12>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	e1 f1       	breq	.+120    	; 0xa50 <DIO_voidSetPinDirection+0x82>
     9d8:	83 30       	cpi	r24, 0x03	; 3
     9da:	09 f4       	brne	.+2      	; 0x9de <DIO_voidSetPinDirection+0x10>
     9dc:	54 c0       	rjmp	.+168    	; 0xa86 <DIO_voidSetPinDirection+0xb8>
     9de:	08 95       	ret
     9e0:	44 23       	and	r20, r20
     9e2:	71 f0       	breq	.+28     	; 0xa00 <DIO_voidSetPinDirection+0x32>
     9e4:	41 30       	cpi	r20, 0x01	; 1
     9e6:	09 f0       	breq	.+2      	; 0x9ea <DIO_voidSetPinDirection+0x1c>
     9e8:	68 c0       	rjmp	.+208    	; 0xaba <DIO_voidSetPinDirection+0xec>
     9ea:	2a b3       	in	r18, 0x1a	; 26
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <DIO_voidSetPinDirection+0x28>
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	6a 95       	dec	r22
     9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <DIO_voidSetPinDirection+0x24>
     9fa:	82 2b       	or	r24, r18
     9fc:	8a bb       	out	0x1a, r24	; 26
     9fe:	08 95       	ret
     a00:	2a b3       	in	r18, 0x1a	; 26
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <DIO_voidSetPinDirection+0x3e>
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	6a 95       	dec	r22
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <DIO_voidSetPinDirection+0x3a>
     a10:	80 95       	com	r24
     a12:	82 23       	and	r24, r18
     a14:	8a bb       	out	0x1a, r24	; 26
     a16:	08 95       	ret
     a18:	44 23       	and	r20, r20
     a1a:	71 f0       	breq	.+28     	; 0xa38 <DIO_voidSetPinDirection+0x6a>
     a1c:	41 30       	cpi	r20, 0x01	; 1
     a1e:	09 f0       	breq	.+2      	; 0xa22 <DIO_voidSetPinDirection+0x54>
     a20:	4c c0       	rjmp	.+152    	; 0xaba <DIO_voidSetPinDirection+0xec>
     a22:	27 b3       	in	r18, 0x17	; 23
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <DIO_voidSetPinDirection+0x60>
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	6a 95       	dec	r22
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <DIO_voidSetPinDirection+0x5c>
     a32:	82 2b       	or	r24, r18
     a34:	87 bb       	out	0x17, r24	; 23
     a36:	08 95       	ret
     a38:	27 b3       	in	r18, 0x17	; 23
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <DIO_voidSetPinDirection+0x76>
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	6a 95       	dec	r22
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <DIO_voidSetPinDirection+0x72>
     a48:	80 95       	com	r24
     a4a:	82 23       	and	r24, r18
     a4c:	87 bb       	out	0x17, r24	; 23
     a4e:	08 95       	ret
     a50:	44 23       	and	r20, r20
     a52:	69 f0       	breq	.+26     	; 0xa6e <DIO_voidSetPinDirection+0xa0>
     a54:	41 30       	cpi	r20, 0x01	; 1
     a56:	89 f5       	brne	.+98     	; 0xaba <DIO_voidSetPinDirection+0xec>
     a58:	24 b3       	in	r18, 0x14	; 20
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <DIO_voidSetPinDirection+0x96>
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	6a 95       	dec	r22
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <DIO_voidSetPinDirection+0x92>
     a68:	82 2b       	or	r24, r18
     a6a:	84 bb       	out	0x14, r24	; 20
     a6c:	08 95       	ret
     a6e:	24 b3       	in	r18, 0x14	; 20
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_voidSetPinDirection+0xac>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	6a 95       	dec	r22
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_voidSetPinDirection+0xa8>
     a7e:	80 95       	com	r24
     a80:	82 23       	and	r24, r18
     a82:	84 bb       	out	0x14, r24	; 20
     a84:	08 95       	ret
     a86:	44 23       	and	r20, r20
     a88:	69 f0       	breq	.+26     	; 0xaa4 <DIO_voidSetPinDirection+0xd6>
     a8a:	41 30       	cpi	r20, 0x01	; 1
     a8c:	b1 f4       	brne	.+44     	; 0xaba <DIO_voidSetPinDirection+0xec>
     a8e:	21 b3       	in	r18, 0x11	; 17
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_voidSetPinDirection+0xcc>
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	6a 95       	dec	r22
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_voidSetPinDirection+0xc8>
     a9e:	82 2b       	or	r24, r18
     aa0:	81 bb       	out	0x11, r24	; 17
     aa2:	08 95       	ret
     aa4:	21 b3       	in	r18, 0x11	; 17
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_voidSetPinDirection+0xe2>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	6a 95       	dec	r22
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_voidSetPinDirection+0xde>
     ab4:	80 95       	com	r24
     ab6:	82 23       	and	r24, r18
     ab8:	81 bb       	out	0x11, r24	; 17
     aba:	08 95       	ret

00000abc <DIO_voidSetPinValue>:
     abc:	84 30       	cpi	r24, 0x04	; 4
     abe:	08 f0       	brcs	.+2      	; 0xac2 <DIO_voidSetPinValue+0x6>
     ac0:	79 c0       	rjmp	.+242    	; 0xbb4 <DIO_voidSetPinValue+0xf8>
     ac2:	43 30       	cpi	r20, 0x03	; 3
     ac4:	08 f0       	brcs	.+2      	; 0xac8 <DIO_voidSetPinValue+0xc>
     ac6:	76 c0       	rjmp	.+236    	; 0xbb4 <DIO_voidSetPinValue+0xf8>
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	19 f1       	breq	.+70     	; 0xb12 <DIO_voidSetPinValue+0x56>
     acc:	30 f0       	brcs	.+12     	; 0xada <DIO_voidSetPinValue+0x1e>
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	e1 f1       	breq	.+120    	; 0xb4a <DIO_voidSetPinValue+0x8e>
     ad2:	83 30       	cpi	r24, 0x03	; 3
     ad4:	09 f4       	brne	.+2      	; 0xad8 <DIO_voidSetPinValue+0x1c>
     ad6:	54 c0       	rjmp	.+168    	; 0xb80 <DIO_voidSetPinValue+0xc4>
     ad8:	08 95       	ret
     ada:	44 23       	and	r20, r20
     adc:	71 f0       	breq	.+28     	; 0xafa <DIO_voidSetPinValue+0x3e>
     ade:	41 30       	cpi	r20, 0x01	; 1
     ae0:	09 f0       	breq	.+2      	; 0xae4 <DIO_voidSetPinValue+0x28>
     ae2:	68 c0       	rjmp	.+208    	; 0xbb4 <DIO_voidSetPinValue+0xf8>
     ae4:	2b b3       	in	r18, 0x1b	; 27
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <DIO_voidSetPinValue+0x34>
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	6a 95       	dec	r22
     af2:	e2 f7       	brpl	.-8      	; 0xaec <DIO_voidSetPinValue+0x30>
     af4:	82 2b       	or	r24, r18
     af6:	8b bb       	out	0x1b, r24	; 27
     af8:	08 95       	ret
     afa:	2b b3       	in	r18, 0x1b	; 27
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <DIO_voidSetPinValue+0x4a>
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	6a 95       	dec	r22
     b08:	e2 f7       	brpl	.-8      	; 0xb02 <DIO_voidSetPinValue+0x46>
     b0a:	80 95       	com	r24
     b0c:	82 23       	and	r24, r18
     b0e:	8b bb       	out	0x1b, r24	; 27
     b10:	08 95       	ret
     b12:	44 23       	and	r20, r20
     b14:	71 f0       	breq	.+28     	; 0xb32 <DIO_voidSetPinValue+0x76>
     b16:	41 30       	cpi	r20, 0x01	; 1
     b18:	09 f0       	breq	.+2      	; 0xb1c <DIO_voidSetPinValue+0x60>
     b1a:	4c c0       	rjmp	.+152    	; 0xbb4 <DIO_voidSetPinValue+0xf8>
     b1c:	28 b3       	in	r18, 0x18	; 24
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <DIO_voidSetPinValue+0x6c>
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	6a 95       	dec	r22
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <DIO_voidSetPinValue+0x68>
     b2c:	82 2b       	or	r24, r18
     b2e:	88 bb       	out	0x18, r24	; 24
     b30:	08 95       	ret
     b32:	28 b3       	in	r18, 0x18	; 24
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <DIO_voidSetPinValue+0x82>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	6a 95       	dec	r22
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <DIO_voidSetPinValue+0x7e>
     b42:	80 95       	com	r24
     b44:	82 23       	and	r24, r18
     b46:	88 bb       	out	0x18, r24	; 24
     b48:	08 95       	ret
     b4a:	44 23       	and	r20, r20
     b4c:	69 f0       	breq	.+26     	; 0xb68 <DIO_voidSetPinValue+0xac>
     b4e:	41 30       	cpi	r20, 0x01	; 1
     b50:	89 f5       	brne	.+98     	; 0xbb4 <DIO_voidSetPinValue+0xf8>
     b52:	25 b3       	in	r18, 0x15	; 21
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <DIO_voidSetPinValue+0xa2>
     b5a:	88 0f       	add	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	6a 95       	dec	r22
     b60:	e2 f7       	brpl	.-8      	; 0xb5a <DIO_voidSetPinValue+0x9e>
     b62:	82 2b       	or	r24, r18
     b64:	85 bb       	out	0x15, r24	; 21
     b66:	08 95       	ret
     b68:	25 b3       	in	r18, 0x15	; 21
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <DIO_voidSetPinValue+0xb8>
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	6a 95       	dec	r22
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <DIO_voidSetPinValue+0xb4>
     b78:	80 95       	com	r24
     b7a:	82 23       	and	r24, r18
     b7c:	85 bb       	out	0x15, r24	; 21
     b7e:	08 95       	ret
     b80:	44 23       	and	r20, r20
     b82:	69 f0       	breq	.+26     	; 0xb9e <DIO_voidSetPinValue+0xe2>
     b84:	41 30       	cpi	r20, 0x01	; 1
     b86:	b1 f4       	brne	.+44     	; 0xbb4 <DIO_voidSetPinValue+0xf8>
     b88:	22 b3       	in	r18, 0x12	; 18
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <DIO_voidSetPinValue+0xd8>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	6a 95       	dec	r22
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <DIO_voidSetPinValue+0xd4>
     b98:	82 2b       	or	r24, r18
     b9a:	82 bb       	out	0x12, r24	; 18
     b9c:	08 95       	ret
     b9e:	22 b3       	in	r18, 0x12	; 18
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_voidSetPinValue+0xee>
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	6a 95       	dec	r22
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_voidSetPinValue+0xea>
     bae:	80 95       	com	r24
     bb0:	82 23       	and	r24, r18
     bb2:	82 bb       	out	0x12, r24	; 18
     bb4:	08 95       	ret

00000bb6 <DIO_voidGetPinValue>:
     bb6:	84 30       	cpi	r24, 0x04	; 4
     bb8:	c0 f5       	brcc	.+112    	; 0xc2a <DIO_voidGetPinValue+0x74>
     bba:	68 30       	cpi	r22, 0x08	; 8
     bbc:	b0 f5       	brcc	.+108    	; 0xc2a <DIO_voidGetPinValue+0x74>
     bbe:	41 15       	cp	r20, r1
     bc0:	51 05       	cpc	r21, r1
     bc2:	99 f1       	breq	.+102    	; 0xc2a <DIO_voidGetPinValue+0x74>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	89 f0       	breq	.+34     	; 0xbea <DIO_voidGetPinValue+0x34>
     bc8:	28 f0       	brcs	.+10     	; 0xbd4 <DIO_voidGetPinValue+0x1e>
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	c9 f0       	breq	.+50     	; 0xc00 <DIO_voidGetPinValue+0x4a>
     bce:	83 30       	cpi	r24, 0x03	; 3
     bd0:	11 f1       	breq	.+68     	; 0xc16 <DIO_voidGetPinValue+0x60>
     bd2:	08 95       	ret
     bd4:	89 b3       	in	r24, 0x19	; 25
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <DIO_voidGetPinValue+0x28>
     bda:	95 95       	asr	r25
     bdc:	87 95       	ror	r24
     bde:	6a 95       	dec	r22
     be0:	e2 f7       	brpl	.-8      	; 0xbda <DIO_voidGetPinValue+0x24>
     be2:	81 70       	andi	r24, 0x01	; 1
     be4:	fa 01       	movw	r30, r20
     be6:	80 83       	st	Z, r24
     be8:	08 95       	ret
     bea:	86 b3       	in	r24, 0x16	; 22
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_voidGetPinValue+0x3e>
     bf0:	95 95       	asr	r25
     bf2:	87 95       	ror	r24
     bf4:	6a 95       	dec	r22
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_voidGetPinValue+0x3a>
     bf8:	81 70       	andi	r24, 0x01	; 1
     bfa:	fa 01       	movw	r30, r20
     bfc:	80 83       	st	Z, r24
     bfe:	08 95       	ret
     c00:	83 b3       	in	r24, 0x13	; 19
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_voidGetPinValue+0x54>
     c06:	95 95       	asr	r25
     c08:	87 95       	ror	r24
     c0a:	6a 95       	dec	r22
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_voidGetPinValue+0x50>
     c0e:	81 70       	andi	r24, 0x01	; 1
     c10:	fa 01       	movw	r30, r20
     c12:	80 83       	st	Z, r24
     c14:	08 95       	ret
     c16:	80 b3       	in	r24, 0x10	; 16
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_voidGetPinValue+0x6a>
     c1c:	95 95       	asr	r25
     c1e:	87 95       	ror	r24
     c20:	6a 95       	dec	r22
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <DIO_voidGetPinValue+0x66>
     c24:	81 70       	andi	r24, 0x01	; 1
     c26:	fa 01       	movw	r30, r20
     c28:	80 83       	st	Z, r24
     c2a:	08 95       	ret

00000c2c <DIO_voidActivePinInPullUpResistance>:

		
}

void DIO_voidActivePinInPullUpResistance	(u8 copy_u8PortId,u8 copy_u8PinId){
	if ((copy_u8PortId < 4) && (copy_u8PinId < 8)){
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	a8 f5       	brcc	.+106    	; 0xc9a <DIO_voidActivePinInPullUpResistance+0x6e>
     c30:	68 30       	cpi	r22, 0x08	; 8
     c32:	98 f5       	brcc	.+102    	; 0xc9a <DIO_voidActivePinInPullUpResistance+0x6e>
		switch(copy_u8PortId){
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	89 f0       	breq	.+34     	; 0xc5a <DIO_voidActivePinInPullUpResistance+0x2e>
     c38:	28 f0       	brcs	.+10     	; 0xc44 <DIO_voidActivePinInPullUpResistance+0x18>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	c9 f0       	breq	.+50     	; 0xc70 <DIO_voidActivePinInPullUpResistance+0x44>
     c3e:	83 30       	cpi	r24, 0x03	; 3
     c40:	11 f1       	breq	.+68     	; 0xc86 <DIO_voidActivePinInPullUpResistance+0x5a>
     c42:	08 95       	ret
			case DIO_PORTA:
				SET_BIT(PORTA_REG, copy_u8PinId);
     c44:	2b b3       	in	r18, 0x1b	; 27
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_voidActivePinInPullUpResistance+0x24>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	6a 95       	dec	r22
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_voidActivePinInPullUpResistance+0x20>
     c54:	82 2b       	or	r24, r18
     c56:	8b bb       	out	0x1b, r24	; 27
			break;
     c58:	08 95       	ret
			case DIO_PORTB:
				SET_BIT(PORTB_REG, copy_u8PinId);
     c5a:	28 b3       	in	r18, 0x18	; 24
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <DIO_voidActivePinInPullUpResistance+0x3a>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	6a 95       	dec	r22
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <DIO_voidActivePinInPullUpResistance+0x36>
     c6a:	82 2b       	or	r24, r18
     c6c:	88 bb       	out	0x18, r24	; 24
			break;
     c6e:	08 95       	ret
			case DIO_PORTC:
				SET_BIT(PORTC_REG, copy_u8PinId);
     c70:	25 b3       	in	r18, 0x15	; 21
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <DIO_voidActivePinInPullUpResistance+0x50>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	6a 95       	dec	r22
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <DIO_voidActivePinInPullUpResistance+0x4c>
     c80:	82 2b       	or	r24, r18
     c82:	85 bb       	out	0x15, r24	; 21
			break;
     c84:	08 95       	ret
			case DIO_PORTD:
				SET_BIT(PORTD_REG, copy_u8PinId);
     c86:	22 b3       	in	r18, 0x12	; 18
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <DIO_voidActivePinInPullUpResistance+0x66>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	6a 95       	dec	r22
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <DIO_voidActivePinInPullUpResistance+0x62>
     c96:	82 2b       	or	r24, r18
     c98:	82 bb       	out	0x12, r24	; 18
     c9a:	08 95       	ret

00000c9c <PWM_voidInitChannel_1A>:
		OCR0_REG = ((copy_u8DutyCycle*256)/100)-1;
		
		// Select Prescaler Value = 64
		SET_BIT(TCCR0_REG,CS00);
		SET_BIT(TCCR0_REG,CS01);
		CLR_BIT(TCCR0_REG,CS02);
     c9c:	8f b5       	in	r24, 0x2f	; 47
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	8f bd       	out	0x2f, r24	; 47
     ca2:	8f b5       	in	r24, 0x2f	; 47
     ca4:	82 60       	ori	r24, 0x02	; 2
     ca6:	8f bd       	out	0x2f, r24	; 47
     ca8:	8e b5       	in	r24, 0x2e	; 46
     caa:	88 60       	ori	r24, 0x08	; 8
     cac:	8e bd       	out	0x2e, r24	; 46
     cae:	8e b5       	in	r24, 0x2e	; 46
     cb0:	80 61       	ori	r24, 0x10	; 16
     cb2:	8e bd       	out	0x2e, r24	; 46
     cb4:	8f b5       	in	r24, 0x2f	; 47
     cb6:	8f 7b       	andi	r24, 0xBF	; 191
     cb8:	8f bd       	out	0x2f, r24	; 47
     cba:	8f b5       	in	r24, 0x2f	; 47
     cbc:	80 68       	ori	r24, 0x80	; 128
     cbe:	8f bd       	out	0x2f, r24	; 47
     cc0:	08 95       	ret

00000cc2 <PWM_voidGenerate_PWM_Channel_1A>:
	}
}


void PWM_voidGenerate_PWM_Channel_1A(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
     cd0:	6a 01       	movw	r12, r20
     cd2:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	48 ec       	ldi	r20, 0xC8	; 200
     cda:	52 e4       	ldi	r21, 0x42	; 66
     cdc:	c7 01       	movw	r24, r14
     cde:	b6 01       	movw	r22, r12
     ce0:	0e 94 28 07 	call	0xe50	; 0xe50 <__cmpsf2>
     ce4:	18 16       	cp	r1, r24
     ce6:	94 f1       	brlt	.+100    	; 0xd4c <PWM_voidGenerate_PWM_Channel_1A+0x8a>
	{
		// under condition tick time 4 MS by setting prescaller 64
		ICR1_u16_REG = ((1000000UL/copy_u16Frequency_hz)/4)-1;
     ce8:	9e 01       	movw	r18, r28
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	60 e9       	ldi	r22, 0x90	; 144
     cf0:	70 ed       	ldi	r23, 0xD0	; 208
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 ed 08 	call	0x11da	; 0x11da <__udivmodsi4>
     cfa:	21 50       	subi	r18, 0x01	; 1
     cfc:	31 09       	sbc	r19, r1
     cfe:	37 bd       	out	0x27, r19	; 39
     d00:	26 bd       	out	0x26, r18	; 38
		
		// under condition non inverting fast PWM
		OCR1A_u16_REG = ((copy_f32DutyCycle*(ICR1_u16_REG+1))/100)-1;
     d02:	66 b5       	in	r22, 0x26	; 38
     d04:	77 b5       	in	r23, 0x27	; 39
     d06:	6f 5f       	subi	r22, 0xFF	; 255
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatunsisf>
     d12:	a7 01       	movw	r20, r14
     d14:	96 01       	movw	r18, r12
     d16:	0e 94 80 08 	call	0x1100	; 0x1100 <__mulsf3>
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	48 ec       	ldi	r20, 0xC8	; 200
     d20:	52 e4       	ldi	r21, 0x42	; 66
     d22:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__divsf3>
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 bb 06 	call	0xd76	; 0xd76 <__subsf3>
     d32:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fixunssfsi>
     d36:	7b bd       	out	0x2b, r23	; 43
     d38:	6a bd       	out	0x2a, r22	; 42
		
		// Select Prescaler Value = 64
		SET_BIT(TCCR1B_REG,CS10);
     d3a:	8e b5       	in	r24, 0x2e	; 46
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
     d40:	8e b5       	in	r24, 0x2e	; 46
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
     d46:	8e b5       	in	r24, 0x2e	; 46
     d48:	8b 7f       	andi	r24, 0xFB	; 251
     d4a:	8e bd       	out	0x2e, r24	; 46
	}
	else
	{
		// return Error state
	}
}
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	08 95       	ret

00000d5a <PWM_voidStopChannel_1A>:

void PWM_voidStopChannel_1A(void)
{
	// Clear the prescaler bits to stop the timer
	CLR_BIT(TCCR1B_REG, CS10);
     d5a:	8e b5       	in	r24, 0x2e	; 46
     d5c:	8e 7f       	andi	r24, 0xFE	; 254
     d5e:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B_REG, CS11);
     d60:	8e b5       	in	r24, 0x2e	; 46
     d62:	8d 7f       	andi	r24, 0xFD	; 253
     d64:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B_REG, CS12);
     d66:	8e b5       	in	r24, 0x2e	; 46
     d68:	8b 7f       	andi	r24, 0xFB	; 251
     d6a:	8e bd       	out	0x2e, r24	; 46

	// Optionally, reset the counter and output compare registers
	TCNT1_u16_REG = 0;
     d6c:	1d bc       	out	0x2d, r1	; 45
     d6e:	1c bc       	out	0x2c, r1	; 44
	OCR1A_u16_REG = 0;
     d70:	1b bc       	out	0x2b, r1	; 43
     d72:	1a bc       	out	0x2a, r1	; 42
     d74:	08 95       	ret

00000d76 <__subsf3>:
     d76:	50 58       	subi	r21, 0x80	; 128

00000d78 <__addsf3>:
     d78:	bb 27       	eor	r27, r27
     d7a:	aa 27       	eor	r26, r26
     d7c:	0e 94 d3 06 	call	0xda6	; 0xda6 <__addsf3x>
     d80:	0c 94 46 08 	jmp	0x108c	; 0x108c <__fp_round>
     d84:	0e 94 38 08 	call	0x1070	; 0x1070 <__fp_pscA>
     d88:	38 f0       	brcs	.+14     	; 0xd98 <__addsf3+0x20>
     d8a:	0e 94 3f 08 	call	0x107e	; 0x107e <__fp_pscB>
     d8e:	20 f0       	brcs	.+8      	; 0xd98 <__addsf3+0x20>
     d90:	39 f4       	brne	.+14     	; 0xda0 <__addsf3+0x28>
     d92:	9f 3f       	cpi	r25, 0xFF	; 255
     d94:	19 f4       	brne	.+6      	; 0xd9c <__addsf3+0x24>
     d96:	26 f4       	brtc	.+8      	; 0xda0 <__addsf3+0x28>
     d98:	0c 94 35 08 	jmp	0x106a	; 0x106a <__fp_nan>
     d9c:	0e f4       	brtc	.+2      	; 0xda0 <__addsf3+0x28>
     d9e:	e0 95       	com	r30
     da0:	e7 fb       	bst	r30, 7
     da2:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_inf>

00000da6 <__addsf3x>:
     da6:	e9 2f       	mov	r30, r25
     da8:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fp_split3>
     dac:	58 f3       	brcs	.-42     	; 0xd84 <__addsf3+0xc>
     dae:	ba 17       	cp	r27, r26
     db0:	62 07       	cpc	r22, r18
     db2:	73 07       	cpc	r23, r19
     db4:	84 07       	cpc	r24, r20
     db6:	95 07       	cpc	r25, r21
     db8:	20 f0       	brcs	.+8      	; 0xdc2 <__addsf3x+0x1c>
     dba:	79 f4       	brne	.+30     	; 0xdda <__addsf3x+0x34>
     dbc:	a6 f5       	brtc	.+104    	; 0xe26 <__addsf3x+0x80>
     dbe:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__fp_zero>
     dc2:	0e f4       	brtc	.+2      	; 0xdc6 <__addsf3x+0x20>
     dc4:	e0 95       	com	r30
     dc6:	0b 2e       	mov	r0, r27
     dc8:	ba 2f       	mov	r27, r26
     dca:	a0 2d       	mov	r26, r0
     dcc:	0b 01       	movw	r0, r22
     dce:	b9 01       	movw	r22, r18
     dd0:	90 01       	movw	r18, r0
     dd2:	0c 01       	movw	r0, r24
     dd4:	ca 01       	movw	r24, r20
     dd6:	a0 01       	movw	r20, r0
     dd8:	11 24       	eor	r1, r1
     dda:	ff 27       	eor	r31, r31
     ddc:	59 1b       	sub	r21, r25
     dde:	99 f0       	breq	.+38     	; 0xe06 <__addsf3x+0x60>
     de0:	59 3f       	cpi	r21, 0xF9	; 249
     de2:	50 f4       	brcc	.+20     	; 0xdf8 <__addsf3x+0x52>
     de4:	50 3e       	cpi	r21, 0xE0	; 224
     de6:	68 f1       	brcs	.+90     	; 0xe42 <__addsf3x+0x9c>
     de8:	1a 16       	cp	r1, r26
     dea:	f0 40       	sbci	r31, 0x00	; 0
     dec:	a2 2f       	mov	r26, r18
     dee:	23 2f       	mov	r18, r19
     df0:	34 2f       	mov	r19, r20
     df2:	44 27       	eor	r20, r20
     df4:	58 5f       	subi	r21, 0xF8	; 248
     df6:	f3 cf       	rjmp	.-26     	; 0xdde <__addsf3x+0x38>
     df8:	46 95       	lsr	r20
     dfa:	37 95       	ror	r19
     dfc:	27 95       	ror	r18
     dfe:	a7 95       	ror	r26
     e00:	f0 40       	sbci	r31, 0x00	; 0
     e02:	53 95       	inc	r21
     e04:	c9 f7       	brne	.-14     	; 0xdf8 <__addsf3x+0x52>
     e06:	7e f4       	brtc	.+30     	; 0xe26 <__addsf3x+0x80>
     e08:	1f 16       	cp	r1, r31
     e0a:	ba 0b       	sbc	r27, r26
     e0c:	62 0b       	sbc	r22, r18
     e0e:	73 0b       	sbc	r23, r19
     e10:	84 0b       	sbc	r24, r20
     e12:	ba f0       	brmi	.+46     	; 0xe42 <__addsf3x+0x9c>
     e14:	91 50       	subi	r25, 0x01	; 1
     e16:	a1 f0       	breq	.+40     	; 0xe40 <__addsf3x+0x9a>
     e18:	ff 0f       	add	r31, r31
     e1a:	bb 1f       	adc	r27, r27
     e1c:	66 1f       	adc	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	88 1f       	adc	r24, r24
     e22:	c2 f7       	brpl	.-16     	; 0xe14 <__addsf3x+0x6e>
     e24:	0e c0       	rjmp	.+28     	; 0xe42 <__addsf3x+0x9c>
     e26:	ba 0f       	add	r27, r26
     e28:	62 1f       	adc	r22, r18
     e2a:	73 1f       	adc	r23, r19
     e2c:	84 1f       	adc	r24, r20
     e2e:	48 f4       	brcc	.+18     	; 0xe42 <__addsf3x+0x9c>
     e30:	87 95       	ror	r24
     e32:	77 95       	ror	r23
     e34:	67 95       	ror	r22
     e36:	b7 95       	ror	r27
     e38:	f7 95       	ror	r31
     e3a:	9e 3f       	cpi	r25, 0xFE	; 254
     e3c:	08 f0       	brcs	.+2      	; 0xe40 <__addsf3x+0x9a>
     e3e:	b0 cf       	rjmp	.-160    	; 0xda0 <__addsf3+0x28>
     e40:	93 95       	inc	r25
     e42:	88 0f       	add	r24, r24
     e44:	08 f0       	brcs	.+2      	; 0xe48 <__addsf3x+0xa2>
     e46:	99 27       	eor	r25, r25
     e48:	ee 0f       	add	r30, r30
     e4a:	97 95       	ror	r25
     e4c:	87 95       	ror	r24
     e4e:	08 95       	ret

00000e50 <__cmpsf2>:
     e50:	0e 94 0b 08 	call	0x1016	; 0x1016 <__fp_cmp>
     e54:	08 f4       	brcc	.+2      	; 0xe58 <__cmpsf2+0x8>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	08 95       	ret

00000e5a <__divsf3>:
     e5a:	0e 94 41 07 	call	0xe82	; 0xe82 <__divsf3x>
     e5e:	0c 94 46 08 	jmp	0x108c	; 0x108c <__fp_round>
     e62:	0e 94 3f 08 	call	0x107e	; 0x107e <__fp_pscB>
     e66:	58 f0       	brcs	.+22     	; 0xe7e <__divsf3+0x24>
     e68:	0e 94 38 08 	call	0x1070	; 0x1070 <__fp_pscA>
     e6c:	40 f0       	brcs	.+16     	; 0xe7e <__divsf3+0x24>
     e6e:	29 f4       	brne	.+10     	; 0xe7a <__divsf3+0x20>
     e70:	5f 3f       	cpi	r21, 0xFF	; 255
     e72:	29 f0       	breq	.+10     	; 0xe7e <__divsf3+0x24>
     e74:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_inf>
     e78:	51 11       	cpse	r21, r1
     e7a:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_szero>
     e7e:	0c 94 35 08 	jmp	0x106a	; 0x106a <__fp_nan>

00000e82 <__divsf3x>:
     e82:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fp_split3>
     e86:	68 f3       	brcs	.-38     	; 0xe62 <__divsf3+0x8>

00000e88 <__divsf3_pse>:
     e88:	99 23       	and	r25, r25
     e8a:	b1 f3       	breq	.-20     	; 0xe78 <__divsf3+0x1e>
     e8c:	55 23       	and	r21, r21
     e8e:	91 f3       	breq	.-28     	; 0xe74 <__divsf3+0x1a>
     e90:	95 1b       	sub	r25, r21
     e92:	55 0b       	sbc	r21, r21
     e94:	bb 27       	eor	r27, r27
     e96:	aa 27       	eor	r26, r26
     e98:	62 17       	cp	r22, r18
     e9a:	73 07       	cpc	r23, r19
     e9c:	84 07       	cpc	r24, r20
     e9e:	38 f0       	brcs	.+14     	; 0xeae <__divsf3_pse+0x26>
     ea0:	9f 5f       	subi	r25, 0xFF	; 255
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	44 1f       	adc	r20, r20
     eaa:	aa 1f       	adc	r26, r26
     eac:	a9 f3       	breq	.-22     	; 0xe98 <__divsf3_pse+0x10>
     eae:	35 d0       	rcall	.+106    	; 0xf1a <__divsf3_pse+0x92>
     eb0:	0e 2e       	mov	r0, r30
     eb2:	3a f0       	brmi	.+14     	; 0xec2 <__divsf3_pse+0x3a>
     eb4:	e0 e8       	ldi	r30, 0x80	; 128
     eb6:	32 d0       	rcall	.+100    	; 0xf1c <__divsf3_pse+0x94>
     eb8:	91 50       	subi	r25, 0x01	; 1
     eba:	50 40       	sbci	r21, 0x00	; 0
     ebc:	e6 95       	lsr	r30
     ebe:	00 1c       	adc	r0, r0
     ec0:	ca f7       	brpl	.-14     	; 0xeb4 <__divsf3_pse+0x2c>
     ec2:	2b d0       	rcall	.+86     	; 0xf1a <__divsf3_pse+0x92>
     ec4:	fe 2f       	mov	r31, r30
     ec6:	29 d0       	rcall	.+82     	; 0xf1a <__divsf3_pse+0x92>
     ec8:	66 0f       	add	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	88 1f       	adc	r24, r24
     ece:	bb 1f       	adc	r27, r27
     ed0:	26 17       	cp	r18, r22
     ed2:	37 07       	cpc	r19, r23
     ed4:	48 07       	cpc	r20, r24
     ed6:	ab 07       	cpc	r26, r27
     ed8:	b0 e8       	ldi	r27, 0x80	; 128
     eda:	09 f0       	breq	.+2      	; 0xede <__divsf3_pse+0x56>
     edc:	bb 0b       	sbc	r27, r27
     ede:	80 2d       	mov	r24, r0
     ee0:	bf 01       	movw	r22, r30
     ee2:	ff 27       	eor	r31, r31
     ee4:	93 58       	subi	r25, 0x83	; 131
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	3a f0       	brmi	.+14     	; 0xef8 <__divsf3_pse+0x70>
     eea:	9e 3f       	cpi	r25, 0xFE	; 254
     eec:	51 05       	cpc	r21, r1
     eee:	78 f0       	brcs	.+30     	; 0xf0e <__divsf3_pse+0x86>
     ef0:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_inf>
     ef4:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_szero>
     ef8:	5f 3f       	cpi	r21, 0xFF	; 255
     efa:	e4 f3       	brlt	.-8      	; 0xef4 <__divsf3_pse+0x6c>
     efc:	98 3e       	cpi	r25, 0xE8	; 232
     efe:	d4 f3       	brlt	.-12     	; 0xef4 <__divsf3_pse+0x6c>
     f00:	86 95       	lsr	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	b7 95       	ror	r27
     f08:	f7 95       	ror	r31
     f0a:	9f 5f       	subi	r25, 0xFF	; 255
     f0c:	c9 f7       	brne	.-14     	; 0xf00 <__divsf3_pse+0x78>
     f0e:	88 0f       	add	r24, r24
     f10:	91 1d       	adc	r25, r1
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	97 f9       	bld	r25, 7
     f18:	08 95       	ret
     f1a:	e1 e0       	ldi	r30, 0x01	; 1
     f1c:	66 0f       	add	r22, r22
     f1e:	77 1f       	adc	r23, r23
     f20:	88 1f       	adc	r24, r24
     f22:	bb 1f       	adc	r27, r27
     f24:	62 17       	cp	r22, r18
     f26:	73 07       	cpc	r23, r19
     f28:	84 07       	cpc	r24, r20
     f2a:	ba 07       	cpc	r27, r26
     f2c:	20 f0       	brcs	.+8      	; 0xf36 <__divsf3_pse+0xae>
     f2e:	62 1b       	sub	r22, r18
     f30:	73 0b       	sbc	r23, r19
     f32:	84 0b       	sbc	r24, r20
     f34:	ba 0b       	sbc	r27, r26
     f36:	ee 1f       	adc	r30, r30
     f38:	88 f7       	brcc	.-30     	; 0xf1c <__divsf3_pse+0x94>
     f3a:	e0 95       	com	r30
     f3c:	08 95       	ret

00000f3e <__fixunssfsi>:
     f3e:	0e 94 5f 08 	call	0x10be	; 0x10be <__fp_splitA>
     f42:	88 f0       	brcs	.+34     	; 0xf66 <__fixunssfsi+0x28>
     f44:	9f 57       	subi	r25, 0x7F	; 127
     f46:	98 f0       	brcs	.+38     	; 0xf6e <__fixunssfsi+0x30>
     f48:	b9 2f       	mov	r27, r25
     f4a:	99 27       	eor	r25, r25
     f4c:	b7 51       	subi	r27, 0x17	; 23
     f4e:	b0 f0       	brcs	.+44     	; 0xf7c <__fixunssfsi+0x3e>
     f50:	e1 f0       	breq	.+56     	; 0xf8a <__fixunssfsi+0x4c>
     f52:	66 0f       	add	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	1a f0       	brmi	.+6      	; 0xf62 <__fixunssfsi+0x24>
     f5c:	ba 95       	dec	r27
     f5e:	c9 f7       	brne	.-14     	; 0xf52 <__fixunssfsi+0x14>
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <__fixunssfsi+0x4c>
     f62:	b1 30       	cpi	r27, 0x01	; 1
     f64:	91 f0       	breq	.+36     	; 0xf8a <__fixunssfsi+0x4c>
     f66:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__fp_zero>
     f6a:	b1 e0       	ldi	r27, 0x01	; 1
     f6c:	08 95       	ret
     f6e:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__fp_zero>
     f72:	67 2f       	mov	r22, r23
     f74:	78 2f       	mov	r23, r24
     f76:	88 27       	eor	r24, r24
     f78:	b8 5f       	subi	r27, 0xF8	; 248
     f7a:	39 f0       	breq	.+14     	; 0xf8a <__fixunssfsi+0x4c>
     f7c:	b9 3f       	cpi	r27, 0xF9	; 249
     f7e:	cc f3       	brlt	.-14     	; 0xf72 <__fixunssfsi+0x34>
     f80:	86 95       	lsr	r24
     f82:	77 95       	ror	r23
     f84:	67 95       	ror	r22
     f86:	b3 95       	inc	r27
     f88:	d9 f7       	brne	.-10     	; 0xf80 <__fixunssfsi+0x42>
     f8a:	3e f4       	brtc	.+14     	; 0xf9a <__fixunssfsi+0x5c>
     f8c:	90 95       	com	r25
     f8e:	80 95       	com	r24
     f90:	70 95       	com	r23
     f92:	61 95       	neg	r22
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__floatunsisf>:
     f9c:	e8 94       	clt
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <__floatsisf+0x12>

00000fa0 <__floatsisf>:
     fa0:	97 fb       	bst	r25, 7
     fa2:	3e f4       	brtc	.+14     	; 0xfb2 <__floatsisf+0x12>
     fa4:	90 95       	com	r25
     fa6:	80 95       	com	r24
     fa8:	70 95       	com	r23
     faa:	61 95       	neg	r22
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	99 23       	and	r25, r25
     fb4:	a9 f0       	breq	.+42     	; 0xfe0 <__floatsisf+0x40>
     fb6:	f9 2f       	mov	r31, r25
     fb8:	96 e9       	ldi	r25, 0x96	; 150
     fba:	bb 27       	eor	r27, r27
     fbc:	93 95       	inc	r25
     fbe:	f6 95       	lsr	r31
     fc0:	87 95       	ror	r24
     fc2:	77 95       	ror	r23
     fc4:	67 95       	ror	r22
     fc6:	b7 95       	ror	r27
     fc8:	f1 11       	cpse	r31, r1
     fca:	f8 cf       	rjmp	.-16     	; 0xfbc <__floatsisf+0x1c>
     fcc:	fa f4       	brpl	.+62     	; 0x100c <__floatsisf+0x6c>
     fce:	bb 0f       	add	r27, r27
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <__floatsisf+0x36>
     fd2:	60 ff       	sbrs	r22, 0
     fd4:	1b c0       	rjmp	.+54     	; 0x100c <__floatsisf+0x6c>
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	16 c0       	rjmp	.+44     	; 0x100c <__floatsisf+0x6c>
     fe0:	88 23       	and	r24, r24
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <__floatsisf+0x48>
     fe4:	96 e9       	ldi	r25, 0x96	; 150
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <__floatsisf+0x6a>
     fe8:	77 23       	and	r23, r23
     fea:	21 f0       	breq	.+8      	; 0xff4 <__floatsisf+0x54>
     fec:	9e e8       	ldi	r25, 0x8E	; 142
     fee:	87 2f       	mov	r24, r23
     ff0:	76 2f       	mov	r23, r22
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <__floatsisf+0x5e>
     ff4:	66 23       	and	r22, r22
     ff6:	71 f0       	breq	.+28     	; 0x1014 <__floatsisf+0x74>
     ff8:	96 e8       	ldi	r25, 0x86	; 134
     ffa:	86 2f       	mov	r24, r22
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	2a f0       	brmi	.+10     	; 0x100c <__floatsisf+0x6c>
    1002:	9a 95       	dec	r25
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	da f7       	brpl	.-10     	; 0x1002 <__floatsisf+0x62>
    100c:	88 0f       	add	r24, r24
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret

00001016 <__fp_cmp>:
    1016:	99 0f       	add	r25, r25
    1018:	00 08       	sbc	r0, r0
    101a:	55 0f       	add	r21, r21
    101c:	aa 0b       	sbc	r26, r26
    101e:	e0 e8       	ldi	r30, 0x80	; 128
    1020:	fe ef       	ldi	r31, 0xFE	; 254
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	e8 07       	cpc	r30, r24
    1028:	f9 07       	cpc	r31, r25
    102a:	c0 f0       	brcs	.+48     	; 0x105c <__fp_cmp+0x46>
    102c:	12 16       	cp	r1, r18
    102e:	13 06       	cpc	r1, r19
    1030:	e4 07       	cpc	r30, r20
    1032:	f5 07       	cpc	r31, r21
    1034:	98 f0       	brcs	.+38     	; 0x105c <__fp_cmp+0x46>
    1036:	62 1b       	sub	r22, r18
    1038:	73 0b       	sbc	r23, r19
    103a:	84 0b       	sbc	r24, r20
    103c:	95 0b       	sbc	r25, r21
    103e:	39 f4       	brne	.+14     	; 0x104e <__fp_cmp+0x38>
    1040:	0a 26       	eor	r0, r26
    1042:	61 f0       	breq	.+24     	; 0x105c <__fp_cmp+0x46>
    1044:	23 2b       	or	r18, r19
    1046:	24 2b       	or	r18, r20
    1048:	25 2b       	or	r18, r21
    104a:	21 f4       	brne	.+8      	; 0x1054 <__fp_cmp+0x3e>
    104c:	08 95       	ret
    104e:	0a 26       	eor	r0, r26
    1050:	09 f4       	brne	.+2      	; 0x1054 <__fp_cmp+0x3e>
    1052:	a1 40       	sbci	r26, 0x01	; 1
    1054:	a6 95       	lsr	r26
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	81 1d       	adc	r24, r1
    105a:	81 1d       	adc	r24, r1
    105c:	08 95       	ret

0000105e <__fp_inf>:
    105e:	97 f9       	bld	r25, 7
    1060:	9f 67       	ori	r25, 0x7F	; 127
    1062:	80 e8       	ldi	r24, 0x80	; 128
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	08 95       	ret

0000106a <__fp_nan>:
    106a:	9f ef       	ldi	r25, 0xFF	; 255
    106c:	80 ec       	ldi	r24, 0xC0	; 192
    106e:	08 95       	ret

00001070 <__fp_pscA>:
    1070:	00 24       	eor	r0, r0
    1072:	0a 94       	dec	r0
    1074:	16 16       	cp	r1, r22
    1076:	17 06       	cpc	r1, r23
    1078:	18 06       	cpc	r1, r24
    107a:	09 06       	cpc	r0, r25
    107c:	08 95       	ret

0000107e <__fp_pscB>:
    107e:	00 24       	eor	r0, r0
    1080:	0a 94       	dec	r0
    1082:	12 16       	cp	r1, r18
    1084:	13 06       	cpc	r1, r19
    1086:	14 06       	cpc	r1, r20
    1088:	05 06       	cpc	r0, r21
    108a:	08 95       	ret

0000108c <__fp_round>:
    108c:	09 2e       	mov	r0, r25
    108e:	03 94       	inc	r0
    1090:	00 0c       	add	r0, r0
    1092:	11 f4       	brne	.+4      	; 0x1098 <__fp_round+0xc>
    1094:	88 23       	and	r24, r24
    1096:	52 f0       	brmi	.+20     	; 0x10ac <__fp_round+0x20>
    1098:	bb 0f       	add	r27, r27
    109a:	40 f4       	brcc	.+16     	; 0x10ac <__fp_round+0x20>
    109c:	bf 2b       	or	r27, r31
    109e:	11 f4       	brne	.+4      	; 0x10a4 <__fp_round+0x18>
    10a0:	60 ff       	sbrs	r22, 0
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <__fp_round+0x20>
    10a4:	6f 5f       	subi	r22, 0xFF	; 255
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	8f 4f       	sbci	r24, 0xFF	; 255
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	08 95       	ret

000010ae <__fp_split3>:
    10ae:	57 fd       	sbrc	r21, 7
    10b0:	90 58       	subi	r25, 0x80	; 128
    10b2:	44 0f       	add	r20, r20
    10b4:	55 1f       	adc	r21, r21
    10b6:	59 f0       	breq	.+22     	; 0x10ce <__fp_splitA+0x10>
    10b8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ba:	71 f0       	breq	.+28     	; 0x10d8 <__fp_splitA+0x1a>
    10bc:	47 95       	ror	r20

000010be <__fp_splitA>:
    10be:	88 0f       	add	r24, r24
    10c0:	97 fb       	bst	r25, 7
    10c2:	99 1f       	adc	r25, r25
    10c4:	61 f0       	breq	.+24     	; 0x10de <__fp_splitA+0x20>
    10c6:	9f 3f       	cpi	r25, 0xFF	; 255
    10c8:	79 f0       	breq	.+30     	; 0x10e8 <__fp_splitA+0x2a>
    10ca:	87 95       	ror	r24
    10cc:	08 95       	ret
    10ce:	12 16       	cp	r1, r18
    10d0:	13 06       	cpc	r1, r19
    10d2:	14 06       	cpc	r1, r20
    10d4:	55 1f       	adc	r21, r21
    10d6:	f2 cf       	rjmp	.-28     	; 0x10bc <__fp_split3+0xe>
    10d8:	46 95       	lsr	r20
    10da:	f1 df       	rcall	.-30     	; 0x10be <__fp_splitA>
    10dc:	08 c0       	rjmp	.+16     	; 0x10ee <__fp_splitA+0x30>
    10de:	16 16       	cp	r1, r22
    10e0:	17 06       	cpc	r1, r23
    10e2:	18 06       	cpc	r1, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	f1 cf       	rjmp	.-30     	; 0x10ca <__fp_splitA+0xc>
    10e8:	86 95       	lsr	r24
    10ea:	71 05       	cpc	r23, r1
    10ec:	61 05       	cpc	r22, r1
    10ee:	08 94       	sec
    10f0:	08 95       	ret

000010f2 <__fp_zero>:
    10f2:	e8 94       	clt

000010f4 <__fp_szero>:
    10f4:	bb 27       	eor	r27, r27
    10f6:	66 27       	eor	r22, r22
    10f8:	77 27       	eor	r23, r23
    10fa:	cb 01       	movw	r24, r22
    10fc:	97 f9       	bld	r25, 7
    10fe:	08 95       	ret

00001100 <__mulsf3>:
    1100:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3x>
    1104:	0c 94 46 08 	jmp	0x108c	; 0x108c <__fp_round>
    1108:	0e 94 38 08 	call	0x1070	; 0x1070 <__fp_pscA>
    110c:	38 f0       	brcs	.+14     	; 0x111c <__mulsf3+0x1c>
    110e:	0e 94 3f 08 	call	0x107e	; 0x107e <__fp_pscB>
    1112:	20 f0       	brcs	.+8      	; 0x111c <__mulsf3+0x1c>
    1114:	95 23       	and	r25, r21
    1116:	11 f0       	breq	.+4      	; 0x111c <__mulsf3+0x1c>
    1118:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_inf>
    111c:	0c 94 35 08 	jmp	0x106a	; 0x106a <__fp_nan>
    1120:	11 24       	eor	r1, r1
    1122:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_szero>

00001126 <__mulsf3x>:
    1126:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fp_split3>
    112a:	70 f3       	brcs	.-36     	; 0x1108 <__mulsf3+0x8>

0000112c <__mulsf3_pse>:
    112c:	95 9f       	mul	r25, r21
    112e:	c1 f3       	breq	.-16     	; 0x1120 <__mulsf3+0x20>
    1130:	95 0f       	add	r25, r21
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	55 1f       	adc	r21, r21
    1136:	62 9f       	mul	r22, r18
    1138:	f0 01       	movw	r30, r0
    113a:	72 9f       	mul	r23, r18
    113c:	bb 27       	eor	r27, r27
    113e:	f0 0d       	add	r31, r0
    1140:	b1 1d       	adc	r27, r1
    1142:	63 9f       	mul	r22, r19
    1144:	aa 27       	eor	r26, r26
    1146:	f0 0d       	add	r31, r0
    1148:	b1 1d       	adc	r27, r1
    114a:	aa 1f       	adc	r26, r26
    114c:	64 9f       	mul	r22, r20
    114e:	66 27       	eor	r22, r22
    1150:	b0 0d       	add	r27, r0
    1152:	a1 1d       	adc	r26, r1
    1154:	66 1f       	adc	r22, r22
    1156:	82 9f       	mul	r24, r18
    1158:	22 27       	eor	r18, r18
    115a:	b0 0d       	add	r27, r0
    115c:	a1 1d       	adc	r26, r1
    115e:	62 1f       	adc	r22, r18
    1160:	73 9f       	mul	r23, r19
    1162:	b0 0d       	add	r27, r0
    1164:	a1 1d       	adc	r26, r1
    1166:	62 1f       	adc	r22, r18
    1168:	83 9f       	mul	r24, r19
    116a:	a0 0d       	add	r26, r0
    116c:	61 1d       	adc	r22, r1
    116e:	22 1f       	adc	r18, r18
    1170:	74 9f       	mul	r23, r20
    1172:	33 27       	eor	r19, r19
    1174:	a0 0d       	add	r26, r0
    1176:	61 1d       	adc	r22, r1
    1178:	23 1f       	adc	r18, r19
    117a:	84 9f       	mul	r24, r20
    117c:	60 0d       	add	r22, r0
    117e:	21 1d       	adc	r18, r1
    1180:	82 2f       	mov	r24, r18
    1182:	76 2f       	mov	r23, r22
    1184:	6a 2f       	mov	r22, r26
    1186:	11 24       	eor	r1, r1
    1188:	9f 57       	subi	r25, 0x7F	; 127
    118a:	50 40       	sbci	r21, 0x00	; 0
    118c:	9a f0       	brmi	.+38     	; 0x11b4 <__mulsf3_pse+0x88>
    118e:	f1 f0       	breq	.+60     	; 0x11cc <__mulsf3_pse+0xa0>
    1190:	88 23       	and	r24, r24
    1192:	4a f0       	brmi	.+18     	; 0x11a6 <__mulsf3_pse+0x7a>
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	bb 1f       	adc	r27, r27
    119a:	66 1f       	adc	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	88 1f       	adc	r24, r24
    11a0:	91 50       	subi	r25, 0x01	; 1
    11a2:	50 40       	sbci	r21, 0x00	; 0
    11a4:	a9 f7       	brne	.-22     	; 0x1190 <__mulsf3_pse+0x64>
    11a6:	9e 3f       	cpi	r25, 0xFE	; 254
    11a8:	51 05       	cpc	r21, r1
    11aa:	80 f0       	brcs	.+32     	; 0x11cc <__mulsf3_pse+0xa0>
    11ac:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_inf>
    11b0:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_szero>
    11b4:	5f 3f       	cpi	r21, 0xFF	; 255
    11b6:	e4 f3       	brlt	.-8      	; 0x11b0 <__mulsf3_pse+0x84>
    11b8:	98 3e       	cpi	r25, 0xE8	; 232
    11ba:	d4 f3       	brlt	.-12     	; 0x11b0 <__mulsf3_pse+0x84>
    11bc:	86 95       	lsr	r24
    11be:	77 95       	ror	r23
    11c0:	67 95       	ror	r22
    11c2:	b7 95       	ror	r27
    11c4:	f7 95       	ror	r31
    11c6:	e7 95       	ror	r30
    11c8:	9f 5f       	subi	r25, 0xFF	; 255
    11ca:	c1 f7       	brne	.-16     	; 0x11bc <__mulsf3_pse+0x90>
    11cc:	fe 2b       	or	r31, r30
    11ce:	88 0f       	add	r24, r24
    11d0:	91 1d       	adc	r25, r1
    11d2:	96 95       	lsr	r25
    11d4:	87 95       	ror	r24
    11d6:	97 f9       	bld	r25, 7
    11d8:	08 95       	ret

000011da <__udivmodsi4>:
    11da:	a1 e2       	ldi	r26, 0x21	; 33
    11dc:	1a 2e       	mov	r1, r26
    11de:	aa 1b       	sub	r26, r26
    11e0:	bb 1b       	sub	r27, r27
    11e2:	fd 01       	movw	r30, r26
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <__udivmodsi4_ep>

000011e6 <__udivmodsi4_loop>:
    11e6:	aa 1f       	adc	r26, r26
    11e8:	bb 1f       	adc	r27, r27
    11ea:	ee 1f       	adc	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	a2 17       	cp	r26, r18
    11f0:	b3 07       	cpc	r27, r19
    11f2:	e4 07       	cpc	r30, r20
    11f4:	f5 07       	cpc	r31, r21
    11f6:	20 f0       	brcs	.+8      	; 0x1200 <__udivmodsi4_ep>
    11f8:	a2 1b       	sub	r26, r18
    11fa:	b3 0b       	sbc	r27, r19
    11fc:	e4 0b       	sbc	r30, r20
    11fe:	f5 0b       	sbc	r31, r21

00001200 <__udivmodsi4_ep>:
    1200:	66 1f       	adc	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	88 1f       	adc	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	1a 94       	dec	r1
    120a:	69 f7       	brne	.-38     	; 0x11e6 <__udivmodsi4_loop>
    120c:	60 95       	com	r22
    120e:	70 95       	com	r23
    1210:	80 95       	com	r24
    1212:	90 95       	com	r25
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	bd 01       	movw	r22, r26
    121a:	cf 01       	movw	r24, r30
    121c:	08 95       	ret

0000121e <memcmp>:
    121e:	fb 01       	movw	r30, r22
    1220:	dc 01       	movw	r26, r24
    1222:	04 c0       	rjmp	.+8      	; 0x122c <memcmp+0xe>
    1224:	8d 91       	ld	r24, X+
    1226:	01 90       	ld	r0, Z+
    1228:	80 19       	sub	r24, r0
    122a:	21 f4       	brne	.+8      	; 0x1234 <memcmp+0x16>
    122c:	41 50       	subi	r20, 0x01	; 1
    122e:	50 40       	sbci	r21, 0x00	; 0
    1230:	c8 f7       	brcc	.-14     	; 0x1224 <memcmp+0x6>
    1232:	88 1b       	sub	r24, r24
    1234:	99 0b       	sbc	r25, r25
    1236:	08 95       	ret

00001238 <strncpy>:
    1238:	fb 01       	movw	r30, r22
    123a:	dc 01       	movw	r26, r24
    123c:	41 50       	subi	r20, 0x01	; 1
    123e:	50 40       	sbci	r21, 0x00	; 0
    1240:	48 f0       	brcs	.+18     	; 0x1254 <strncpy+0x1c>
    1242:	01 90       	ld	r0, Z+
    1244:	0d 92       	st	X+, r0
    1246:	00 20       	and	r0, r0
    1248:	c9 f7       	brne	.-14     	; 0x123c <strncpy+0x4>
    124a:	01 c0       	rjmp	.+2      	; 0x124e <strncpy+0x16>
    124c:	1d 92       	st	X+, r1
    124e:	41 50       	subi	r20, 0x01	; 1
    1250:	50 40       	sbci	r21, 0x00	; 0
    1252:	e0 f7       	brcc	.-8      	; 0x124c <strncpy+0x14>
    1254:	08 95       	ret

00001256 <_exit>:
    1256:	f8 94       	cli

00001258 <__stop_program>:
    1258:	ff cf       	rjmp	.-2      	; 0x1258 <__stop_program>
