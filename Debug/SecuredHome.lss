
SecuredHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00001336  000013aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000290  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d21  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e89  00000000  00000000  00004455  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001769  00000000  00000000  000052de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000054c  00000000  00000000  00006a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000afe  00000000  00000000  00006f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000017ac  00000000  00000000  00007a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0000923e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 01 04 	call	0x802	; 0x802 <main>
      7a:	0c 94 99 09 	jmp	0x1332	; 0x1332 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <BUZZER_voidInit>:
#include "DIO_interface.h"
#include "BUZZER_interface.h"

void BUZZER_voidInit(u8 copy_u8BuzzerPortId, u8 copy_u8BuzzerPinId) {
	// Set the direction of the buzzer pin as output
	DIO_voidSetPinDirection(copy_u8BuzzerPortId, copy_u8BuzzerPinId, DIO_PIN_OUTPUT);
      82:	41 e0       	ldi	r20, 0x01	; 1
      84:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
      88:	08 95       	ret

0000008a <BUZZER_voidTurnOn>:
}

void BUZZER_voidTurnOn(u8 copy_u8BuzzerPortId, u8 copy_u8BuzzerPinId) {
	// Set the value of the buzzer pin to high to turn it on
	DIO_voidSetPinValue(copy_u8BuzzerPortId, copy_u8BuzzerPinId, DIO_PIN_HIGH);
      8a:	41 e0       	ldi	r20, 0x01	; 1
      8c:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
      90:	08 95       	ret

00000092 <BUZZER_voidTurnOff>:
}

void BUZZER_voidTurnOff(u8 copy_u8BuzzerPortId, u8 copy_u8BuzzerPinId) {
	// Set the value of the buzzer pin to low to turn it off
	DIO_voidSetPinValue(copy_u8BuzzerPortId, copy_u8BuzzerPinId, DIO_PIN_LOW);
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
      98:	08 95       	ret

0000009a <DCMOTOR_voidInit>:
#include "DCMOTOR_config.h"


void DCMOTOR_voidInit(u8 copy_u8MotorId) {
	/* Initialize H-Bridge As Output Pins depending on motor id */
	switch(copy_u8MotorId) {
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	79 f4       	brne	.+30     	; 0xbc <DCMOTOR_voidInit+0x22>
		case DCMOTOR_A:
		DIO_voidSetPinDirection(DCMOTOR_A_IN1_PORT, DCMOTOR_A_IN1_PIN, DIO_PIN_OUTPUT);
      9e:	41 e0       	ldi	r20, 0x01	; 1
      a0:	63 e0       	ldi	r22, 0x03	; 3
      a2:	83 e0       	ldi	r24, 0x03	; 3
      a4:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCMOTOR_A_IN2_PORT, DCMOTOR_A_IN2_PIN, DIO_PIN_OUTPUT);
      a8:	41 e0       	ldi	r20, 0x01	; 1
      aa:	62 e0       	ldi	r22, 0x02	; 2
      ac:	83 e0       	ldi	r24, 0x03	; 3
      ae:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCMOTOR_A_ENABLE_PORT, DCMOTOR_A_ENABLE_PIN, DIO_PIN_OUTPUT);
      b2:	41 e0       	ldi	r20, 0x01	; 1
      b4:	66 e0       	ldi	r22, 0x06	; 6
      b6:	83 e0       	ldi	r24, 0x03	; 3
      b8:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
      bc:	08 95       	ret

000000be <DCMOTOR_voidOn>:
		break;
	}
}

void DCMOTOR_voidOn(u8 copy_u8MotorId, u8 copy_u8MotorDirection) {
	switch(copy_u8MotorId) {
      be:	81 30       	cpi	r24, 0x01	; 1
      c0:	f9 f4       	brne	.+62     	; 0x100 <DCMOTOR_voidOn+0x42>
		case DCMOTOR_A:
		switch(copy_u8MotorDirection) {
      c2:	61 30       	cpi	r22, 0x01	; 1
      c4:	19 f0       	breq	.+6      	; 0xcc <DCMOTOR_voidOn+0xe>
      c6:	62 30       	cpi	r22, 0x02	; 2
      c8:	61 f0       	breq	.+24     	; 0xe2 <DCMOTOR_voidOn+0x24>
      ca:	15 c0       	rjmp	.+42     	; 0xf6 <DCMOTOR_voidOn+0x38>
			case DCMOTOR_CLOCK_WISE:
			DIO_voidSetPinValue(DCMOTOR_A_IN1_PORT, DCMOTOR_A_IN1_PIN, DIO_PIN_HIGH);
      cc:	41 e0       	ldi	r20, 0x01	; 1
      ce:	63 e0       	ldi	r22, 0x03	; 3
      d0:	83 e0       	ldi	r24, 0x03	; 3
      d2:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCMOTOR_A_IN2_PORT, DCMOTOR_A_IN2_PIN, DIO_PIN_LOW);
      d6:	40 e0       	ldi	r20, 0x00	; 0
      d8:	62 e0       	ldi	r22, 0x02	; 2
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
			break;
      e0:	0a c0       	rjmp	.+20     	; 0xf6 <DCMOTOR_voidOn+0x38>
			case DCMOTOR_COUNTER_CLOCK_WISE:
			DIO_voidSetPinValue(DCMOTOR_A_IN1_PORT, DCMOTOR_A_IN1_PIN, DIO_PIN_LOW);
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	63 e0       	ldi	r22, 0x03	; 3
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCMOTOR_A_IN2_PORT, DCMOTOR_A_IN2_PIN, DIO_PIN_HIGH);
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	62 e0       	ldi	r22, 0x02	; 2
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
			break;
		}
		DIO_voidSetPinValue(DCMOTOR_A_ENABLE_PORT, DCMOTOR_A_ENABLE_PIN, DIO_PIN_HIGH);
      f6:	41 e0       	ldi	r20, 0x01	; 1
      f8:	66 e0       	ldi	r22, 0x06	; 6
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     100:	08 95       	ret

00000102 <DCMOTOR_voidOff>:
		break;
	}
}

void DCMOTOR_voidOff(u8 copy_u8MotorId) {
	switch(copy_u8MotorId) {
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	29 f4       	brne	.+10     	; 0x110 <DCMOTOR_voidOff+0xe>
		case DCMOTOR_A:
		DIO_voidSetPinValue(DCMOTOR_A_ENABLE_PORT, DCMOTOR_A_ENABLE_PIN, DIO_PIN_LOW);
     106:	40 e0       	ldi	r20, 0x00	; 0
     108:	66 e0       	ldi	r22, 0x06	; 6
     10a:	83 e0       	ldi	r24, 0x03	; 3
     10c:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     110:	08 95       	ret

00000112 <EEPROM_writeByte>:
		if (buffer[i] == '\0') {
			break;
		}
	}
	buffer[length - 1] = '\0'; // Ensure buffer is null-terminated
}
     112:	e1 99       	sbic	0x1c, 1	; 28
     114:	fe cf       	rjmp	.-4      	; 0x112 <EEPROM_writeByte>
     116:	9f bb       	out	0x1f, r25	; 31
     118:	8e bb       	out	0x1e, r24	; 30
     11a:	6d bb       	out	0x1d, r22	; 29
     11c:	8c b3       	in	r24, 0x1c	; 28
     11e:	84 60       	ori	r24, 0x04	; 4
     120:	8c bb       	out	0x1c, r24	; 28
     122:	8c b3       	in	r24, 0x1c	; 28
     124:	82 60       	ori	r24, 0x02	; 2
     126:	8c bb       	out	0x1c, r24	; 28
     128:	08 95       	ret

0000012a <EEPROM_writeString>:
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	eb 01       	movw	r28, r22
     134:	07 c0       	rjmp	.+14     	; 0x144 <EEPROM_writeString+0x1a>
     136:	21 96       	adiw	r28, 0x01	; 1
     138:	8c 01       	movw	r16, r24
     13a:	0f 5f       	subi	r16, 0xFF	; 255
     13c:	1f 4f       	sbci	r17, 0xFF	; 255
     13e:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_writeByte>
     142:	c8 01       	movw	r24, r16
     144:	68 81       	ld	r22, Y
     146:	61 11       	cpse	r22, r1
     148:	f6 cf       	rjmp	.-20     	; 0x136 <EEPROM_writeString+0xc>
     14a:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_writeByte>
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	08 95       	ret

00000158 <EEPROM_clear>:

void EEPROM_clear(void) {
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
	for (u16 address = 0; address < 1024; ++address) {
     15c:	c0 e0       	ldi	r28, 0x00	; 0
     15e:	d0 e0       	ldi	r29, 0x00	; 0
     160:	05 c0       	rjmp	.+10     	; 0x16c <EEPROM_clear+0x14>
		EEPROM_writeByte(address, 0xFF); // Set each byte to 0xFF (commonly used to denote cleared EEPROM)
     162:	6f ef       	ldi	r22, 0xFF	; 255
     164:	ce 01       	movw	r24, r28
     166:	0e 94 89 00 	call	0x112	; 0x112 <EEPROM_writeByte>
	}
	buffer[length - 1] = '\0'; // Ensure buffer is null-terminated
}

void EEPROM_clear(void) {
	for (u16 address = 0; address < 1024; ++address) {
     16a:	21 96       	adiw	r28, 0x01	; 1
     16c:	c1 15       	cp	r28, r1
     16e:	84 e0       	ldi	r24, 0x04	; 4
     170:	d8 07       	cpc	r29, r24
     172:	b8 f3       	brcs	.-18     	; 0x162 <EEPROM_clear+0xa>
		EEPROM_writeByte(address, 0xFF); // Set each byte to 0xFF (commonly used to denote cleared EEPROM)
	}
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <KPD_voidInit>:


void KPD_voidInit(void){
	
	//Initialize KPD COLS pins As Output Pins
	DIO_voidSetPinDirection(KPD_COL0_PORT, KPD_COL0_PIN, DIO_PIN_OUTPUT);
     17a:	41 e0       	ldi	r20, 0x01	; 1
     17c:	64 e0       	ldi	r22, 0x04	; 4
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL1_PORT, KPD_COL1_PIN, DIO_PIN_OUTPUT);
     184:	41 e0       	ldi	r20, 0x01	; 1
     186:	65 e0       	ldi	r22, 0x05	; 5
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_OUTPUT);
     18e:	41 e0       	ldi	r20, 0x01	; 1
     190:	66 e0       	ldi	r22, 0x06	; 6
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL3_PORT, KPD_COL3_PIN, DIO_PIN_OUTPUT);
     198:	41 e0       	ldi	r20, 0x01	; 1
     19a:	67 e0       	ldi	r22, 0x07	; 7
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	
	
	//Initialize KPD ROWS pins As Input Pins
	DIO_voidSetPinDirection(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_PIN_INPUT);
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	63 e0       	ldi	r22, 0x03	; 3
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_PIN_INPUT);
     1ac:	40 e0       	ldi	r20, 0x00	; 0
     1ae:	64 e0       	ldi	r22, 0x04	; 4
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_PIN_INPUT);
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	65 e0       	ldi	r22, 0x05	; 5
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_PIN_INPUT);
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	66 e0       	ldi	r22, 0x06	; 6
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	
	//Active KDP ROWS Pins Internal Pull Up 
	DIO_voidActivePinInPullUpResistance(KPD_ROW0_PORT, KPD_ROW0_PIN);
     1ca:	63 e0       	ldi	r22, 0x03	; 3
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW1_PORT, KPD_ROW1_PIN);
     1d2:	64 e0       	ldi	r22, 0x04	; 4
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW2_PORT, KPD_ROW2_PIN);
     1da:	65 e0       	ldi	r22, 0x05	; 5
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW3_PORT, KPD_ROW3_PIN); 
     1e2:	66 e0       	ldi	r22, 0x06	; 6
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	0e 94 49 06 	call	0xc92	; 0xc92 <DIO_voidActivePinInPullUpResistance>
     1ea:	08 95       	ret

000001ec <KPD_voidGetValue>:


}
void KPD_voidGetValue(u8* copy_pu8ReturnedValue){
     1ec:	6f 92       	push	r6
     1ee:	7f 92       	push	r7
     1f0:	8f 92       	push	r8
     1f2:	9f 92       	push	r9
     1f4:	af 92       	push	r10
     1f6:	bf 92       	push	r11
     1f8:	cf 92       	push	r12
     1fa:	df 92       	push	r13
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	a1 97       	sbiw	r28, 0x21	; 33
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
	if(copy_pu8ReturnedValue != NULL){
     218:	00 97       	sbiw	r24, 0x00	; 0
     21a:	09 f4       	brne	.+2      	; 0x21e <KPD_voidGetValue+0x32>
     21c:	80 c0       	rjmp	.+256    	; 0x31e <KPD_voidGetValue+0x132>
     21e:	5c 01       	movw	r10, r24
		
		u8 local_u8ColsPorts[4] = {KPD_COL0_PORT,KPD_COL1_PORT,KPD_COL2_PORT,KPD_COL3_PORT};
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	8d 8f       	std	Y+29, r24	; 0x1d
     224:	8e 8f       	std	Y+30, r24	; 0x1e
     226:	8f 8f       	std	Y+31, r24	; 0x1f
     228:	88 a3       	std	Y+32, r24	; 0x20
		u8 local_u8ColsPins [4] = {KPD_COL0_PIN ,KPD_COL1_PIN ,KPD_COL2_PIN ,KPD_COL3_PIN };
     22a:	34 e0       	ldi	r19, 0x04	; 4
     22c:	39 8f       	std	Y+25, r19	; 0x19
     22e:	25 e0       	ldi	r18, 0x05	; 5
     230:	2a 8f       	std	Y+26, r18	; 0x1a
     232:	96 e0       	ldi	r25, 0x06	; 6
     234:	9b 8f       	std	Y+27, r25	; 0x1b
     236:	87 e0       	ldi	r24, 0x07	; 7
     238:	8c 8f       	std	Y+28, r24	; 0x1c
		u8 local_u8RowsPorts[4] = {KPD_ROW0_PORT,KPD_ROW1_PORT,KPD_ROW2_PORT,KPD_ROW3_PORT};
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	8d 8b       	std	Y+21, r24	; 0x15
     23e:	8e 8b       	std	Y+22, r24	; 0x16
     240:	8f 8b       	std	Y+23, r24	; 0x17
     242:	88 8f       	std	Y+24, r24	; 0x18
		u8 local_u8RowsPins [4] = {KPD_ROW0_PIN ,KPD_ROW1_PIN ,KPD_ROW2_PIN ,KPD_ROW3_PIN };
     244:	83 e0       	ldi	r24, 0x03	; 3
     246:	89 8b       	std	Y+17, r24	; 0x11
     248:	3a 8b       	std	Y+18, r19	; 0x12
     24a:	2b 8b       	std	Y+19, r18	; 0x13
     24c:	9c 8b       	std	Y+20, r25	; 0x14
			
		u8 local_u8Keys[4][4] = KPD_KEYS;
     24e:	80 e1       	ldi	r24, 0x10	; 16
     250:	e0 e6       	ldi	r30, 0x60	; 96
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	de 01       	movw	r26, r28
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	8a 95       	dec	r24
     25e:	e1 f7       	brne	.-8      	; 0x258 <KPD_voidGetValue+0x6c>
		
		u8 local_u8ColsCounter, local_u8RowsCounter;
		u8 local_u8RowValue;
		*copy_pu8ReturnedValue = KPD_NOT_PRESSED;
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	f5 01       	movw	r30, r10
     264:	80 83       	st	Z, r24
			
		for(local_u8ColsCounter= 0 ; local_u8ColsCounter<4; local_u8ColsCounter++){
     266:	81 2c       	mov	r8, r1
     268:	56 c0       	rjmp	.+172    	; 0x316 <KPD_voidGetValue+0x12a>
			// Activate Each Columns
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_LOW);
     26a:	c8 2c       	mov	r12, r8
     26c:	d1 2c       	mov	r13, r1
     26e:	e9 e1       	ldi	r30, 0x19	; 25
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	ec 0f       	add	r30, r28
     274:	fd 1f       	adc	r31, r29
     276:	ec 0d       	add	r30, r12
     278:	fd 1d       	adc	r31, r13
     27a:	60 80       	ld	r6, Z
     27c:	ed e1       	ldi	r30, 0x1D	; 29
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ec 0f       	add	r30, r28
     282:	fd 1f       	adc	r31, r29
     284:	ec 0d       	add	r30, r12
     286:	fd 1d       	adc	r31, r13
     288:	70 80       	ld	r7, Z
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	66 2d       	mov	r22, r6
     28e:	87 2d       	mov	r24, r7
     290:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
			
			//Read Each Row 
			for(local_u8RowsCounter=0;local_u8RowsCounter<4;local_u8RowsCounter++)
     294:	10 e0       	ldi	r17, 0x00	; 0
     296:	37 c0       	rjmp	.+110    	; 0x306 <KPD_voidGetValue+0x11a>
			{
				//Read Each Row
				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter],
     298:	e1 2e       	mov	r14, r17
     29a:	f1 2c       	mov	r15, r1
     29c:	e1 e1       	ldi	r30, 0x11	; 17
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	ec 0f       	add	r30, r28
     2a2:	fd 1f       	adc	r31, r29
     2a4:	ee 0d       	add	r30, r14
     2a6:	ff 1d       	adc	r31, r15
     2a8:	00 81       	ld	r16, Z
     2aa:	e5 e1       	ldi	r30, 0x15	; 21
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	ec 0f       	add	r30, r28
     2b0:	fd 1f       	adc	r31, r29
     2b2:	ee 0d       	add	r30, r14
     2b4:	ff 1d       	adc	r31, r15
     2b6:	90 80       	ld	r9, Z
     2b8:	ae 01       	movw	r20, r28
     2ba:	4f 5d       	subi	r20, 0xDF	; 223
     2bc:	5f 4f       	sbci	r21, 0xFF	; 255
     2be:	60 2f       	mov	r22, r16
     2c0:	89 2d       	mov	r24, r9
     2c2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <DIO_voidGetPinValue>
				&local_u8RowValue);
				
				//Is pressed?
				if(0 == local_u8RowValue)
     2c6:	89 a1       	ldd	r24, Y+33	; 0x21
     2c8:	81 11       	cpse	r24, r1
     2ca:	1c c0       	rjmp	.+56     	; 0x304 <KPD_voidGetValue+0x118>
     2cc:	07 c0       	rjmp	.+14     	; 0x2dc <KPD_voidGetValue+0xf0>
				{
					while(0 == local_u8RowValue)
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter],&local_u8RowValue);
     2ce:	ae 01       	movw	r20, r28
     2d0:	4f 5d       	subi	r20, 0xDF	; 223
     2d2:	5f 4f       	sbci	r21, 0xFF	; 255
     2d4:	60 2f       	mov	r22, r16
     2d6:	89 2d       	mov	r24, r9
     2d8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <DIO_voidGetPinValue>
				&local_u8RowValue);
				
				//Is pressed?
				if(0 == local_u8RowValue)
				{
					while(0 == local_u8RowValue)
     2dc:	89 a1       	ldd	r24, Y+33	; 0x21
     2de:	88 23       	and	r24, r24
     2e0:	b1 f3       	breq	.-20     	; 0x2ce <KPD_voidGetValue+0xe2>
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter],&local_u8RowValue);
					}
					*copy_pu8ReturnedValue = local_u8Keys[local_u8RowsCounter][local_u8ColsCounter];
     2e2:	ee 0c       	add	r14, r14
     2e4:	ff 1c       	adc	r15, r15
     2e6:	ee 0c       	add	r14, r14
     2e8:	ff 1c       	adc	r15, r15
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	8c 0f       	add	r24, r28
     2f0:	9d 1f       	adc	r25, r29
     2f2:	e8 0e       	add	r14, r24
     2f4:	f9 1e       	adc	r15, r25
     2f6:	f7 01       	movw	r30, r14
     2f8:	ec 0d       	add	r30, r12
     2fa:	fd 1d       	adc	r31, r13
     2fc:	80 81       	ld	r24, Z
     2fe:	f5 01       	movw	r30, r10
     300:	80 83       	st	Z, r24
     302:	0d c0       	rjmp	.+26     	; 0x31e <KPD_voidGetValue+0x132>
		for(local_u8ColsCounter= 0 ; local_u8ColsCounter<4; local_u8ColsCounter++){
			// Activate Each Columns
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_LOW);
			
			//Read Each Row 
			for(local_u8RowsCounter=0;local_u8RowsCounter<4;local_u8RowsCounter++)
     304:	1f 5f       	subi	r17, 0xFF	; 255
     306:	14 30       	cpi	r17, 0x04	; 4
     308:	38 f2       	brcs	.-114    	; 0x298 <KPD_voidGetValue+0xac>
					return;
				}
			}

			// Deactivate current Columns
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_HIGH);
     30a:	41 e0       	ldi	r20, 0x01	; 1
     30c:	66 2d       	mov	r22, r6
     30e:	87 2d       	mov	r24, r7
     310:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
		
		u8 local_u8ColsCounter, local_u8RowsCounter;
		u8 local_u8RowValue;
		*copy_pu8ReturnedValue = KPD_NOT_PRESSED;
			
		for(local_u8ColsCounter= 0 ; local_u8ColsCounter<4; local_u8ColsCounter++){
     314:	83 94       	inc	r8
     316:	f3 e0       	ldi	r31, 0x03	; 3
     318:	f8 15       	cp	r31, r8
     31a:	08 f0       	brcs	.+2      	; 0x31e <KPD_voidGetValue+0x132>
     31c:	a6 cf       	rjmp	.-180    	; 0x26a <KPD_voidGetValue+0x7e>
		}
	}
	else{
		//return Error State
	}
     31e:	a1 96       	adiw	r28, 0x21	; 33
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	bf 90       	pop	r11
     33c:	af 90       	pop	r10
     33e:	9f 90       	pop	r9
     340:	8f 90       	pop	r8
     342:	7f 90       	pop	r7
     344:	6f 90       	pop	r6
     346:	08 95       	ret

00000348 <PRV_voidWriteHalfPort>:

//void LCD_voidShift(u8 copy_u8shifttingDirection);

//void LCD_voidGoToSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position);

static void PRV_voidWriteHalfPort(u8 copy_u8Value){
     348:	cf 93       	push	r28
     34a:	c8 2f       	mov	r28, r24
	if (1 == GET_BIT(copy_u8Value,0)){
     34c:	80 ff       	sbrs	r24, 0
     34e:	06 c0       	rjmp	.+12     	; 0x35c <PRV_voidWriteHalfPort+0x14>
		DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN, DIO_PIN_HIGH);
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	64 e0       	ldi	r22, 0x04	; 4
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     35a:	05 c0       	rjmp	.+10     	; 0x366 <PRV_voidWriteHalfPort+0x1e>
	}
	else{
		DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN, DIO_PIN_LOW);
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	64 e0       	ldi	r22, 0x04	; 4
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	}
	if (1 == GET_BIT(copy_u8Value,1)){
     366:	c1 ff       	sbrs	r28, 1
     368:	06 c0       	rjmp	.+12     	; 0x376 <PRV_voidWriteHalfPort+0x2e>
		DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN, DIO_PIN_HIGH);
     36a:	41 e0       	ldi	r20, 0x01	; 1
     36c:	65 e0       	ldi	r22, 0x05	; 5
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     374:	05 c0       	rjmp	.+10     	; 0x380 <PRV_voidWriteHalfPort+0x38>
	}
	else{
		DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN, DIO_PIN_LOW);
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	65 e0       	ldi	r22, 0x05	; 5
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	}
	if (1 == GET_BIT(copy_u8Value,2)){
     380:	c2 ff       	sbrs	r28, 2
     382:	06 c0       	rjmp	.+12     	; 0x390 <PRV_voidWriteHalfPort+0x48>
		DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN, DIO_PIN_HIGH);
     384:	41 e0       	ldi	r20, 0x01	; 1
     386:	66 e0       	ldi	r22, 0x06	; 6
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     38e:	05 c0       	rjmp	.+10     	; 0x39a <PRV_voidWriteHalfPort+0x52>
	}
	else{
		DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN, DIO_PIN_LOW);
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	66 e0       	ldi	r22, 0x06	; 6
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	}
	if (1 == GET_BIT(copy_u8Value,3)){
     39a:	c3 ff       	sbrs	r28, 3
     39c:	06 c0       	rjmp	.+12     	; 0x3aa <PRV_voidWriteHalfPort+0x62>
		DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN, DIO_PIN_HIGH);
     39e:	41 e0       	ldi	r20, 0x01	; 1
     3a0:	67 e0       	ldi	r22, 0x07	; 7
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <PRV_voidWriteHalfPort+0x6c>
	}
	else{
		DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN, DIO_PIN_LOW);
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	67 e0       	ldi	r22, 0x07	; 7
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	}
}
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <LCD_voidSendCommand>:
	LCD_voidSendCommand(0b00000110);
	
	

}
void LCD_voidSendCommand(u8 copy_u8Cmnd){
     3b8:	cf 93       	push	r28
     3ba:	c8 2f       	mov	r28, r24
	// Set RS pin = 0 (data/command)
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN , DIO_PIN_LOW);
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	
	// Set RW pin = 0 (write)
	DIO_voidSetPinValue(LCD_RW_PORT, LCD_RW_PIN , DIO_PIN_LOW);
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	 
	//Write The Most 4 bits of data on Data Pins
	PRV_voidWriteHalfPort(copy_u8Cmnd>>4);
     3d0:	8c 2f       	mov	r24, r28
     3d2:	82 95       	swap	r24
     3d4:	8f 70       	andi	r24, 0x0F	; 15
     3d6:	0e 94 a4 01 	call	0x348	; 0x348 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low 
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	63 e0       	ldi	r22, 0x03	; 3
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e4:	8f e9       	ldi	r24, 0x9F	; 159
     3e6:	9f e0       	ldi	r25, 0x0F	; 15
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCD_voidSendCommand+0x30>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <LCD_voidSendCommand+0x36>
     3ee:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	63 e0       	ldi	r22, 0x03	; 3
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	
	//Write The Least 4 bits of data on Data Pins 
	PRV_voidWriteHalfPort(copy_u8Cmnd);
     3fa:	8c 2f       	mov	r24, r28
     3fc:	0e 94 a4 01 	call	0x348	; 0x348 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     400:	41 e0       	ldi	r20, 0x01	; 1
     402:	63 e0       	ldi	r22, 0x03	; 3
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     40a:	8f e9       	ldi	r24, 0x9F	; 159
     40c:	9f e0       	ldi	r25, 0x0F	; 15
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     414:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	63 e0       	ldi	r22, 0x03	; 3
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	 
}
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h" 

void LCD_voidInit (void){
	//Initialize LCD Pins As Output Pins
	DIO_voidSetPinDirection(LCD_RS_PORT, LCD_RS_PIN,DIO_PIN_OUTPUT);
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT, LCD_RW_PIN,DIO_PIN_OUTPUT);
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	62 e0       	ldi	r22, 0x02	; 2
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT , LCD_E_PIN ,DIO_PIN_OUTPUT);
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	63 e0       	ldi	r22, 0x03	; 3
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D4_PORT, LCD_D4_PIN,DIO_PIN_OUTPUT);	
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	64 e0       	ldi	r22, 0x04	; 4
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D5_PORT, LCD_D5_PIN,DIO_PIN_OUTPUT);
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	65 e0       	ldi	r22, 0x05	; 5
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D6_PORT, LCD_D6_PIN,DIO_PIN_OUTPUT);
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	66 e0       	ldi	r22, 0x06	; 6
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D7_PORT, LCD_D7_PIN,DIO_PIN_OUTPUT);
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	67 e0       	ldi	r22, 0x07	; 7
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
     46a:	2f e7       	ldi	r18, 0x7F	; 127
     46c:	85 eb       	ldi	r24, 0xB5	; 181
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	21 50       	subi	r18, 0x01	; 1
     472:	80 40       	sbci	r24, 0x00	; 0
     474:	90 40       	sbci	r25, 0x00	; 0
     476:	e1 f7       	brne	.-8      	; 0x470 <LCD_voidInit+0x4c>
     478:	00 c0       	rjmp	.+0      	; 0x47a <LCD_voidInit+0x56>
     47a:	00 00       	nop
	
	
	_delay_ms(35);
	// Function set command  
	// Set RS pin = 0 (command)
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN , DIO_PIN_LOW);
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	
	// Set RS pin = 0 (write)
	DIO_voidSetPinValue(LCD_RW_PORT, LCD_RW_PIN , DIO_PIN_LOW);
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	62 e0       	ldi	r22, 0x02	; 2
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	
	PRV_voidWriteHalfPort(0b0010);
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	0e 94 a4 01 	call	0x348	; 0x348 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	63 e0       	ldi	r22, 0x03	; 3
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     4a0:	8f e9       	ldi	r24, 0x9F	; 159
     4a2:	9f e0       	ldi	r25, 0x0F	; 15
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <LCD_voidInit+0x80>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <LCD_voidInit+0x86>
     4aa:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	63 e0       	ldi	r22, 0x03	; 3
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	
	LCD_voidSendCommand(0b00101000);
     4b6:	88 e2       	ldi	r24, 0x28	; 40
     4b8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4bc:	90 ef       	ldi	r25, 0xF0	; 240
     4be:	9a 95       	dec	r25
     4c0:	f1 f7       	brne	.-4      	; 0x4be <LCD_voidInit+0x9a>
	_delay_us(45);	
	
	//Display on off Control (DisplayOn, Cursor on, Blink on)
	LCD_voidSendCommand(0b00001111);
     4c2:	8f e0       	ldi	r24, 0x0F	; 15
     4c4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
     4c8:	20 ef       	ldi	r18, 0xF0	; 240
     4ca:	2a 95       	dec	r18
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <LCD_voidInit+0xa6>
	_delay_us(45);
		
	//Display clear 
	LCD_voidSendCommand(0b00000001);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d4:	8f e3       	ldi	r24, 0x3F	; 63
     4d6:	9f e1       	ldi	r25, 0x1F	; 31
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_voidInit+0xb4>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCD_voidInit+0xba>
     4de:	00 00       	nop
	_delay_ms(2);
	
	//set Entry Mode (Increment on, Shift off)
	LCD_voidSendCommand(0b00000110);
     4e0:	86 e0       	ldi	r24, 0x06	; 6
     4e2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
     4e6:	08 95       	ret

000004e8 <LCD_voidDisplayChar>:
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
	 
}

void LCD_voidDisplayChar(u8 copy_u8Data){
     4e8:	cf 93       	push	r28
     4ea:	c8 2f       	mov	r28, r24
	// Set RS pin = 0 (data/command)
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN , DIO_PIN_HIGH);
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	
	// Set RW pin = 0 (write)
	DIO_voidSetPinValue(LCD_RW_PORT, LCD_RW_PIN , DIO_PIN_LOW);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	62 e0       	ldi	r22, 0x02	; 2
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	
	//Write The Most 4 bits of data on Data Pins
	PRV_voidWriteHalfPort(copy_u8Data>>4);
     500:	8c 2f       	mov	r24, r28
     502:	82 95       	swap	r24
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	0e 94 a4 01 	call	0x348	; 0x348 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	63 e0       	ldi	r22, 0x03	; 3
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     514:	8f e9       	ldi	r24, 0x9F	; 159
     516:	9f e0       	ldi	r25, 0x0F	; 15
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_voidDisplayChar+0x30>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_voidDisplayChar+0x36>
     51e:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	63 e0       	ldi	r22, 0x03	; 3
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
	
	//Write The Least 4 bits of data on Data Pins
	PRV_voidWriteHalfPort(copy_u8Data);
     52a:	8c 2f       	mov	r24, r28
     52c:	0e 94 a4 01 	call	0x348	; 0x348 <PRV_voidWriteHalfPort>
	
	//Enable Pulse // High => Low
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_HIGH);
     530:	41 e0       	ldi	r20, 0x01	; 1
     532:	63 e0       	ldi	r22, 0x03	; 3
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     53a:	8f e9       	ldi	r24, 0x9F	; 159
     53c:	9f e0       	ldi	r25, 0x0F	; 15
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <LCD_voidDisplayChar+0x56>
     542:	00 c0       	rjmp	.+0      	; 0x544 <LCD_voidDisplayChar+0x5c>
     544:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN, DIO_PIN_LOW);
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	63 e0       	ldi	r22, 0x03	; 3
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
}
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <LCD_voidDisplayString>:

void LCD_voidDisplayString(u8* copy_pu8String)
{
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
	if(copy_pu8String!=NULL)
     55a:	00 97       	sbiw	r24, 0x00	; 0
     55c:	29 f4       	brne	.+10     	; 0x568 <LCD_voidDisplayString+0x14>
     55e:	0c c0       	rjmp	.+24     	; 0x578 <LCD_voidDisplayString+0x24>
	{
		u8 local_u8Counter=0;
		while(copy_pu8String[local_u8Counter]!='\0')
		{
			LCD_voidDisplayChar(copy_pu8String[local_u8Counter]);
     560:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_voidDisplayChar>
			local_u8Counter++;
     564:	cf 5f       	subi	r28, 0xFF	; 255
     566:	02 c0       	rjmp	.+4      	; 0x56c <LCD_voidDisplayString+0x18>
     568:	8c 01       	movw	r16, r24
     56a:	c0 e0       	ldi	r28, 0x00	; 0
void LCD_voidDisplayString(u8* copy_pu8String)
{
	if(copy_pu8String!=NULL)
	{
		u8 local_u8Counter=0;
		while(copy_pu8String[local_u8Counter]!='\0')
     56c:	f8 01       	movw	r30, r16
     56e:	ec 0f       	add	r30, r28
     570:	f1 1d       	adc	r31, r1
     572:	80 81       	ld	r24, Z
     574:	81 11       	cpse	r24, r1
     576:	f4 cf       	rjmp	.-24     	; 0x560 <LCD_voidDisplayString+0xc>
	}
	else
	{
		// return Error state
	}
}
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <LED_voidInit>:



void LED_voidInit(u8 led_port, u8 led_pin) {
	// Set the direction of the LED pin as output
	DIO_voidSetPinDirection(led_port, led_pin, DIO_PIN_OUTPUT);
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>
     586:	08 95       	ret

00000588 <LED_voidTurnOn>:
}

void LED_voidTurnOn(u8 led_port, u8 led_pin) {
	// Set the value of the LED pin to high to turn it on
	DIO_voidSetPinValue(led_port, led_pin, DIO_PIN_HIGH);
     588:	41 e0       	ldi	r20, 0x01	; 1
     58a:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     58e:	08 95       	ret

00000590 <LED_voidTurnOff>:
}

void LED_voidTurnOff(u8 led_port, u8 led_pin) {
	// Set the value of the LED pin to low to turn it off
	DIO_voidSetPinValue(led_port, led_pin, DIO_PIN_LOW);
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	0e 94 91 05 	call	0xb22	; 0xb22 <DIO_voidSetPinValue>
     596:	08 95       	ret

00000598 <SRVM_voidInit>:


void SRVM_voidInit(void)
{
	// set OC1A as Output pin
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
     598:	41 e0       	ldi	r20, 0x01	; 1
     59a:	65 e0       	ldi	r22, 0x05	; 5
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	0e 94 1a 05 	call	0xa34	; 0xa34 <DIO_voidSetPinDirection>

	/* PWM init ch1 at pwm mode 14 */
	PWM_voidInitChannel_1A();
     5a2:	0e 94 81 06 	call	0xd02	; 0xd02 <PWM_voidInitChannel_1A>
     5a6:	08 95       	ret

000005a8 <SRVM_voidOn>:
}


void SRVM_voidOn(u8 copy_u8Angle)
{
	f32 local_f32Duty = (((copy_u8Angle + 90)/180.0)*5) + 5;
     5a8:	68 2f       	mov	r22, r24
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	66 5a       	subi	r22, 0xA6	; 166
     5ae:	7f 4f       	sbci	r23, 0xFF	; 255
     5b0:	07 2e       	mov	r0, r23
     5b2:	00 0c       	add	r0, r0
     5b4:	88 0b       	sbc	r24, r24
     5b6:	99 0b       	sbc	r25, r25
     5b8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__floatsisf>
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	44 e3       	ldi	r20, 0x34	; 52
     5c2:	53 e4       	ldi	r21, 0x43	; 67
     5c4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__divsf3>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 ea       	ldi	r20, 0xA0	; 160
     5ce:	50 e4       	ldi	r21, 0x40	; 64
     5d0:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsf3>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 ea       	ldi	r20, 0xA0	; 160
     5da:	50 e4       	ldi	r21, 0x40	; 64
     5dc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__addsf3>

	/* Set pwm fre. = 50, duty cycle between 5 : 10 depend on desired angle[0 : 180] */
	PWM_voidGenerate_PWM_Channel_1A(local_f32Duty, SRVM_DESIRED_FREQUENCY);
     5e0:	0e 94 20 08 	call	0x1040	; 0x1040 <__fixunssfsi>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	68 e4       	ldi	r22, 0x48	; 72
     5ee:	72 e4       	ldi	r23, 0x42	; 66
     5f0:	0e 94 94 06 	call	0xd28	; 0xd28 <PWM_voidGenerate_PWM_Channel_1A>
     5f4:	08 95       	ret

000005f6 <SRVM_voidOff>:


void SRVM_voidOff(void)
{
	/* PWM ch1 stop */
	PWM_voidStopChannel_1A();
     5f6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <PWM_voidStopChannel_1A>
     5fa:	08 95       	ret

000005fc <setPassword>:

#define PASSWORD_LENGTH 4 // Assuming the password length is 4 digits
#define MAX_TRIALS      3   // Maximum number of password entry trials


void setPassword(){
     5fc:	cf 92       	push	r12
     5fe:	df 92       	push	r13
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	2b 97       	sbiw	r28, 0x0b	; 11
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
	char password[PASSWORD_LENGTH + 1]; // Array to store the password (+1 for null terminator)
	char input_password[PASSWORD_LENGTH + 1]; // Array to store the user input password
	int i, trials = 0, trailNumber = 0;
	BOOL password_set = false;
	UART_voidTxChar(password);
     61c:	8e 01       	movw	r16, r28
     61e:	0f 5f       	subi	r16, 0xFF	; 255
     620:	1f 4f       	sbci	r17, 0xFF	; 255
     622:	80 2f       	mov	r24, r16
     624:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_voidTxChar>
	// Check if the initializations are successful
	LCD_voidSendCommand(0x01); // Clear Display
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
	LCD_voidDisplayString("Init Done");
     62e:	80 e7       	ldi	r24, 0x70	; 112
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>
     636:	2f ef       	ldi	r18, 0xFF	; 255
     638:	87 ea       	ldi	r24, 0xA7	; 167
     63a:	91 e6       	ldi	r25, 0x61	; 97
     63c:	21 50       	subi	r18, 0x01	; 1
     63e:	80 40       	sbci	r24, 0x00	; 0
     640:	90 40       	sbci	r25, 0x00	; 0
     642:	e1 f7       	brne	.-8      	; 0x63c <setPassword+0x40>
     644:	00 c0       	rjmp	.+0      	; 0x646 <setPassword+0x4a>
     646:	00 00       	nop
	_delay_ms(2000);

	// Ask the user to set the password
	LCD_voidSendCommand(0x01); // Clear Display
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
	LCD_voidDisplayString("Set password:");
     64e:	8a e7       	ldi	r24, 0x7A	; 122
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>
	
	UART_voidRxString(password);
     656:	c8 01       	movw	r24, r16
     658:	0e 94 21 07 	call	0xe42	; 0xe42 <UART_voidRxString>
	
	UART_voidTxString((u8 *)"Password set successfully");
     65c:	88 e8       	ldi	r24, 0x88	; 136
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 0b 07 	call	0xe16	; 0xe16 <UART_voidTxString>
	password_set = true;

	// Save password to EEPROM
	EEPROM_writeString(0x00, password);
     664:	b8 01       	movw	r22, r16
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 95 00 	call	0x12a	; 0x12a <EEPROM_writeString>


void setPassword(){
	char password[PASSWORD_LENGTH + 1]; // Array to store the password (+1 for null terminator)
	char input_password[PASSWORD_LENGTH + 1]; // Array to store the user input password
	int i, trials = 0, trailNumber = 0;
     66e:	c1 2c       	mov	r12, r1
     670:	d1 2c       	mov	r13, r1
     672:	e1 2c       	mov	r14, r1
     674:	f1 2c       	mov	r15, r1
	// Save password to EEPROM
	EEPROM_writeString(0x00, password);
	
	while (1) {
		// Clear display
		LCD_voidSendCommand(0x01); // Clear Display
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>

		if (password_set) {
			// Ask the user to enter the password to unlock the door
			LCD_voidDisplayString("Enter password:");
     67c:	82 ea       	ldi	r24, 0xA2	; 162
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>

			// Getting the password from the user
			for (i = 0; i < PASSWORD_LENGTH; ++i) {
     684:	00 e0       	ldi	r16, 0x00	; 0
     686:	10 e0       	ldi	r17, 0x00	; 0
     688:	13 c0       	rjmp	.+38     	; 0x6b0 <setPassword+0xb4>
				char key;
				do {
					KPD_voidGetValue(&key);
     68a:	ce 01       	movw	r24, r28
     68c:	0b 96       	adiw	r24, 0x0b	; 11
     68e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <KPD_voidGetValue>
				} while (key == KPD_NOT_PRESSED); // Wait until a key is pressed
     692:	8b 85       	ldd	r24, Y+11	; 0x0b
     694:	8f 3f       	cpi	r24, 0xFF	; 255
     696:	c9 f3       	breq	.-14     	; 0x68a <setPassword+0x8e>

				input_password[i] = key;
     698:	e6 e0       	ldi	r30, 0x06	; 6
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	ec 0f       	add	r30, r28
     69e:	fd 1f       	adc	r31, r29
     6a0:	e0 0f       	add	r30, r16
     6a2:	f1 1f       	adc	r31, r17
     6a4:	80 83       	st	Z, r24
				LCD_voidDisplayChar('*'); // Display '*' instead of actual digits
     6a6:	8a e2       	ldi	r24, 0x2A	; 42
     6a8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_voidDisplayChar>
		if (password_set) {
			// Ask the user to enter the password to unlock the door
			LCD_voidDisplayString("Enter password:");

			// Getting the password from the user
			for (i = 0; i < PASSWORD_LENGTH; ++i) {
     6ac:	0f 5f       	subi	r16, 0xFF	; 255
     6ae:	1f 4f       	sbci	r17, 0xFF	; 255
     6b0:	04 30       	cpi	r16, 0x04	; 4
     6b2:	11 05       	cpc	r17, r1
     6b4:	54 f3       	brlt	.-44     	; 0x68a <setPassword+0x8e>
				} while (key == KPD_NOT_PRESSED); // Wait until a key is pressed

				input_password[i] = key;
				LCD_voidDisplayChar('*'); // Display '*' instead of actual digits
			}
			input_password[PASSWORD_LENGTH] = '\0'; // Null terminate the input password
     6b6:	1a 86       	std	Y+10, r1	; 0x0a

			// Check if the entered password matches the stored password
			if (strcmp(password, input_password) == 0) {
     6b8:	be 01       	movw	r22, r28
     6ba:	6a 5f       	subi	r22, 0xFA	; 250
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	ce 01       	movw	r24, r28
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	0e 94 90 09 	call	0x1320	; 0x1320 <strcmp>
     6c6:	89 2b       	or	r24, r25
     6c8:	c9 f5       	brne	.+114    	; 0x73c <setPassword+0x140>
				// Correct password entered, display "Door opened!" and exit the loop
				LCD_voidSendCommand(0x01); // Clear Display
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
				LCD_voidDisplayString("Door opened!");
     6d0:	82 eb       	ldi	r24, 0xB2	; 178
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>

				// Turn on the LED
				LED_voidTurnOn(DIO_PORTD, DIO_PIN7);
     6d8:	67 e0       	ldi	r22, 0x07	; 7
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	0e 94 c4 02 	call	0x588	; 0x588 <LED_voidTurnOn>
     6e0:	2f ef       	ldi	r18, 0xFF	; 255
     6e2:	83 e2       	ldi	r24, 0x23	; 35
     6e4:	94 ef       	ldi	r25, 0xF4	; 244
     6e6:	21 50       	subi	r18, 0x01	; 1
     6e8:	80 40       	sbci	r24, 0x00	; 0
     6ea:	90 40       	sbci	r25, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <setPassword+0xea>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <setPassword+0xf4>
     6f0:	00 00       	nop
				_delay_ms(5000);

				// Turn off the LED
				LED_voidTurnOff(DIO_PORTD, DIO_PIN7);
     6f2:	67 e0       	ldi	r22, 0x07	; 7
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	0e 94 c8 02 	call	0x590	; 0x590 <LED_voidTurnOff>

				// Turn the servo motor to open the door
				SRVM_voidOn(90); // Adjust the angle as needed to represent door opening
     6fa:	8a e5       	ldi	r24, 0x5A	; 90
     6fc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SRVM_voidOn>
     700:	2f ef       	ldi	r18, 0xFF	; 255
     702:	83 e2       	ldi	r24, 0x23	; 35
     704:	94 ef       	ldi	r25, 0xF4	; 244
     706:	21 50       	subi	r18, 0x01	; 1
     708:	80 40       	sbci	r24, 0x00	; 0
     70a:	90 40       	sbci	r25, 0x00	; 0
     70c:	e1 f7       	brne	.-8      	; 0x706 <setPassword+0x10a>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <setPassword+0x114>
     710:	00 00       	nop
				_delay_ms(5000); // Keep the servo in the open position for 5 seconds
				SRVM_voidOff();
     712:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SRVM_voidOff>
				
				// Turn on the motor
				DCMOTOR_voidOn(DCMOTOR_A, DCMOTOR_CLOCK_WISE);
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 5f 00 	call	0xbe	; 0xbe <DCMOTOR_voidOn>
     71e:	2f ef       	ldi	r18, 0xFF	; 255
     720:	83 e2       	ldi	r24, 0x23	; 35
     722:	94 ef       	ldi	r25, 0xF4	; 244
     724:	21 50       	subi	r18, 0x01	; 1
     726:	80 40       	sbci	r24, 0x00	; 0
     728:	90 40       	sbci	r25, 0x00	; 0
     72a:	e1 f7       	brne	.-8      	; 0x724 <setPassword+0x128>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <setPassword+0x132>
     72e:	00 00       	nop
				_delay_ms(5000); // Keep the motor running for 5 seconds

				// Turn off the motor
				DCMOTOR_voidOff(DCMOTOR_A);
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	0e 94 81 00 	call	0x102	; 0x102 <DCMOTOR_voidOff>
				// Reset EEPROM after the door is locked
				EEPROM_clear();
     736:	0e 94 ac 00 	call	0x158	; 0x158 <EEPROM_clear>

				break;
     73a:	54 c0       	rjmp	.+168    	; 0x7e4 <setPassword+0x1e8>
				} else {
				// Incorrect password entered
				trials++;
     73c:	2f ef       	ldi	r18, 0xFF	; 255
     73e:	e2 1a       	sub	r14, r18
     740:	f2 0a       	sbc	r15, r18

				if (trials >= MAX_TRIALS) {
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	e8 16       	cp	r14, r24
     746:	f1 04       	cpc	r15, r1
     748:	64 f1       	brlt	.+88     	; 0x7a2 <setPassword+0x1a6>
					// Maximum trials reached, display "Locked!" and exit the loop
					LCD_voidSendCommand(0x01); // Clear Display
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
					LCD_voidDisplayString("Locked!");
     750:	8f eb       	ldi	r24, 0xBF	; 191
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>

					//Buzzer (Speaker) on
					BUZZER_voidTurnOn(DIO_PORTA, DIO_PIN3);
     758:	63 e0       	ldi	r22, 0x03	; 3
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 45 00 	call	0x8a	; 0x8a <BUZZER_voidTurnOn>
     760:	9f ef       	ldi	r25, 0xFF	; 255
     762:	23 e2       	ldi	r18, 0x23	; 35
     764:	84 ef       	ldi	r24, 0xF4	; 244
     766:	91 50       	subi	r25, 0x01	; 1
     768:	20 40       	sbci	r18, 0x00	; 0
     76a:	80 40       	sbci	r24, 0x00	; 0
     76c:	e1 f7       	brne	.-8      	; 0x766 <setPassword+0x16a>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <setPassword+0x174>
     770:	00 00       	nop
					_delay_ms(5000);
					//turn off buzzer
					BUZZER_voidTurnOff(DIO_PORTA, DIO_PIN3);
     772:	63 e0       	ldi	r22, 0x03	; 3
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER_voidTurnOff>

					// Turn on the LED
					LED_voidTurnOn(DIO_PORTB, DIO_PIN0);
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 c4 02 	call	0x588	; 0x588 <LED_voidTurnOn>
     782:	9f ef       	ldi	r25, 0xFF	; 255
     784:	23 e2       	ldi	r18, 0x23	; 35
     786:	84 ef       	ldi	r24, 0xF4	; 244
     788:	91 50       	subi	r25, 0x01	; 1
     78a:	20 40       	sbci	r18, 0x00	; 0
     78c:	80 40       	sbci	r24, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <setPassword+0x18c>
     790:	00 c0       	rjmp	.+0      	; 0x792 <setPassword+0x196>
     792:	00 00       	nop
					_delay_ms(5000);

					// Turn off the LED
					LED_voidTurnOff(DIO_PORTB, DIO_PIN0);
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	0e 94 c8 02 	call	0x590	; 0x590 <LED_voidTurnOff>
					setPassword();
     79c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <setPassword>
					break;
     7a0:	21 c0       	rjmp	.+66     	; 0x7e4 <setPassword+0x1e8>
					} else {
					// Display trial number passed and wait for a while before clearing the display
					LCD_voidSendCommand(0x01); // Clear Display
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
					trailNumber++;
     7a8:	9f ef       	ldi	r25, 0xFF	; 255
     7aa:	c9 1a       	sub	r12, r25
     7ac:	d9 0a       	sbc	r13, r25
					if (trailNumber == 1) {
     7ae:	21 e0       	ldi	r18, 0x01	; 1
     7b0:	c2 16       	cp	r12, r18
     7b2:	d1 04       	cpc	r13, r1
     7b4:	29 f4       	brne	.+10     	; 0x7c0 <setPassword+0x1c4>
						LCD_voidDisplayString("One trial passed");
     7b6:	87 ec       	ldi	r24, 0xC7	; 199
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>
     7be:	08 c0       	rjmp	.+16     	; 0x7d0 <setPassword+0x1d4>
						} else if (trailNumber == 2) {
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	c8 16       	cp	r12, r24
     7c4:	d1 04       	cpc	r13, r1
     7c6:	21 f4       	brne	.+8      	; 0x7d0 <setPassword+0x1d4>
						LCD_voidDisplayString("Second trial passed");
     7c8:	88 ed       	ldi	r24, 0xD8	; 216
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>
     7d0:	9f ef       	ldi	r25, 0xFF	; 255
     7d2:	27 ea       	ldi	r18, 0xA7	; 167
     7d4:	81 e6       	ldi	r24, 0x61	; 97
     7d6:	91 50       	subi	r25, 0x01	; 1
     7d8:	20 40       	sbci	r18, 0x00	; 0
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <setPassword+0x1da>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <setPassword+0x1e4>
     7e0:	00 00       	nop
			// Inform the user to set the password first
			LCD_voidDisplayString("Set password first");
			
			break; // Exit the loop as the password needs to be set first
		}
	}
     7e2:	49 cf       	rjmp	.-366    	; 0x676 <setPassword+0x7a>
	
}
     7e4:	2b 96       	adiw	r28, 0x0b	; 11
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <main>:
	
int main(void) {
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	2b 97       	sbiw	r28, 0x0b	; 11
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
	char input_password[PASSWORD_LENGTH + 1]; // Array to store the user input password
	int i, trials = 0, trailNumber = 0;
	BOOL password_set = false;

	// Initialize peripherals
	LCD_voidInit(); // Initialize LCD
     822:	0e 94 12 02 	call	0x424	; 0x424 <LCD_voidInit>
	KPD_voidInit(); // Initialize Keypad
     826:	0e 94 bd 00 	call	0x17a	; 0x17a <KPD_voidInit>
	DCMOTOR_voidInit(DCMOTOR_A); // Initialize DC motor
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	0e 94 4d 00 	call	0x9a	; 0x9a <DCMOTOR_voidInit>
	SRVM_voidInit(); // Initialize Servo motor
     830:	0e 94 cc 02 	call	0x598	; 0x598 <SRVM_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN7); // Initialize LED
     834:	67 e0       	ldi	r22, 0x07	; 7
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	0e 94 c0 02 	call	0x580	; 0x580 <LED_voidInit>
	LED_voidInit(DIO_PORTB, DIO_PIN0); // Initialize LED
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 c0 02 	call	0x580	; 0x580 <LED_voidInit>
	BUZZER_voidInit(DIO_PORTA, DIO_PIN3);
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0e 94 41 00 	call	0x82	; 0x82 <BUZZER_voidInit>
	// Initialize UART
	UART_voidInit();
     84c:	0e 94 ee 06 	call	0xddc	; 0xddc <UART_voidInit>

	// Check if the initializations are successful
	LCD_voidSendCommand(0x01); // Clear Display
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
	LCD_voidDisplayString("Init Done");
     856:	80 e7       	ldi	r24, 0x70	; 112
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>
     85e:	2f ef       	ldi	r18, 0xFF	; 255
     860:	87 ea       	ldi	r24, 0xA7	; 167
     862:	91 e6       	ldi	r25, 0x61	; 97
     864:	21 50       	subi	r18, 0x01	; 1
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	e1 f7       	brne	.-8      	; 0x864 <__stack+0x5>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
     86e:	00 00       	nop
	_delay_ms(2000);

	// Ask the user to set the password
	LCD_voidSendCommand(0x01); // Clear Display
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
	LCD_voidDisplayString("Set password:");
     876:	8a e7       	ldi	r24, 0x7A	; 122
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>
	UART_voidRxString(password);
     87e:	ce 01       	movw	r24, r28
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	0e 94 21 07 	call	0xe42	; 0xe42 <UART_voidRxString>
	UART_voidTxString((u8 *)"Password set successfully");
     886:	88 e8       	ldi	r24, 0x88	; 136
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 0b 07 	call	0xe16	; 0xe16 <UART_voidTxString>
	password_set = true;



	// Save password to EEPROM
	EEPROM_writeString(0x00, password);
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 95 00 	call	0x12a	; 0x12a <EEPROM_writeString>
}
	
int main(void) {
	char password[PASSWORD_LENGTH + 1]; // Array to store the password (+1 for null terminator)
	char input_password[PASSWORD_LENGTH + 1]; // Array to store the user input password
	int i, trials = 0, trailNumber = 0;
     89c:	c1 2c       	mov	r12, r1
     89e:	d1 2c       	mov	r13, r1
     8a0:	e1 2c       	mov	r14, r1
     8a2:	f1 2c       	mov	r15, r1
	// Save password to EEPROM
	EEPROM_writeString(0x00, password);

	while (1) {
		// Clear display
		LCD_voidSendCommand(0x01); // Clear Display
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>

		if (password_set) {
			// Ask the user to enter the password to unlock the door
			LCD_voidDisplayString("Enter password:");
     8aa:	82 ea       	ldi	r24, 0xA2	; 162
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>

			// Getting the password from the user
			for (i = 0; i < PASSWORD_LENGTH; ++i) {
     8b2:	00 e0       	ldi	r16, 0x00	; 0
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	13 c0       	rjmp	.+38     	; 0x8de <__stack+0x7f>
				char key;
				do {
					KPD_voidGetValue(&key);
     8b8:	ce 01       	movw	r24, r28
     8ba:	0b 96       	adiw	r24, 0x0b	; 11
     8bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <KPD_voidGetValue>
				} while (key == KPD_NOT_PRESSED); // Wait until a key is pressed
     8c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c2:	8f 3f       	cpi	r24, 0xFF	; 255
     8c4:	c9 f3       	breq	.-14     	; 0x8b8 <__stack+0x59>

				input_password[i] = key;
     8c6:	e6 e0       	ldi	r30, 0x06	; 6
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ec 0f       	add	r30, r28
     8cc:	fd 1f       	adc	r31, r29
     8ce:	e0 0f       	add	r30, r16
     8d0:	f1 1f       	adc	r31, r17
     8d2:	80 83       	st	Z, r24
				LCD_voidDisplayChar('*'); // Display '*' instead of actual digits
     8d4:	8a e2       	ldi	r24, 0x2A	; 42
     8d6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_voidDisplayChar>
		if (password_set) {
			// Ask the user to enter the password to unlock the door
			LCD_voidDisplayString("Enter password:");

			// Getting the password from the user
			for (i = 0; i < PASSWORD_LENGTH; ++i) {
     8da:	0f 5f       	subi	r16, 0xFF	; 255
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
     8de:	04 30       	cpi	r16, 0x04	; 4
     8e0:	11 05       	cpc	r17, r1
     8e2:	54 f3       	brlt	.-44     	; 0x8b8 <__stack+0x59>
				} while (key == KPD_NOT_PRESSED); // Wait until a key is pressed

				input_password[i] = key;
				LCD_voidDisplayChar('*'); // Display '*' instead of actual digits
			}
			input_password[PASSWORD_LENGTH] = '\0'; // Null terminate the input password
     8e4:	1a 86       	std	Y+10, r1	; 0x0a

			// Check if the entered password matches the stored password
			if (strcmp(password, input_password) == 0) {
     8e6:	be 01       	movw	r22, r28
     8e8:	6a 5f       	subi	r22, 0xFA	; 250
     8ea:	7f 4f       	sbci	r23, 0xFF	; 255
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	0e 94 90 09 	call	0x1320	; 0x1320 <strcmp>
     8f4:	89 2b       	or	r24, r25
     8f6:	c9 f5       	brne	.+114    	; 0x96a <__stack+0x10b>
				// Correct password entered, display "Door opened!" and exit the loop
				LCD_voidSendCommand(0x01); // Clear Display
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
				LCD_voidDisplayString("Door opened!");
     8fe:	82 eb       	ldi	r24, 0xB2	; 178
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>

				// Turn on the LED
				LED_voidTurnOn(DIO_PORTD, DIO_PIN7);
     906:	67 e0       	ldi	r22, 0x07	; 7
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	0e 94 c4 02 	call	0x588	; 0x588 <LED_voidTurnOn>
     90e:	2f ef       	ldi	r18, 0xFF	; 255
     910:	83 e2       	ldi	r24, 0x23	; 35
     912:	94 ef       	ldi	r25, 0xF4	; 244
     914:	21 50       	subi	r18, 0x01	; 1
     916:	80 40       	sbci	r24, 0x00	; 0
     918:	90 40       	sbci	r25, 0x00	; 0
     91a:	e1 f7       	brne	.-8      	; 0x914 <__stack+0xb5>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0xbf>
     91e:	00 00       	nop
				_delay_ms(5000);

				// Turn off the LED
				LED_voidTurnOff(DIO_PORTD, DIO_PIN7);
     920:	67 e0       	ldi	r22, 0x07	; 7
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	0e 94 c8 02 	call	0x590	; 0x590 <LED_voidTurnOff>

				// Turn the servo motor to open the door
				SRVM_voidOn(90); // Adjust the angle as needed to represent door opening
     928:	8a e5       	ldi	r24, 0x5A	; 90
     92a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SRVM_voidOn>
     92e:	2f ef       	ldi	r18, 0xFF	; 255
     930:	83 e2       	ldi	r24, 0x23	; 35
     932:	94 ef       	ldi	r25, 0xF4	; 244
     934:	21 50       	subi	r18, 0x01	; 1
     936:	80 40       	sbci	r24, 0x00	; 0
     938:	90 40       	sbci	r25, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0xd5>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0xdf>
     93e:	00 00       	nop
				_delay_ms(5000); // Keep the servo in the open position for 5 seconds
				SRVM_voidOff();
     940:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SRVM_voidOff>
				
				// Turn on the motor
				DCMOTOR_voidOn(DCMOTOR_A, DCMOTOR_CLOCK_WISE);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 5f 00 	call	0xbe	; 0xbe <DCMOTOR_voidOn>
     94c:	2f ef       	ldi	r18, 0xFF	; 255
     94e:	83 e2       	ldi	r24, 0x23	; 35
     950:	94 ef       	ldi	r25, 0xF4	; 244
     952:	21 50       	subi	r18, 0x01	; 1
     954:	80 40       	sbci	r24, 0x00	; 0
     956:	90 40       	sbci	r25, 0x00	; 0
     958:	e1 f7       	brne	.-8      	; 0x952 <__stack+0xf3>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <__stack+0xfd>
     95c:	00 00       	nop
				_delay_ms(5000); // Keep the motor running for 5 seconds

				// Turn off the motor
				DCMOTOR_voidOff(DCMOTOR_A);
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	0e 94 81 00 	call	0x102	; 0x102 <DCMOTOR_voidOff>

				// Reset EEPROM after the door is locked
				EEPROM_clear();
     964:	0e 94 ac 00 	call	0x158	; 0x158 <EEPROM_clear>

				break;
     968:	54 c0       	rjmp	.+168    	; 0xa12 <__stack+0x1b3>
				} else {
				// Incorrect password entered
				trials++;
     96a:	2f ef       	ldi	r18, 0xFF	; 255
     96c:	e2 1a       	sub	r14, r18
     96e:	f2 0a       	sbc	r15, r18

				if (trials >= MAX_TRIALS) {
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	e8 16       	cp	r14, r24
     974:	f1 04       	cpc	r15, r1
     976:	64 f1       	brlt	.+88     	; 0x9d0 <__stack+0x171>
					// Maximum trials reached, display "Locked!" and exit the loop
					LCD_voidSendCommand(0x01); // Clear Display
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
					LCD_voidDisplayString("Locked!");
     97e:	8f eb       	ldi	r24, 0xBF	; 191
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>

					//Buzzer (Speaker) on
					BUZZER_voidTurnOn(DIO_PORTA, DIO_PIN3);
     986:	63 e0       	ldi	r22, 0x03	; 3
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 45 00 	call	0x8a	; 0x8a <BUZZER_voidTurnOn>
     98e:	9f ef       	ldi	r25, 0xFF	; 255
     990:	23 e2       	ldi	r18, 0x23	; 35
     992:	84 ef       	ldi	r24, 0xF4	; 244
     994:	91 50       	subi	r25, 0x01	; 1
     996:	20 40       	sbci	r18, 0x00	; 0
     998:	80 40       	sbci	r24, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <__stack+0x135>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <__stack+0x13f>
     99e:	00 00       	nop
					_delay_ms(5000);
					//turn off buzzer
					BUZZER_voidTurnOff(DIO_PORTA, DIO_PIN3);
     9a0:	63 e0       	ldi	r22, 0x03	; 3
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER_voidTurnOff>

					// Turn on the LED
					LED_voidTurnOn(DIO_PORTB, DIO_PIN0);
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 c4 02 	call	0x588	; 0x588 <LED_voidTurnOn>
     9b0:	9f ef       	ldi	r25, 0xFF	; 255
     9b2:	23 e2       	ldi	r18, 0x23	; 35
     9b4:	84 ef       	ldi	r24, 0xF4	; 244
     9b6:	91 50       	subi	r25, 0x01	; 1
     9b8:	20 40       	sbci	r18, 0x00	; 0
     9ba:	80 40       	sbci	r24, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <__stack+0x157>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <__stack+0x161>
     9c0:	00 00       	nop
					_delay_ms(5000);

					// Turn off the LED
					LED_voidTurnOff(DIO_PORTB, DIO_PIN0);
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	0e 94 c8 02 	call	0x590	; 0x590 <LED_voidTurnOff>
					setPassword();
     9ca:	0e 94 fe 02 	call	0x5fc	; 0x5fc <setPassword>
					break;
     9ce:	21 c0       	rjmp	.+66     	; 0xa12 <__stack+0x1b3>
					} else {
					// Display trial number passed and wait for a while before clearing the display
					LCD_voidSendCommand(0x01); // Clear Display
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidSendCommand>
					trailNumber++;
     9d6:	9f ef       	ldi	r25, 0xFF	; 255
     9d8:	c9 1a       	sub	r12, r25
     9da:	d9 0a       	sbc	r13, r25
					if (trailNumber == 1) {
     9dc:	21 e0       	ldi	r18, 0x01	; 1
     9de:	c2 16       	cp	r12, r18
     9e0:	d1 04       	cpc	r13, r1
     9e2:	29 f4       	brne	.+10     	; 0x9ee <__stack+0x18f>
						LCD_voidDisplayString("One trial passed");
     9e4:	87 ec       	ldi	r24, 0xC7	; 199
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>
     9ec:	08 c0       	rjmp	.+16     	; 0x9fe <__stack+0x19f>
						} else if (trailNumber == 2) {
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	c8 16       	cp	r12, r24
     9f2:	d1 04       	cpc	r13, r1
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__stack+0x19f>
						LCD_voidDisplayString("Second trial passed");
     9f6:	88 ed       	ldi	r24, 0xD8	; 216
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidDisplayString>
     9fe:	9f ef       	ldi	r25, 0xFF	; 255
     a00:	27 ea       	ldi	r18, 0xA7	; 167
     a02:	81 e6       	ldi	r24, 0x61	; 97
     a04:	91 50       	subi	r25, 0x01	; 1
     a06:	20 40       	sbci	r18, 0x00	; 0
     a08:	80 40       	sbci	r24, 0x00	; 0
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <__stack+0x1a5>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <__stack+0x1af>
     a0e:	00 00       	nop
			// Inform the user to set the password first
				LCD_voidDisplayString("Set password first");
		
				break; // Exit the loop as the password needs to be set first
		}
	}
     a10:	49 cf       	rjmp	.-366    	; 0x8a4 <__stack+0x45>

	return 0;
}
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	2b 96       	adiw	r28, 0x0b	; 11
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	df 90       	pop	r13
     a30:	cf 90       	pop	r12
     a32:	08 95       	ret

00000a34 <DIO_voidSetPinDirection>:
				break;
				case DIO_PORTC:
					TOG_BIT(PORTC_REG, copy_u8PinId);
				break;
				case DIO_PORTD:
					TOG_BIT(PORTD_REG, copy_u8PinId);
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	19 f1       	breq	.+70     	; 0xa7e <DIO_voidSetPinDirection+0x4a>
     a38:	30 f0       	brcs	.+12     	; 0xa46 <DIO_voidSetPinDirection+0x12>
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	e1 f1       	breq	.+120    	; 0xab6 <DIO_voidSetPinDirection+0x82>
     a3e:	83 30       	cpi	r24, 0x03	; 3
     a40:	09 f4       	brne	.+2      	; 0xa44 <DIO_voidSetPinDirection+0x10>
     a42:	54 c0       	rjmp	.+168    	; 0xaec <DIO_voidSetPinDirection+0xb8>
     a44:	08 95       	ret
     a46:	44 23       	and	r20, r20
     a48:	71 f0       	breq	.+28     	; 0xa66 <DIO_voidSetPinDirection+0x32>
     a4a:	41 30       	cpi	r20, 0x01	; 1
     a4c:	09 f0       	breq	.+2      	; 0xa50 <DIO_voidSetPinDirection+0x1c>
     a4e:	68 c0       	rjmp	.+208    	; 0xb20 <DIO_voidSetPinDirection+0xec>
     a50:	2a b3       	in	r18, 0x1a	; 26
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <DIO_voidSetPinDirection+0x28>
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	6a 95       	dec	r22
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <DIO_voidSetPinDirection+0x24>
     a60:	82 2b       	or	r24, r18
     a62:	8a bb       	out	0x1a, r24	; 26
     a64:	08 95       	ret
     a66:	2a b3       	in	r18, 0x1a	; 26
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <DIO_voidSetPinDirection+0x3e>
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	6a 95       	dec	r22
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <DIO_voidSetPinDirection+0x3a>
     a76:	80 95       	com	r24
     a78:	82 23       	and	r24, r18
     a7a:	8a bb       	out	0x1a, r24	; 26
     a7c:	08 95       	ret
     a7e:	44 23       	and	r20, r20
     a80:	71 f0       	breq	.+28     	; 0xa9e <DIO_voidSetPinDirection+0x6a>
     a82:	41 30       	cpi	r20, 0x01	; 1
     a84:	09 f0       	breq	.+2      	; 0xa88 <DIO_voidSetPinDirection+0x54>
     a86:	4c c0       	rjmp	.+152    	; 0xb20 <DIO_voidSetPinDirection+0xec>
     a88:	27 b3       	in	r18, 0x17	; 23
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <DIO_voidSetPinDirection+0x60>
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	6a 95       	dec	r22
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <DIO_voidSetPinDirection+0x5c>
     a98:	82 2b       	or	r24, r18
     a9a:	87 bb       	out	0x17, r24	; 23
     a9c:	08 95       	ret
     a9e:	27 b3       	in	r18, 0x17	; 23
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_voidSetPinDirection+0x76>
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	6a 95       	dec	r22
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_voidSetPinDirection+0x72>
     aae:	80 95       	com	r24
     ab0:	82 23       	and	r24, r18
     ab2:	87 bb       	out	0x17, r24	; 23
     ab4:	08 95       	ret
     ab6:	44 23       	and	r20, r20
     ab8:	69 f0       	breq	.+26     	; 0xad4 <DIO_voidSetPinDirection+0xa0>
     aba:	41 30       	cpi	r20, 0x01	; 1
     abc:	89 f5       	brne	.+98     	; 0xb20 <DIO_voidSetPinDirection+0xec>
     abe:	24 b3       	in	r18, 0x14	; 20
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <DIO_voidSetPinDirection+0x96>
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	6a 95       	dec	r22
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <DIO_voidSetPinDirection+0x92>
     ace:	82 2b       	or	r24, r18
     ad0:	84 bb       	out	0x14, r24	; 20
     ad2:	08 95       	ret
     ad4:	24 b3       	in	r18, 0x14	; 20
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <DIO_voidSetPinDirection+0xac>
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	6a 95       	dec	r22
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <DIO_voidSetPinDirection+0xa8>
     ae4:	80 95       	com	r24
     ae6:	82 23       	and	r24, r18
     ae8:	84 bb       	out	0x14, r24	; 20
     aea:	08 95       	ret
     aec:	44 23       	and	r20, r20
     aee:	69 f0       	breq	.+26     	; 0xb0a <DIO_voidSetPinDirection+0xd6>
     af0:	41 30       	cpi	r20, 0x01	; 1
     af2:	b1 f4       	brne	.+44     	; 0xb20 <DIO_voidSetPinDirection+0xec>
     af4:	21 b3       	in	r18, 0x11	; 17
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <DIO_voidSetPinDirection+0xcc>
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	6a 95       	dec	r22
     b02:	e2 f7       	brpl	.-8      	; 0xafc <DIO_voidSetPinDirection+0xc8>
     b04:	82 2b       	or	r24, r18
     b06:	81 bb       	out	0x11, r24	; 17
     b08:	08 95       	ret
     b0a:	21 b3       	in	r18, 0x11	; 17
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <DIO_voidSetPinDirection+0xe2>
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	6a 95       	dec	r22
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <DIO_voidSetPinDirection+0xde>
     b1a:	80 95       	com	r24
     b1c:	82 23       	and	r24, r18
     b1e:	81 bb       	out	0x11, r24	; 17
     b20:	08 95       	ret

00000b22 <DIO_voidSetPinValue>:
     b22:	84 30       	cpi	r24, 0x04	; 4
     b24:	08 f0       	brcs	.+2      	; 0xb28 <DIO_voidSetPinValue+0x6>
     b26:	79 c0       	rjmp	.+242    	; 0xc1a <DIO_voidSetPinValue+0xf8>
     b28:	43 30       	cpi	r20, 0x03	; 3
     b2a:	08 f0       	brcs	.+2      	; 0xb2e <DIO_voidSetPinValue+0xc>
     b2c:	76 c0       	rjmp	.+236    	; 0xc1a <DIO_voidSetPinValue+0xf8>
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	19 f1       	breq	.+70     	; 0xb78 <DIO_voidSetPinValue+0x56>
     b32:	30 f0       	brcs	.+12     	; 0xb40 <DIO_voidSetPinValue+0x1e>
     b34:	82 30       	cpi	r24, 0x02	; 2
     b36:	e1 f1       	breq	.+120    	; 0xbb0 <DIO_voidSetPinValue+0x8e>
     b38:	83 30       	cpi	r24, 0x03	; 3
     b3a:	09 f4       	brne	.+2      	; 0xb3e <DIO_voidSetPinValue+0x1c>
     b3c:	54 c0       	rjmp	.+168    	; 0xbe6 <DIO_voidSetPinValue+0xc4>
     b3e:	08 95       	ret
     b40:	44 23       	and	r20, r20
     b42:	71 f0       	breq	.+28     	; 0xb60 <DIO_voidSetPinValue+0x3e>
     b44:	41 30       	cpi	r20, 0x01	; 1
     b46:	09 f0       	breq	.+2      	; 0xb4a <DIO_voidSetPinValue+0x28>
     b48:	68 c0       	rjmp	.+208    	; 0xc1a <DIO_voidSetPinValue+0xf8>
     b4a:	2b b3       	in	r18, 0x1b	; 27
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <DIO_voidSetPinValue+0x34>
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	6a 95       	dec	r22
     b58:	e2 f7       	brpl	.-8      	; 0xb52 <DIO_voidSetPinValue+0x30>
     b5a:	82 2b       	or	r24, r18
     b5c:	8b bb       	out	0x1b, r24	; 27
     b5e:	08 95       	ret
     b60:	2b b3       	in	r18, 0x1b	; 27
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_voidSetPinValue+0x4a>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	6a 95       	dec	r22
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_voidSetPinValue+0x46>
     b70:	80 95       	com	r24
     b72:	82 23       	and	r24, r18
     b74:	8b bb       	out	0x1b, r24	; 27
     b76:	08 95       	ret
     b78:	44 23       	and	r20, r20
     b7a:	71 f0       	breq	.+28     	; 0xb98 <DIO_voidSetPinValue+0x76>
     b7c:	41 30       	cpi	r20, 0x01	; 1
     b7e:	09 f0       	breq	.+2      	; 0xb82 <DIO_voidSetPinValue+0x60>
     b80:	4c c0       	rjmp	.+152    	; 0xc1a <DIO_voidSetPinValue+0xf8>
     b82:	28 b3       	in	r18, 0x18	; 24
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <DIO_voidSetPinValue+0x6c>
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	6a 95       	dec	r22
     b90:	e2 f7       	brpl	.-8      	; 0xb8a <DIO_voidSetPinValue+0x68>
     b92:	82 2b       	or	r24, r18
     b94:	88 bb       	out	0x18, r24	; 24
     b96:	08 95       	ret
     b98:	28 b3       	in	r18, 0x18	; 24
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <DIO_voidSetPinValue+0x82>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	6a 95       	dec	r22
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <DIO_voidSetPinValue+0x7e>
     ba8:	80 95       	com	r24
     baa:	82 23       	and	r24, r18
     bac:	88 bb       	out	0x18, r24	; 24
     bae:	08 95       	ret
     bb0:	44 23       	and	r20, r20
     bb2:	69 f0       	breq	.+26     	; 0xbce <DIO_voidSetPinValue+0xac>
     bb4:	41 30       	cpi	r20, 0x01	; 1
     bb6:	89 f5       	brne	.+98     	; 0xc1a <DIO_voidSetPinValue+0xf8>
     bb8:	25 b3       	in	r18, 0x15	; 21
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_voidSetPinValue+0xa2>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	6a 95       	dec	r22
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_voidSetPinValue+0x9e>
     bc8:	82 2b       	or	r24, r18
     bca:	85 bb       	out	0x15, r24	; 21
     bcc:	08 95       	ret
     bce:	25 b3       	in	r18, 0x15	; 21
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_voidSetPinValue+0xb8>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	6a 95       	dec	r22
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_voidSetPinValue+0xb4>
     bde:	80 95       	com	r24
     be0:	82 23       	and	r24, r18
     be2:	85 bb       	out	0x15, r24	; 21
     be4:	08 95       	ret
     be6:	44 23       	and	r20, r20
     be8:	69 f0       	breq	.+26     	; 0xc04 <DIO_voidSetPinValue+0xe2>
     bea:	41 30       	cpi	r20, 0x01	; 1
     bec:	b1 f4       	brne	.+44     	; 0xc1a <DIO_voidSetPinValue+0xf8>
     bee:	22 b3       	in	r18, 0x12	; 18
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_voidSetPinValue+0xd8>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	6a 95       	dec	r22
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_voidSetPinValue+0xd4>
     bfe:	82 2b       	or	r24, r18
     c00:	82 bb       	out	0x12, r24	; 18
     c02:	08 95       	ret
     c04:	22 b3       	in	r18, 0x12	; 18
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <DIO_voidSetPinValue+0xee>
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	6a 95       	dec	r22
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <DIO_voidSetPinValue+0xea>
     c14:	80 95       	com	r24
     c16:	82 23       	and	r24, r18
     c18:	82 bb       	out	0x12, r24	; 18
     c1a:	08 95       	ret

00000c1c <DIO_voidGetPinValue>:
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	c0 f5       	brcc	.+112    	; 0xc90 <DIO_voidGetPinValue+0x74>
     c20:	68 30       	cpi	r22, 0x08	; 8
     c22:	b0 f5       	brcc	.+108    	; 0xc90 <DIO_voidGetPinValue+0x74>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	99 f1       	breq	.+102    	; 0xc90 <DIO_voidGetPinValue+0x74>
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	89 f0       	breq	.+34     	; 0xc50 <DIO_voidGetPinValue+0x34>
     c2e:	28 f0       	brcs	.+10     	; 0xc3a <DIO_voidGetPinValue+0x1e>
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	c9 f0       	breq	.+50     	; 0xc66 <DIO_voidGetPinValue+0x4a>
     c34:	83 30       	cpi	r24, 0x03	; 3
     c36:	11 f1       	breq	.+68     	; 0xc7c <DIO_voidGetPinValue+0x60>
     c38:	08 95       	ret
     c3a:	89 b3       	in	r24, 0x19	; 25
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_voidGetPinValue+0x28>
     c40:	95 95       	asr	r25
     c42:	87 95       	ror	r24
     c44:	6a 95       	dec	r22
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_voidGetPinValue+0x24>
     c48:	81 70       	andi	r24, 0x01	; 1
     c4a:	fa 01       	movw	r30, r20
     c4c:	80 83       	st	Z, r24
     c4e:	08 95       	ret
     c50:	86 b3       	in	r24, 0x16	; 22
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <DIO_voidGetPinValue+0x3e>
     c56:	95 95       	asr	r25
     c58:	87 95       	ror	r24
     c5a:	6a 95       	dec	r22
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <DIO_voidGetPinValue+0x3a>
     c5e:	81 70       	andi	r24, 0x01	; 1
     c60:	fa 01       	movw	r30, r20
     c62:	80 83       	st	Z, r24
     c64:	08 95       	ret
     c66:	83 b3       	in	r24, 0x13	; 19
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_voidGetPinValue+0x54>
     c6c:	95 95       	asr	r25
     c6e:	87 95       	ror	r24
     c70:	6a 95       	dec	r22
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_voidGetPinValue+0x50>
     c74:	81 70       	andi	r24, 0x01	; 1
     c76:	fa 01       	movw	r30, r20
     c78:	80 83       	st	Z, r24
     c7a:	08 95       	ret
     c7c:	80 b3       	in	r24, 0x10	; 16
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_voidGetPinValue+0x6a>
     c82:	95 95       	asr	r25
     c84:	87 95       	ror	r24
     c86:	6a 95       	dec	r22
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_voidGetPinValue+0x66>
     c8a:	81 70       	andi	r24, 0x01	; 1
     c8c:	fa 01       	movw	r30, r20
     c8e:	80 83       	st	Z, r24
     c90:	08 95       	ret

00000c92 <DIO_voidActivePinInPullUpResistance>:

		
}

void DIO_voidActivePinInPullUpResistance	(u8 copy_u8PortId,u8 copy_u8PinId){
	if ((copy_u8PortId < 4) && (copy_u8PinId < 8)){
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	a8 f5       	brcc	.+106    	; 0xd00 <DIO_voidActivePinInPullUpResistance+0x6e>
     c96:	68 30       	cpi	r22, 0x08	; 8
     c98:	98 f5       	brcc	.+102    	; 0xd00 <DIO_voidActivePinInPullUpResistance+0x6e>
		switch(copy_u8PortId){
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	89 f0       	breq	.+34     	; 0xcc0 <DIO_voidActivePinInPullUpResistance+0x2e>
     c9e:	28 f0       	brcs	.+10     	; 0xcaa <DIO_voidActivePinInPullUpResistance+0x18>
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	c9 f0       	breq	.+50     	; 0xcd6 <DIO_voidActivePinInPullUpResistance+0x44>
     ca4:	83 30       	cpi	r24, 0x03	; 3
     ca6:	11 f1       	breq	.+68     	; 0xcec <DIO_voidActivePinInPullUpResistance+0x5a>
     ca8:	08 95       	ret
			case DIO_PORTA:
				SET_BIT(PORTA_REG, copy_u8PinId);
     caa:	2b b3       	in	r18, 0x1b	; 27
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_voidActivePinInPullUpResistance+0x24>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	6a 95       	dec	r22
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_voidActivePinInPullUpResistance+0x20>
     cba:	82 2b       	or	r24, r18
     cbc:	8b bb       	out	0x1b, r24	; 27
			break;
     cbe:	08 95       	ret
			case DIO_PORTB:
				SET_BIT(PORTB_REG, copy_u8PinId);
     cc0:	28 b3       	in	r18, 0x18	; 24
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_voidActivePinInPullUpResistance+0x3a>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	6a 95       	dec	r22
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_voidActivePinInPullUpResistance+0x36>
     cd0:	82 2b       	or	r24, r18
     cd2:	88 bb       	out	0x18, r24	; 24
			break;
     cd4:	08 95       	ret
			case DIO_PORTC:
				SET_BIT(PORTC_REG, copy_u8PinId);
     cd6:	25 b3       	in	r18, 0x15	; 21
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <DIO_voidActivePinInPullUpResistance+0x50>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	6a 95       	dec	r22
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <DIO_voidActivePinInPullUpResistance+0x4c>
     ce6:	82 2b       	or	r24, r18
     ce8:	85 bb       	out	0x15, r24	; 21
			break;
     cea:	08 95       	ret
			case DIO_PORTD:
				SET_BIT(PORTD_REG, copy_u8PinId);
     cec:	22 b3       	in	r18, 0x12	; 18
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_voidActivePinInPullUpResistance+0x66>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	6a 95       	dec	r22
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_voidActivePinInPullUpResistance+0x62>
     cfc:	82 2b       	or	r24, r18
     cfe:	82 bb       	out	0x12, r24	; 18
     d00:	08 95       	ret

00000d02 <PWM_voidInitChannel_1A>:
		OCR0_REG = ((copy_u8DutyCycle*256)/100)-1;
		
		// Select Prescaler Value = 64
		SET_BIT(TCCR0_REG,CS00);
		SET_BIT(TCCR0_REG,CS01);
		CLR_BIT(TCCR0_REG,CS02);
     d02:	8f b5       	in	r24, 0x2f	; 47
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8f bd       	out	0x2f, r24	; 47
     d08:	8f b5       	in	r24, 0x2f	; 47
     d0a:	82 60       	ori	r24, 0x02	; 2
     d0c:	8f bd       	out	0x2f, r24	; 47
     d0e:	8e b5       	in	r24, 0x2e	; 46
     d10:	88 60       	ori	r24, 0x08	; 8
     d12:	8e bd       	out	0x2e, r24	; 46
     d14:	8e b5       	in	r24, 0x2e	; 46
     d16:	80 61       	ori	r24, 0x10	; 16
     d18:	8e bd       	out	0x2e, r24	; 46
     d1a:	8f b5       	in	r24, 0x2f	; 47
     d1c:	8f 7b       	andi	r24, 0xBF	; 191
     d1e:	8f bd       	out	0x2f, r24	; 47
     d20:	8f b5       	in	r24, 0x2f	; 47
     d22:	80 68       	ori	r24, 0x80	; 128
     d24:	8f bd       	out	0x2f, r24	; 47
     d26:	08 95       	ret

00000d28 <PWM_voidGenerate_PWM_Channel_1A>:
	}
}


void PWM_voidGenerate_PWM_Channel_1A(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	6a 01       	movw	r12, r20
     d38:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	48 ec       	ldi	r20, 0xC8	; 200
     d40:	52 e4       	ldi	r21, 0x42	; 66
     d42:	c7 01       	movw	r24, r14
     d44:	b6 01       	movw	r22, r12
     d46:	0e 94 a9 07 	call	0xf52	; 0xf52 <__cmpsf2>
     d4a:	18 16       	cp	r1, r24
     d4c:	94 f1       	brlt	.+100    	; 0xdb2 <PWM_voidGenerate_PWM_Channel_1A+0x8a>
	{
		// under condition tick time 4 MS by setting prescaller 64
		ICR1_u16_REG = ((1000000UL/copy_u16Frequency_hz)/4)-1;
     d4e:	9e 01       	movw	r18, r28
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	60 e9       	ldi	r22, 0x90	; 144
     d56:	70 ed       	ldi	r23, 0xD0	; 208
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__udivmodsi4>
     d60:	21 50       	subi	r18, 0x01	; 1
     d62:	31 09       	sbc	r19, r1
     d64:	37 bd       	out	0x27, r19	; 39
     d66:	26 bd       	out	0x26, r18	; 38
		
		// under condition non inverting fast PWM
		OCR1A_u16_REG = ((copy_f32DutyCycle*(ICR1_u16_REG+1))/100)-1;
     d68:	66 b5       	in	r22, 0x26	; 38
     d6a:	77 b5       	in	r23, 0x27	; 39
     d6c:	6f 5f       	subi	r22, 0xFF	; 255
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 4f 08 	call	0x109e	; 0x109e <__floatunsisf>
     d78:	a7 01       	movw	r20, r14
     d7a:	96 01       	movw	r18, r12
     d7c:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsf3>
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	48 ec       	ldi	r20, 0xC8	; 200
     d86:	52 e4       	ldi	r21, 0x42	; 66
     d88:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__divsf3>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	5f e3       	ldi	r21, 0x3F	; 63
     d94:	0e 94 3c 07 	call	0xe78	; 0xe78 <__subsf3>
     d98:	0e 94 20 08 	call	0x1040	; 0x1040 <__fixunssfsi>
     d9c:	7b bd       	out	0x2b, r23	; 43
     d9e:	6a bd       	out	0x2a, r22	; 42
		
		// Select Prescaler Value = 64
		SET_BIT(TCCR1B_REG,CS10);
     da0:	8e b5       	in	r24, 0x2e	; 46
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
     da6:	8e b5       	in	r24, 0x2e	; 46
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
     dac:	8e b5       	in	r24, 0x2e	; 46
     dae:	8b 7f       	andi	r24, 0xFB	; 251
     db0:	8e bd       	out	0x2e, r24	; 46
	}
	else
	{
		// return Error state
	}
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
     dbe:	08 95       	ret

00000dc0 <PWM_voidStopChannel_1A>:

void PWM_voidStopChannel_1A(void)
{
	// Clear the prescaler bits to stop the timer
	CLR_BIT(TCCR1B_REG, CS10);
     dc0:	8e b5       	in	r24, 0x2e	; 46
     dc2:	8e 7f       	andi	r24, 0xFE	; 254
     dc4:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B_REG, CS11);
     dc6:	8e b5       	in	r24, 0x2e	; 46
     dc8:	8d 7f       	andi	r24, 0xFD	; 253
     dca:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B_REG, CS12);
     dcc:	8e b5       	in	r24, 0x2e	; 46
     dce:	8b 7f       	andi	r24, 0xFB	; 251
     dd0:	8e bd       	out	0x2e, r24	; 46

	// Optionally, reset the counter and output compare registers
	TCNT1_u16_REG = 0;
     dd2:	1d bc       	out	0x2d, r1	; 45
     dd4:	1c bc       	out	0x2c, r1	; 44
	OCR1A_u16_REG = 0;
     dd6:	1b bc       	out	0x2b, r1	; 43
     dd8:	1a bc       	out	0x2a, r1	; 42
     dda:	08 95       	ret

00000ddc <UART_voidInit>:
 
 
 void UART_voidInit(void)
 {
	 // Set Buad Rate = 9600
	 CLR_BIT(UCSRA_REG, U2X);
     ddc:	8b b1       	in	r24, 0x0b	; 11
     dde:	8d 7f       	andi	r24, 0xFD	; 253
     de0:	8b b9       	out	0x0b, r24	; 11
	 UBRRL_REG = 103;
     de2:	87 e6       	ldi	r24, 0x67	; 103
     de4:	89 b9       	out	0x09, r24	; 9
	 CLR_BIT(local_u8InitVar, USBS);
	 
	 // configure data bits = 8
	 SET_BIT(local_u8InitVar, UCSZ0);
	 SET_BIT(local_u8InitVar, UCSZ1);
	 CLR_BIT(UCSRB_REG, UCSZ2);
     de6:	8a b1       	in	r24, 0x0a	; 10
     de8:	8b 7f       	andi	r24, 0xFB	; 251
     dea:	8a b9       	out	0x0a, r24	; 10
	 
	 // configure no polarity
	 CLR_BIT(local_u8InitVar, UCPOL);
	 
	 UCSRC_REG = local_u8InitVar; // UCSRC_REG = 0b10000110;
     dec:	86 e8       	ldi	r24, 0x86	; 134
     dee:	80 bd       	out	0x20, r24	; 32
	 
	 //Enable Tx
	 SET_BIT(UCSRB_REG, TXEN);
     df0:	8a b1       	in	r24, 0x0a	; 10
     df2:	88 60       	ori	r24, 0x08	; 8
     df4:	8a b9       	out	0x0a, r24	; 10
	 
	 //Enable Rx
	 SET_BIT(UCSRB_REG, RXEN);
     df6:	8a b1       	in	r24, 0x0a	; 10
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	8a b9       	out	0x0a, r24	; 10
     dfc:	08 95       	ret

00000dfe <UART_voidTxChar>:
 }


 void UART_voidTxChar(u8 copy_u8TxData)
 {
	 UDR_REG = copy_u8TxData;
     dfe:	8c b9       	out	0x0c, r24	; 12
	 
	 // Busy Wait on Data Register empty flag
	 while(0 == GET_BIT(UCSRA_REG, UDRE));
     e00:	5d 9b       	sbis	0x0b, 5	; 11
     e02:	fe cf       	rjmp	.-4      	; 0xe00 <UART_voidTxChar+0x2>
 }
     e04:	08 95       	ret

00000e06 <UART_voidRxChar>:


 void UART_voidRxChar(u8* copy_pu8RxData)
 {
	 if(copy_pu8RxData!=NULL)
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	29 f0       	breq	.+10     	; 0xe14 <UART_voidRxChar+0xe>
	 {
		 // Busy Wait on Receive Complete flag
		 while(0 == GET_BIT(UCSRA_REG, RXC));
     e0a:	5f 9b       	sbis	0x0b, 7	; 11
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <UART_voidRxChar+0x4>
		 
		 *copy_pu8RxData = UDR_REG;
     e0e:	2c b1       	in	r18, 0x0c	; 12
     e10:	fc 01       	movw	r30, r24
     e12:	20 83       	st	Z, r18
     e14:	08 95       	ret

00000e16 <UART_voidTxString>:
	 }
 }


 void UART_voidTxString(u8* copy_pu8TxString)
 {
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
	 if(copy_pu8TxString!=NULL)
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	29 f4       	brne	.+10     	; 0xe2a <UART_voidTxString+0x14>
     e20:	0c c0       	rjmp	.+24     	; 0xe3a <UART_voidTxString+0x24>
	 {
		 u8 local_u8Counter=0;
		 while(copy_pu8TxString[local_u8Counter]!='\0')
		 {
			 UART_voidTxChar(copy_pu8TxString[local_u8Counter]);
     e22:	0e 94 ff 06 	call	0xdfe	; 0xdfe <UART_voidTxChar>
			 local_u8Counter++;
     e26:	cf 5f       	subi	r28, 0xFF	; 255
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <UART_voidTxString+0x18>
     e2a:	8c 01       	movw	r16, r24
     e2c:	c0 e0       	ldi	r28, 0x00	; 0
 void UART_voidTxString(u8* copy_pu8TxString)
 {
	 if(copy_pu8TxString!=NULL)
	 {
		 u8 local_u8Counter=0;
		 while(copy_pu8TxString[local_u8Counter]!='\0')
     e2e:	f8 01       	movw	r30, r16
     e30:	ec 0f       	add	r30, r28
     e32:	f1 1d       	adc	r31, r1
     e34:	80 81       	ld	r24, Z
     e36:	81 11       	cpse	r24, r1
     e38:	f4 cf       	rjmp	.-24     	; 0xe22 <UART_voidTxString+0xc>
	 }
	 else
	 {
		 // return Error state
	 }
 }
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <UART_voidRxString>:


 void UART_voidRxString(u8* copy_pu8RxString)
 {
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
	 if(copy_pu8RxString!=NULL)
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	71 f0       	breq	.+28     	; 0xe6c <UART_voidRxString+0x2a>
     e50:	7c 01       	movw	r14, r24
     e52:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 u8 local_u8Counter=0;
		 
		 while(1)
		 {
			 UART_voidRxChar(&copy_pu8RxString[local_u8Counter]);
     e54:	e7 01       	movw	r28, r14
     e56:	c1 0f       	add	r28, r17
     e58:	d1 1d       	adc	r29, r1
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 03 07 	call	0xe06	; 0xe06 <UART_voidRxChar>
			 
			 if(copy_pu8RxString[local_u8Counter] == '#')
     e60:	98 81       	ld	r25, Y
     e62:	93 32       	cpi	r25, 0x23	; 35
     e64:	11 f0       	breq	.+4      	; 0xe6a <UART_voidRxString+0x28>
			 {
				 break;
			 }
			 else
			 {
				 local_u8Counter++;
     e66:	1f 5f       	subi	r17, 0xFF	; 255
			 }
		 }
     e68:	f5 cf       	rjmp	.-22     	; 0xe54 <UART_voidRxString+0x12>
		 
		 copy_pu8RxString[local_u8Counter] = '\0';
     e6a:	18 82       	st	Y, r1
	 }
	 else
	 {
		 // return Error state
	 }
 }
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	08 95       	ret

00000e78 <__subsf3>:
     e78:	50 58       	subi	r21, 0x80	; 128

00000e7a <__addsf3>:
     e7a:	bb 27       	eor	r27, r27
     e7c:	aa 27       	eor	r26, r26
     e7e:	0e 94 54 07 	call	0xea8	; 0xea8 <__addsf3x>
     e82:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__fp_round>
     e86:	0e 94 b9 08 	call	0x1172	; 0x1172 <__fp_pscA>
     e8a:	38 f0       	brcs	.+14     	; 0xe9a <__addsf3+0x20>
     e8c:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fp_pscB>
     e90:	20 f0       	brcs	.+8      	; 0xe9a <__addsf3+0x20>
     e92:	39 f4       	brne	.+14     	; 0xea2 <__addsf3+0x28>
     e94:	9f 3f       	cpi	r25, 0xFF	; 255
     e96:	19 f4       	brne	.+6      	; 0xe9e <__addsf3+0x24>
     e98:	26 f4       	brtc	.+8      	; 0xea2 <__addsf3+0x28>
     e9a:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_nan>
     e9e:	0e f4       	brtc	.+2      	; 0xea2 <__addsf3+0x28>
     ea0:	e0 95       	com	r30
     ea2:	e7 fb       	bst	r30, 7
     ea4:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>

00000ea8 <__addsf3x>:
     ea8:	e9 2f       	mov	r30, r25
     eaa:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fp_split3>
     eae:	58 f3       	brcs	.-42     	; 0xe86 <__addsf3+0xc>
     eb0:	ba 17       	cp	r27, r26
     eb2:	62 07       	cpc	r22, r18
     eb4:	73 07       	cpc	r23, r19
     eb6:	84 07       	cpc	r24, r20
     eb8:	95 07       	cpc	r25, r21
     eba:	20 f0       	brcs	.+8      	; 0xec4 <__addsf3x+0x1c>
     ebc:	79 f4       	brne	.+30     	; 0xedc <__addsf3x+0x34>
     ebe:	a6 f5       	brtc	.+104    	; 0xf28 <__addsf3x+0x80>
     ec0:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_zero>
     ec4:	0e f4       	brtc	.+2      	; 0xec8 <__addsf3x+0x20>
     ec6:	e0 95       	com	r30
     ec8:	0b 2e       	mov	r0, r27
     eca:	ba 2f       	mov	r27, r26
     ecc:	a0 2d       	mov	r26, r0
     ece:	0b 01       	movw	r0, r22
     ed0:	b9 01       	movw	r22, r18
     ed2:	90 01       	movw	r18, r0
     ed4:	0c 01       	movw	r0, r24
     ed6:	ca 01       	movw	r24, r20
     ed8:	a0 01       	movw	r20, r0
     eda:	11 24       	eor	r1, r1
     edc:	ff 27       	eor	r31, r31
     ede:	59 1b       	sub	r21, r25
     ee0:	99 f0       	breq	.+38     	; 0xf08 <__addsf3x+0x60>
     ee2:	59 3f       	cpi	r21, 0xF9	; 249
     ee4:	50 f4       	brcc	.+20     	; 0xefa <__addsf3x+0x52>
     ee6:	50 3e       	cpi	r21, 0xE0	; 224
     ee8:	68 f1       	brcs	.+90     	; 0xf44 <__addsf3x+0x9c>
     eea:	1a 16       	cp	r1, r26
     eec:	f0 40       	sbci	r31, 0x00	; 0
     eee:	a2 2f       	mov	r26, r18
     ef0:	23 2f       	mov	r18, r19
     ef2:	34 2f       	mov	r19, r20
     ef4:	44 27       	eor	r20, r20
     ef6:	58 5f       	subi	r21, 0xF8	; 248
     ef8:	f3 cf       	rjmp	.-26     	; 0xee0 <__addsf3x+0x38>
     efa:	46 95       	lsr	r20
     efc:	37 95       	ror	r19
     efe:	27 95       	ror	r18
     f00:	a7 95       	ror	r26
     f02:	f0 40       	sbci	r31, 0x00	; 0
     f04:	53 95       	inc	r21
     f06:	c9 f7       	brne	.-14     	; 0xefa <__addsf3x+0x52>
     f08:	7e f4       	brtc	.+30     	; 0xf28 <__addsf3x+0x80>
     f0a:	1f 16       	cp	r1, r31
     f0c:	ba 0b       	sbc	r27, r26
     f0e:	62 0b       	sbc	r22, r18
     f10:	73 0b       	sbc	r23, r19
     f12:	84 0b       	sbc	r24, r20
     f14:	ba f0       	brmi	.+46     	; 0xf44 <__addsf3x+0x9c>
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	a1 f0       	breq	.+40     	; 0xf42 <__addsf3x+0x9a>
     f1a:	ff 0f       	add	r31, r31
     f1c:	bb 1f       	adc	r27, r27
     f1e:	66 1f       	adc	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	c2 f7       	brpl	.-16     	; 0xf16 <__addsf3x+0x6e>
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <__addsf3x+0x9c>
     f28:	ba 0f       	add	r27, r26
     f2a:	62 1f       	adc	r22, r18
     f2c:	73 1f       	adc	r23, r19
     f2e:	84 1f       	adc	r24, r20
     f30:	48 f4       	brcc	.+18     	; 0xf44 <__addsf3x+0x9c>
     f32:	87 95       	ror	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b7 95       	ror	r27
     f3a:	f7 95       	ror	r31
     f3c:	9e 3f       	cpi	r25, 0xFE	; 254
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <__addsf3x+0x9a>
     f40:	b0 cf       	rjmp	.-160    	; 0xea2 <__addsf3+0x28>
     f42:	93 95       	inc	r25
     f44:	88 0f       	add	r24, r24
     f46:	08 f0       	brcs	.+2      	; 0xf4a <__addsf3x+0xa2>
     f48:	99 27       	eor	r25, r25
     f4a:	ee 0f       	add	r30, r30
     f4c:	97 95       	ror	r25
     f4e:	87 95       	ror	r24
     f50:	08 95       	ret

00000f52 <__cmpsf2>:
     f52:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_cmp>
     f56:	08 f4       	brcc	.+2      	; 0xf5a <__cmpsf2+0x8>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	08 95       	ret

00000f5c <__divsf3>:
     f5c:	0e 94 c2 07 	call	0xf84	; 0xf84 <__divsf3x>
     f60:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__fp_round>
     f64:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fp_pscB>
     f68:	58 f0       	brcs	.+22     	; 0xf80 <__divsf3+0x24>
     f6a:	0e 94 b9 08 	call	0x1172	; 0x1172 <__fp_pscA>
     f6e:	40 f0       	brcs	.+16     	; 0xf80 <__divsf3+0x24>
     f70:	29 f4       	brne	.+10     	; 0xf7c <__divsf3+0x20>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	29 f0       	breq	.+10     	; 0xf80 <__divsf3+0x24>
     f76:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
     f7a:	51 11       	cpse	r21, r1
     f7c:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_szero>
     f80:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_nan>

00000f84 <__divsf3x>:
     f84:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fp_split3>
     f88:	68 f3       	brcs	.-38     	; 0xf64 <__divsf3+0x8>

00000f8a <__divsf3_pse>:
     f8a:	99 23       	and	r25, r25
     f8c:	b1 f3       	breq	.-20     	; 0xf7a <__divsf3+0x1e>
     f8e:	55 23       	and	r21, r21
     f90:	91 f3       	breq	.-28     	; 0xf76 <__divsf3+0x1a>
     f92:	95 1b       	sub	r25, r21
     f94:	55 0b       	sbc	r21, r21
     f96:	bb 27       	eor	r27, r27
     f98:	aa 27       	eor	r26, r26
     f9a:	62 17       	cp	r22, r18
     f9c:	73 07       	cpc	r23, r19
     f9e:	84 07       	cpc	r24, r20
     fa0:	38 f0       	brcs	.+14     	; 0xfb0 <__divsf3_pse+0x26>
     fa2:	9f 5f       	subi	r25, 0xFF	; 255
     fa4:	5f 4f       	sbci	r21, 0xFF	; 255
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	44 1f       	adc	r20, r20
     fac:	aa 1f       	adc	r26, r26
     fae:	a9 f3       	breq	.-22     	; 0xf9a <__divsf3_pse+0x10>
     fb0:	35 d0       	rcall	.+106    	; 0x101c <__divsf3_pse+0x92>
     fb2:	0e 2e       	mov	r0, r30
     fb4:	3a f0       	brmi	.+14     	; 0xfc4 <__divsf3_pse+0x3a>
     fb6:	e0 e8       	ldi	r30, 0x80	; 128
     fb8:	32 d0       	rcall	.+100    	; 0x101e <__divsf3_pse+0x94>
     fba:	91 50       	subi	r25, 0x01	; 1
     fbc:	50 40       	sbci	r21, 0x00	; 0
     fbe:	e6 95       	lsr	r30
     fc0:	00 1c       	adc	r0, r0
     fc2:	ca f7       	brpl	.-14     	; 0xfb6 <__divsf3_pse+0x2c>
     fc4:	2b d0       	rcall	.+86     	; 0x101c <__divsf3_pse+0x92>
     fc6:	fe 2f       	mov	r31, r30
     fc8:	29 d0       	rcall	.+82     	; 0x101c <__divsf3_pse+0x92>
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	bb 1f       	adc	r27, r27
     fd2:	26 17       	cp	r18, r22
     fd4:	37 07       	cpc	r19, r23
     fd6:	48 07       	cpc	r20, r24
     fd8:	ab 07       	cpc	r26, r27
     fda:	b0 e8       	ldi	r27, 0x80	; 128
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <__divsf3_pse+0x56>
     fde:	bb 0b       	sbc	r27, r27
     fe0:	80 2d       	mov	r24, r0
     fe2:	bf 01       	movw	r22, r30
     fe4:	ff 27       	eor	r31, r31
     fe6:	93 58       	subi	r25, 0x83	; 131
     fe8:	5f 4f       	sbci	r21, 0xFF	; 255
     fea:	3a f0       	brmi	.+14     	; 0xffa <__divsf3_pse+0x70>
     fec:	9e 3f       	cpi	r25, 0xFE	; 254
     fee:	51 05       	cpc	r21, r1
     ff0:	78 f0       	brcs	.+30     	; 0x1010 <__divsf3_pse+0x86>
     ff2:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
     ff6:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_szero>
     ffa:	5f 3f       	cpi	r21, 0xFF	; 255
     ffc:	e4 f3       	brlt	.-8      	; 0xff6 <__divsf3_pse+0x6c>
     ffe:	98 3e       	cpi	r25, 0xE8	; 232
    1000:	d4 f3       	brlt	.-12     	; 0xff6 <__divsf3_pse+0x6c>
    1002:	86 95       	lsr	r24
    1004:	77 95       	ror	r23
    1006:	67 95       	ror	r22
    1008:	b7 95       	ror	r27
    100a:	f7 95       	ror	r31
    100c:	9f 5f       	subi	r25, 0xFF	; 255
    100e:	c9 f7       	brne	.-14     	; 0x1002 <__divsf3_pse+0x78>
    1010:	88 0f       	add	r24, r24
    1012:	91 1d       	adc	r25, r1
    1014:	96 95       	lsr	r25
    1016:	87 95       	ror	r24
    1018:	97 f9       	bld	r25, 7
    101a:	08 95       	ret
    101c:	e1 e0       	ldi	r30, 0x01	; 1
    101e:	66 0f       	add	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	88 1f       	adc	r24, r24
    1024:	bb 1f       	adc	r27, r27
    1026:	62 17       	cp	r22, r18
    1028:	73 07       	cpc	r23, r19
    102a:	84 07       	cpc	r24, r20
    102c:	ba 07       	cpc	r27, r26
    102e:	20 f0       	brcs	.+8      	; 0x1038 <__divsf3_pse+0xae>
    1030:	62 1b       	sub	r22, r18
    1032:	73 0b       	sbc	r23, r19
    1034:	84 0b       	sbc	r24, r20
    1036:	ba 0b       	sbc	r27, r26
    1038:	ee 1f       	adc	r30, r30
    103a:	88 f7       	brcc	.-30     	; 0x101e <__divsf3_pse+0x94>
    103c:	e0 95       	com	r30
    103e:	08 95       	ret

00001040 <__fixunssfsi>:
    1040:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_splitA>
    1044:	88 f0       	brcs	.+34     	; 0x1068 <__fixunssfsi+0x28>
    1046:	9f 57       	subi	r25, 0x7F	; 127
    1048:	98 f0       	brcs	.+38     	; 0x1070 <__fixunssfsi+0x30>
    104a:	b9 2f       	mov	r27, r25
    104c:	99 27       	eor	r25, r25
    104e:	b7 51       	subi	r27, 0x17	; 23
    1050:	b0 f0       	brcs	.+44     	; 0x107e <__fixunssfsi+0x3e>
    1052:	e1 f0       	breq	.+56     	; 0x108c <__fixunssfsi+0x4c>
    1054:	66 0f       	add	r22, r22
    1056:	77 1f       	adc	r23, r23
    1058:	88 1f       	adc	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	1a f0       	brmi	.+6      	; 0x1064 <__fixunssfsi+0x24>
    105e:	ba 95       	dec	r27
    1060:	c9 f7       	brne	.-14     	; 0x1054 <__fixunssfsi+0x14>
    1062:	14 c0       	rjmp	.+40     	; 0x108c <__fixunssfsi+0x4c>
    1064:	b1 30       	cpi	r27, 0x01	; 1
    1066:	91 f0       	breq	.+36     	; 0x108c <__fixunssfsi+0x4c>
    1068:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__fp_zero>
    106c:	b1 e0       	ldi	r27, 0x01	; 1
    106e:	08 95       	ret
    1070:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_zero>
    1074:	67 2f       	mov	r22, r23
    1076:	78 2f       	mov	r23, r24
    1078:	88 27       	eor	r24, r24
    107a:	b8 5f       	subi	r27, 0xF8	; 248
    107c:	39 f0       	breq	.+14     	; 0x108c <__fixunssfsi+0x4c>
    107e:	b9 3f       	cpi	r27, 0xF9	; 249
    1080:	cc f3       	brlt	.-14     	; 0x1074 <__fixunssfsi+0x34>
    1082:	86 95       	lsr	r24
    1084:	77 95       	ror	r23
    1086:	67 95       	ror	r22
    1088:	b3 95       	inc	r27
    108a:	d9 f7       	brne	.-10     	; 0x1082 <__fixunssfsi+0x42>
    108c:	3e f4       	brtc	.+14     	; 0x109c <__fixunssfsi+0x5c>
    108e:	90 95       	com	r25
    1090:	80 95       	com	r24
    1092:	70 95       	com	r23
    1094:	61 95       	neg	r22
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	8f 4f       	sbci	r24, 0xFF	; 255
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	08 95       	ret

0000109e <__floatunsisf>:
    109e:	e8 94       	clt
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <__floatsisf+0x12>

000010a2 <__floatsisf>:
    10a2:	97 fb       	bst	r25, 7
    10a4:	3e f4       	brtc	.+14     	; 0x10b4 <__floatsisf+0x12>
    10a6:	90 95       	com	r25
    10a8:	80 95       	com	r24
    10aa:	70 95       	com	r23
    10ac:	61 95       	neg	r22
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	8f 4f       	sbci	r24, 0xFF	; 255
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	99 23       	and	r25, r25
    10b6:	a9 f0       	breq	.+42     	; 0x10e2 <__floatsisf+0x40>
    10b8:	f9 2f       	mov	r31, r25
    10ba:	96 e9       	ldi	r25, 0x96	; 150
    10bc:	bb 27       	eor	r27, r27
    10be:	93 95       	inc	r25
    10c0:	f6 95       	lsr	r31
    10c2:	87 95       	ror	r24
    10c4:	77 95       	ror	r23
    10c6:	67 95       	ror	r22
    10c8:	b7 95       	ror	r27
    10ca:	f1 11       	cpse	r31, r1
    10cc:	f8 cf       	rjmp	.-16     	; 0x10be <__floatsisf+0x1c>
    10ce:	fa f4       	brpl	.+62     	; 0x110e <__floatsisf+0x6c>
    10d0:	bb 0f       	add	r27, r27
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <__floatsisf+0x36>
    10d4:	60 ff       	sbrs	r22, 0
    10d6:	1b c0       	rjmp	.+54     	; 0x110e <__floatsisf+0x6c>
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	8f 4f       	sbci	r24, 0xFF	; 255
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	16 c0       	rjmp	.+44     	; 0x110e <__floatsisf+0x6c>
    10e2:	88 23       	and	r24, r24
    10e4:	11 f0       	breq	.+4      	; 0x10ea <__floatsisf+0x48>
    10e6:	96 e9       	ldi	r25, 0x96	; 150
    10e8:	11 c0       	rjmp	.+34     	; 0x110c <__floatsisf+0x6a>
    10ea:	77 23       	and	r23, r23
    10ec:	21 f0       	breq	.+8      	; 0x10f6 <__floatsisf+0x54>
    10ee:	9e e8       	ldi	r25, 0x8E	; 142
    10f0:	87 2f       	mov	r24, r23
    10f2:	76 2f       	mov	r23, r22
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <__floatsisf+0x5e>
    10f6:	66 23       	and	r22, r22
    10f8:	71 f0       	breq	.+28     	; 0x1116 <__floatsisf+0x74>
    10fa:	96 e8       	ldi	r25, 0x86	; 134
    10fc:	86 2f       	mov	r24, r22
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	2a f0       	brmi	.+10     	; 0x110e <__floatsisf+0x6c>
    1104:	9a 95       	dec	r25
    1106:	66 0f       	add	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	da f7       	brpl	.-10     	; 0x1104 <__floatsisf+0x62>
    110e:	88 0f       	add	r24, r24
    1110:	96 95       	lsr	r25
    1112:	87 95       	ror	r24
    1114:	97 f9       	bld	r25, 7
    1116:	08 95       	ret

00001118 <__fp_cmp>:
    1118:	99 0f       	add	r25, r25
    111a:	00 08       	sbc	r0, r0
    111c:	55 0f       	add	r21, r21
    111e:	aa 0b       	sbc	r26, r26
    1120:	e0 e8       	ldi	r30, 0x80	; 128
    1122:	fe ef       	ldi	r31, 0xFE	; 254
    1124:	16 16       	cp	r1, r22
    1126:	17 06       	cpc	r1, r23
    1128:	e8 07       	cpc	r30, r24
    112a:	f9 07       	cpc	r31, r25
    112c:	c0 f0       	brcs	.+48     	; 0x115e <__fp_cmp+0x46>
    112e:	12 16       	cp	r1, r18
    1130:	13 06       	cpc	r1, r19
    1132:	e4 07       	cpc	r30, r20
    1134:	f5 07       	cpc	r31, r21
    1136:	98 f0       	brcs	.+38     	; 0x115e <__fp_cmp+0x46>
    1138:	62 1b       	sub	r22, r18
    113a:	73 0b       	sbc	r23, r19
    113c:	84 0b       	sbc	r24, r20
    113e:	95 0b       	sbc	r25, r21
    1140:	39 f4       	brne	.+14     	; 0x1150 <__fp_cmp+0x38>
    1142:	0a 26       	eor	r0, r26
    1144:	61 f0       	breq	.+24     	; 0x115e <__fp_cmp+0x46>
    1146:	23 2b       	or	r18, r19
    1148:	24 2b       	or	r18, r20
    114a:	25 2b       	or	r18, r21
    114c:	21 f4       	brne	.+8      	; 0x1156 <__fp_cmp+0x3e>
    114e:	08 95       	ret
    1150:	0a 26       	eor	r0, r26
    1152:	09 f4       	brne	.+2      	; 0x1156 <__fp_cmp+0x3e>
    1154:	a1 40       	sbci	r26, 0x01	; 1
    1156:	a6 95       	lsr	r26
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	81 1d       	adc	r24, r1
    115c:	81 1d       	adc	r24, r1
    115e:	08 95       	ret

00001160 <__fp_inf>:
    1160:	97 f9       	bld	r25, 7
    1162:	9f 67       	ori	r25, 0x7F	; 127
    1164:	80 e8       	ldi	r24, 0x80	; 128
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	08 95       	ret

0000116c <__fp_nan>:
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	80 ec       	ldi	r24, 0xC0	; 192
    1170:	08 95       	ret

00001172 <__fp_pscA>:
    1172:	00 24       	eor	r0, r0
    1174:	0a 94       	dec	r0
    1176:	16 16       	cp	r1, r22
    1178:	17 06       	cpc	r1, r23
    117a:	18 06       	cpc	r1, r24
    117c:	09 06       	cpc	r0, r25
    117e:	08 95       	ret

00001180 <__fp_pscB>:
    1180:	00 24       	eor	r0, r0
    1182:	0a 94       	dec	r0
    1184:	12 16       	cp	r1, r18
    1186:	13 06       	cpc	r1, r19
    1188:	14 06       	cpc	r1, r20
    118a:	05 06       	cpc	r0, r21
    118c:	08 95       	ret

0000118e <__fp_round>:
    118e:	09 2e       	mov	r0, r25
    1190:	03 94       	inc	r0
    1192:	00 0c       	add	r0, r0
    1194:	11 f4       	brne	.+4      	; 0x119a <__fp_round+0xc>
    1196:	88 23       	and	r24, r24
    1198:	52 f0       	brmi	.+20     	; 0x11ae <__fp_round+0x20>
    119a:	bb 0f       	add	r27, r27
    119c:	40 f4       	brcc	.+16     	; 0x11ae <__fp_round+0x20>
    119e:	bf 2b       	or	r27, r31
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <__fp_round+0x18>
    11a2:	60 ff       	sbrs	r22, 0
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__fp_round+0x20>
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	8f 4f       	sbci	r24, 0xFF	; 255
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	08 95       	ret

000011b0 <__fp_split3>:
    11b0:	57 fd       	sbrc	r21, 7
    11b2:	90 58       	subi	r25, 0x80	; 128
    11b4:	44 0f       	add	r20, r20
    11b6:	55 1f       	adc	r21, r21
    11b8:	59 f0       	breq	.+22     	; 0x11d0 <__fp_splitA+0x10>
    11ba:	5f 3f       	cpi	r21, 0xFF	; 255
    11bc:	71 f0       	breq	.+28     	; 0x11da <__fp_splitA+0x1a>
    11be:	47 95       	ror	r20

000011c0 <__fp_splitA>:
    11c0:	88 0f       	add	r24, r24
    11c2:	97 fb       	bst	r25, 7
    11c4:	99 1f       	adc	r25, r25
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <__fp_splitA+0x20>
    11c8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ca:	79 f0       	breq	.+30     	; 0x11ea <__fp_splitA+0x2a>
    11cc:	87 95       	ror	r24
    11ce:	08 95       	ret
    11d0:	12 16       	cp	r1, r18
    11d2:	13 06       	cpc	r1, r19
    11d4:	14 06       	cpc	r1, r20
    11d6:	55 1f       	adc	r21, r21
    11d8:	f2 cf       	rjmp	.-28     	; 0x11be <__fp_split3+0xe>
    11da:	46 95       	lsr	r20
    11dc:	f1 df       	rcall	.-30     	; 0x11c0 <__fp_splitA>
    11de:	08 c0       	rjmp	.+16     	; 0x11f0 <__fp_splitA+0x30>
    11e0:	16 16       	cp	r1, r22
    11e2:	17 06       	cpc	r1, r23
    11e4:	18 06       	cpc	r1, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	f1 cf       	rjmp	.-30     	; 0x11cc <__fp_splitA+0xc>
    11ea:	86 95       	lsr	r24
    11ec:	71 05       	cpc	r23, r1
    11ee:	61 05       	cpc	r22, r1
    11f0:	08 94       	sec
    11f2:	08 95       	ret

000011f4 <__fp_zero>:
    11f4:	e8 94       	clt

000011f6 <__fp_szero>:
    11f6:	bb 27       	eor	r27, r27
    11f8:	66 27       	eor	r22, r22
    11fa:	77 27       	eor	r23, r23
    11fc:	cb 01       	movw	r24, r22
    11fe:	97 f9       	bld	r25, 7
    1200:	08 95       	ret

00001202 <__mulsf3>:
    1202:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3x>
    1206:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__fp_round>
    120a:	0e 94 b9 08 	call	0x1172	; 0x1172 <__fp_pscA>
    120e:	38 f0       	brcs	.+14     	; 0x121e <__mulsf3+0x1c>
    1210:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fp_pscB>
    1214:	20 f0       	brcs	.+8      	; 0x121e <__mulsf3+0x1c>
    1216:	95 23       	and	r25, r21
    1218:	11 f0       	breq	.+4      	; 0x121e <__mulsf3+0x1c>
    121a:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
    121e:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__fp_nan>
    1222:	11 24       	eor	r1, r1
    1224:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_szero>

00001228 <__mulsf3x>:
    1228:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fp_split3>
    122c:	70 f3       	brcs	.-36     	; 0x120a <__mulsf3+0x8>

0000122e <__mulsf3_pse>:
    122e:	95 9f       	mul	r25, r21
    1230:	c1 f3       	breq	.-16     	; 0x1222 <__mulsf3+0x20>
    1232:	95 0f       	add	r25, r21
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	55 1f       	adc	r21, r21
    1238:	62 9f       	mul	r22, r18
    123a:	f0 01       	movw	r30, r0
    123c:	72 9f       	mul	r23, r18
    123e:	bb 27       	eor	r27, r27
    1240:	f0 0d       	add	r31, r0
    1242:	b1 1d       	adc	r27, r1
    1244:	63 9f       	mul	r22, r19
    1246:	aa 27       	eor	r26, r26
    1248:	f0 0d       	add	r31, r0
    124a:	b1 1d       	adc	r27, r1
    124c:	aa 1f       	adc	r26, r26
    124e:	64 9f       	mul	r22, r20
    1250:	66 27       	eor	r22, r22
    1252:	b0 0d       	add	r27, r0
    1254:	a1 1d       	adc	r26, r1
    1256:	66 1f       	adc	r22, r22
    1258:	82 9f       	mul	r24, r18
    125a:	22 27       	eor	r18, r18
    125c:	b0 0d       	add	r27, r0
    125e:	a1 1d       	adc	r26, r1
    1260:	62 1f       	adc	r22, r18
    1262:	73 9f       	mul	r23, r19
    1264:	b0 0d       	add	r27, r0
    1266:	a1 1d       	adc	r26, r1
    1268:	62 1f       	adc	r22, r18
    126a:	83 9f       	mul	r24, r19
    126c:	a0 0d       	add	r26, r0
    126e:	61 1d       	adc	r22, r1
    1270:	22 1f       	adc	r18, r18
    1272:	74 9f       	mul	r23, r20
    1274:	33 27       	eor	r19, r19
    1276:	a0 0d       	add	r26, r0
    1278:	61 1d       	adc	r22, r1
    127a:	23 1f       	adc	r18, r19
    127c:	84 9f       	mul	r24, r20
    127e:	60 0d       	add	r22, r0
    1280:	21 1d       	adc	r18, r1
    1282:	82 2f       	mov	r24, r18
    1284:	76 2f       	mov	r23, r22
    1286:	6a 2f       	mov	r22, r26
    1288:	11 24       	eor	r1, r1
    128a:	9f 57       	subi	r25, 0x7F	; 127
    128c:	50 40       	sbci	r21, 0x00	; 0
    128e:	9a f0       	brmi	.+38     	; 0x12b6 <__mulsf3_pse+0x88>
    1290:	f1 f0       	breq	.+60     	; 0x12ce <__mulsf3_pse+0xa0>
    1292:	88 23       	and	r24, r24
    1294:	4a f0       	brmi	.+18     	; 0x12a8 <__mulsf3_pse+0x7a>
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	bb 1f       	adc	r27, r27
    129c:	66 1f       	adc	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	91 50       	subi	r25, 0x01	; 1
    12a4:	50 40       	sbci	r21, 0x00	; 0
    12a6:	a9 f7       	brne	.-22     	; 0x1292 <__mulsf3_pse+0x64>
    12a8:	9e 3f       	cpi	r25, 0xFE	; 254
    12aa:	51 05       	cpc	r21, r1
    12ac:	80 f0       	brcs	.+32     	; 0x12ce <__mulsf3_pse+0xa0>
    12ae:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_inf>
    12b2:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_szero>
    12b6:	5f 3f       	cpi	r21, 0xFF	; 255
    12b8:	e4 f3       	brlt	.-8      	; 0x12b2 <__mulsf3_pse+0x84>
    12ba:	98 3e       	cpi	r25, 0xE8	; 232
    12bc:	d4 f3       	brlt	.-12     	; 0x12b2 <__mulsf3_pse+0x84>
    12be:	86 95       	lsr	r24
    12c0:	77 95       	ror	r23
    12c2:	67 95       	ror	r22
    12c4:	b7 95       	ror	r27
    12c6:	f7 95       	ror	r31
    12c8:	e7 95       	ror	r30
    12ca:	9f 5f       	subi	r25, 0xFF	; 255
    12cc:	c1 f7       	brne	.-16     	; 0x12be <__mulsf3_pse+0x90>
    12ce:	fe 2b       	or	r31, r30
    12d0:	88 0f       	add	r24, r24
    12d2:	91 1d       	adc	r25, r1
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	97 f9       	bld	r25, 7
    12da:	08 95       	ret

000012dc <__udivmodsi4>:
    12dc:	a1 e2       	ldi	r26, 0x21	; 33
    12de:	1a 2e       	mov	r1, r26
    12e0:	aa 1b       	sub	r26, r26
    12e2:	bb 1b       	sub	r27, r27
    12e4:	fd 01       	movw	r30, r26
    12e6:	0d c0       	rjmp	.+26     	; 0x1302 <__udivmodsi4_ep>

000012e8 <__udivmodsi4_loop>:
    12e8:	aa 1f       	adc	r26, r26
    12ea:	bb 1f       	adc	r27, r27
    12ec:	ee 1f       	adc	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	a2 17       	cp	r26, r18
    12f2:	b3 07       	cpc	r27, r19
    12f4:	e4 07       	cpc	r30, r20
    12f6:	f5 07       	cpc	r31, r21
    12f8:	20 f0       	brcs	.+8      	; 0x1302 <__udivmodsi4_ep>
    12fa:	a2 1b       	sub	r26, r18
    12fc:	b3 0b       	sbc	r27, r19
    12fe:	e4 0b       	sbc	r30, r20
    1300:	f5 0b       	sbc	r31, r21

00001302 <__udivmodsi4_ep>:
    1302:	66 1f       	adc	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	1a 94       	dec	r1
    130c:	69 f7       	brne	.-38     	; 0x12e8 <__udivmodsi4_loop>
    130e:	60 95       	com	r22
    1310:	70 95       	com	r23
    1312:	80 95       	com	r24
    1314:	90 95       	com	r25
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	bd 01       	movw	r22, r26
    131c:	cf 01       	movw	r24, r30
    131e:	08 95       	ret

00001320 <strcmp>:
    1320:	fb 01       	movw	r30, r22
    1322:	dc 01       	movw	r26, r24
    1324:	8d 91       	ld	r24, X+
    1326:	01 90       	ld	r0, Z+
    1328:	80 19       	sub	r24, r0
    132a:	01 10       	cpse	r0, r1
    132c:	d9 f3       	breq	.-10     	; 0x1324 <strcmp+0x4>
    132e:	99 0b       	sbc	r25, r25
    1330:	08 95       	ret

00001332 <_exit>:
    1332:	f8 94       	cli

00001334 <__stop_program>:
    1334:	ff cf       	rjmp	.-2      	; 0x1334 <__stop_program>
